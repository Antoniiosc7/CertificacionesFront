import { AfterViewChecked, ChangeDetectorRef, ElementRef } from '@angular/core';
import { NgDocBaseInput } from '@ng-doc/ui-kit/classes/base-input';
import { NgDocInputHost } from '@ng-doc/ui-kit/classes/input-host';
import { NgDocFocusCatcherDirective } from '@ng-doc/ui-kit/directives/focus-catcher';
import { NgDocContextWithImplicit } from '@ng-doc/ui-kit/interfaces';
import { NgDocContent, NgDocTextAlign } from '@ng-doc/ui-kit/types';
import * as i0 from "@angular/core";
export declare class NgDocInputWrapperComponent<T, B = unknown> implements AfterViewChecked, NgDocInputHost<T> {
    elementRef: ElementRef<HTMLElement>;
    protected changeDetectorRef: ChangeDetectorRef;
    blurContent: NgDocContent<NgDocContextWithImplicit<B | null>>;
    blurContext: B | null;
    leftContent: NgDocContent;
    rightContent: NgDocContent;
    align: NgDocTextAlign;
    input?: NgDocBaseInput<T>;
    inputControl?: NgDocBaseInput<T>;
    focusCatcher?: NgDocFocusCatcherDirective;
    constructor(elementRef: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef);
    ngAfterViewChecked(): void;
    getBlurContext($implicit: B | null): NgDocContextWithImplicit<B | null>;
    get disabled(): boolean;
    inputHasValue(): boolean;
    get blurContentIsVisible(): boolean;
    emptyEvent(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgDocInputWrapperComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgDocInputWrapperComponent<any, any>, "ng-doc-input-wrapper", never, { "blurContent": { "alias": "blurContent"; "required": false; }; "blurContext": { "alias": "blurContext"; "required": false; }; "leftContent": { "alias": "leftContent"; "required": false; }; "rightContent": { "alias": "rightContent"; "required": false; }; "align": { "alias": "align"; "required": false; }; }, {}, ["input", "inputControl"], ["*"], true, never>;
}
