import { DOCUMENT } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, Inject } from '@angular/core';
import { toElement } from '@ng-doc/ui-kit/helpers';
import { ngDocZoneDetach } from '@ng-doc/ui-kit/observables';
import { Subject, fromEvent } from 'rxjs';
import { throttleTime, map, filter, takeUntil } from 'rxjs/operators';

class NgDocOverlayStrategy {
    constructor(documentRef, ngZone) {
        this.documentRef = documentRef;
        this.ngZone = ngZone;
        this.overlayRef = null;
        this.destroy$ = new Subject();
    }
    attach(overlayRef) {
        this.overlayRef = overlayRef;
    }
    enable() {
        fromEvent(this.documentRef, 'scroll', { capture: true })
            .pipe(ngDocZoneDetach(this.ngZone), throttleTime(10), map((scrollEvent) => scrollEvent.target instanceof Document
            ? scrollEvent.target.scrollingElement
            : scrollEvent.target), filter((target) => target instanceof Node ? target.contains(this.origin) || !this.origin : false), takeUntil(this.destroy$))
            .subscribe(() => this.detach());
    }
    get origin() {
        const config = this.overlayRef?.getConfig();
        return config?.viewContainerRef
            ? toElement(config.viewContainerRef.element)
            : null;
    }
    disable() {
        this.destroy$.next();
    }
    detach() {
        this.disable();
        if (this.overlayRef?.hasAttached()) {
            this.ngZone.run(() => {
                this.overlayRef?.detach();
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocOverlayStrategy, deps: [{ token: DOCUMENT }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocOverlayStrategy, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocOverlayStrategy, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.NgZone }] });

/**
 * Generated bundle index. Do not edit.
 */

export { NgDocOverlayStrategy };
//# sourceMappingURL=ng-doc-ui-kit-services-overlay-strategy.mjs.map
