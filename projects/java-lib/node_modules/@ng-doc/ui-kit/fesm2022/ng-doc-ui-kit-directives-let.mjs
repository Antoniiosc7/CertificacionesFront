import * as i0 from '@angular/core';
import { Directive, Input } from '@angular/core';

class NgDocLetContext {
    constructor(internalDirectiveInstance) {
        this.internalDirectiveInstance = internalDirectiveInstance;
    }
    get $implicit() {
        return this.internalDirectiveInstance.ngDocLet;
    }
    get ngDocLet() {
        return this.internalDirectiveInstance.ngDocLet;
    }
}

class NgDocLetDirective {
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
        this.viewContainer.createEmbeddedView(this.templateRef, new NgDocLetContext(this));
    }
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocLetDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocLetDirective, isStandalone: true, selector: "[ngDocLet]", inputs: { ngDocLet: "ngDocLet" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocLetDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngDocLet]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }], propDecorators: { ngDocLet: [{
                type: Input
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { NgDocLetContext, NgDocLetDirective };
//# sourceMappingURL=ng-doc-ui-kit-directives-let.mjs.map
