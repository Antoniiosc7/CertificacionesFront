/* eslint-disable */
/**
 * Implements lazy initialization for getter or memoization of a function call similar to pure {@link: Pipe}.
 * Replaces getter with its calculated value upon first call or keeps track of last call arguments and returned
 * value for function, skipping calculation when arguments are strictly the same.
 *
 * @throws error if used not on getter or function
 *
 * CAUTION: `this` is not available inside such functions/getters, they must be pure.
 */
export function ngDocMakePure(_target, propertyKey, { get, enumerable, value }) {
    if (get) {
        return {
            enumerable,
            get() {
                const value = get.call(this);
                Object.defineProperty(this, propertyKey, { enumerable, value });
                return value;
            },
        };
    }
    if (typeof value !== 'function') {
        throw new Error('ngDocMakePure can only be used with functions or getters');
    }
    const original = value;
    return {
        enumerable,
        get() {
            let previousArgs = [];
            let previousResult;
            const patched = (...args) => {
                if (previousArgs.length === args.length &&
                    args.every((arg, index) => arg === previousArgs[index])) {
                    return previousResult;
                }
                previousArgs = args;
                previousResult = original.apply(this, args);
                return previousResult;
            };
            Object.defineProperty(this, propertyKey, {
                value: patched,
            });
            return patched;
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWkta2l0L2RlY29yYXRvcnMvcHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFFcEI7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUM1QixPQUFlLEVBQ2YsV0FBbUIsRUFDbkIsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBOEI7SUFFdEQsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNULE9BQU87WUFDTixVQUFVO1lBQ1YsR0FBRztnQkFDRixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUU3QixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFFaEUsT0FBTyxLQUFLLENBQUM7WUFDZCxDQUFDO1NBQ0QsQ0FBQztJQUNILENBQUM7SUFFRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBRXZCLE9BQU87UUFDTixVQUFVO1FBQ1YsR0FBRztZQUNGLElBQUksWUFBWSxHQUF1QixFQUFFLENBQUM7WUFDMUMsSUFBSSxjQUFtQixDQUFDO1lBRXhCLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxJQUFlLEVBQUUsRUFBRTtnQkFDdEMsSUFDQyxZQUFZLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxNQUFNO29CQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUN0RCxDQUFDO29CQUNGLE9BQU8sY0FBYyxDQUFDO2dCQUN2QixDQUFDO2dCQUVELFlBQVksR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLGNBQWMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFFNUMsT0FBTyxjQUFjLENBQUM7WUFDdkIsQ0FBQyxDQUFDO1lBRUYsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO2dCQUN4QyxLQUFLLEVBQUUsT0FBTzthQUNkLENBQUMsQ0FBQztZQUVILE9BQU8sT0FBYyxDQUFDO1FBQ3ZCLENBQUM7S0FDRCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8qKlxuICogSW1wbGVtZW50cyBsYXp5IGluaXRpYWxpemF0aW9uIGZvciBnZXR0ZXIgb3IgbWVtb2l6YXRpb24gb2YgYSBmdW5jdGlvbiBjYWxsIHNpbWlsYXIgdG8gcHVyZSB7QGxpbms6IFBpcGV9LlxuICogUmVwbGFjZXMgZ2V0dGVyIHdpdGggaXRzIGNhbGN1bGF0ZWQgdmFsdWUgdXBvbiBmaXJzdCBjYWxsIG9yIGtlZXBzIHRyYWNrIG9mIGxhc3QgY2FsbCBhcmd1bWVudHMgYW5kIHJldHVybmVkXG4gKiB2YWx1ZSBmb3IgZnVuY3Rpb24sIHNraXBwaW5nIGNhbGN1bGF0aW9uIHdoZW4gYXJndW1lbnRzIGFyZSBzdHJpY3RseSB0aGUgc2FtZS5cbiAqXG4gKiBAdGhyb3dzIGVycm9yIGlmIHVzZWQgbm90IG9uIGdldHRlciBvciBmdW5jdGlvblxuICpcbiAqIENBVVRJT046IGB0aGlzYCBpcyBub3QgYXZhaWxhYmxlIGluc2lkZSBzdWNoIGZ1bmN0aW9ucy9nZXR0ZXJzLCB0aGV5IG11c3QgYmUgcHVyZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5nRG9jTWFrZVB1cmU8VD4oXG5cdF90YXJnZXQ6IE9iamVjdCxcblx0cHJvcGVydHlLZXk6IHN0cmluZyxcblx0eyBnZXQsIGVudW1lcmFibGUsIHZhbHVlIH06IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPFQ+LFxuKTogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8VD4ge1xuXHRpZiAoZ2V0KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGVudW1lcmFibGUsXG5cdFx0XHRnZXQoKTogVCB7XG5cdFx0XHRcdGNvbnN0IHZhbHVlID0gZ2V0LmNhbGwodGhpcyk7XG5cblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BlcnR5S2V5LCB7IGVudW1lcmFibGUsIHZhbHVlIH0pO1xuXG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ25nRG9jTWFrZVB1cmUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGZ1bmN0aW9ucyBvciBnZXR0ZXJzJyk7XG5cdH1cblxuXHRjb25zdCBvcmlnaW5hbCA9IHZhbHVlO1xuXG5cdHJldHVybiB7XG5cdFx0ZW51bWVyYWJsZSxcblx0XHRnZXQoKTogVCB7XG5cdFx0XHRsZXQgcHJldmlvdXNBcmdzOiByZWFkb25seSB1bmtub3duW10gPSBbXTtcblx0XHRcdGxldCBwcmV2aW91c1Jlc3VsdDogYW55O1xuXG5cdFx0XHRjb25zdCBwYXRjaGVkID0gKC4uLmFyZ3M6IHVua25vd25bXSkgPT4ge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cHJldmlvdXNBcmdzLmxlbmd0aCA9PT0gYXJncy5sZW5ndGggJiZcblx0XHRcdFx0XHRhcmdzLmV2ZXJ5KChhcmcsIGluZGV4KSA9PiBhcmcgPT09IHByZXZpb3VzQXJnc1tpbmRleF0pXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiBwcmV2aW91c1Jlc3VsdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHByZXZpb3VzQXJncyA9IGFyZ3M7XG5cdFx0XHRcdHByZXZpb3VzUmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG5cblx0XHRcdFx0cmV0dXJuIHByZXZpb3VzUmVzdWx0O1xuXHRcdFx0fTtcblxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BlcnR5S2V5LCB7XG5cdFx0XHRcdHZhbHVlOiBwYXRjaGVkLFxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBwYXRjaGVkIGFzIGFueTtcblx0XHR9LFxuXHR9O1xufVxuIl19