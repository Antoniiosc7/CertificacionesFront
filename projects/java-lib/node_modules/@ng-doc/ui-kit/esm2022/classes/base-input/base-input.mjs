import { Directive, ElementRef, HostBinding, inject } from '@angular/core';
import { isBrowser } from '@ng-doc/core';
import { DIControl, injectHostControl } from 'di-controls';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class NgDocBaseInput extends DIControl {
    constructor(config) {
        super({
            host: injectHostControl({ optional: true }),
            ...config,
        });
        this.elementRef = inject(ElementRef);
        this.changes = new Subject();
    }
    get hostClasses() {
        return 'ng-doc-input';
    }
    get placeholder() {
        return this.elementRef.nativeElement.placeholder || '';
    }
    get isFocused() {
        return isBrowser ? document.activeElement === this.elementRef.nativeElement : false;
    }
    get isReadonly() {
        return this.elementRef.nativeElement.readOnly;
    }
    get value() {
        return this.elementRef.nativeElement.value;
    }
    focus() {
        this.elementRef.nativeElement.focus();
    }
    blink() {
        this.renderer.removeClass(this.elementRef.nativeElement, '-blink');
        // eslint-disable-next-line @typescript-eslint/no-unused-expressions
        this.elementRef.nativeElement.offsetWidth;
        this.renderer.addClass(this.elementRef.nativeElement, '-blink');
    }
    updateModel(value) {
        super.updateModel(value);
        this.changes.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocBaseInput, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocBaseInput, host: { properties: { "class": "this.hostClasses" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocBaseInput, decorators: [{
            type: Directive
        }], ctorParameters: () => [{ type: undefined }], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1pbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkta2l0L2NsYXNzZXMvYmFzZS1pbnB1dC9iYXNlLWlucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTNELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBRy9CLE1BQU0sT0FBZ0IsY0FBa0IsU0FBUSxTQUFZO0lBSTNELFlBQXNCLE1BQThCO1FBQ25ELEtBQUssQ0FBQztZQUNMLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUMzQyxHQUFHLE1BQU07U0FDVCxDQUFDLENBQUM7UUFQYyxlQUFVLEdBQWlDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2RSxZQUFPLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7SUFPaEQsQ0FBQztJQUVELElBQ0ksV0FBVztRQUNkLE9BQU8sY0FBYyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDZCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVELElBQUksU0FBUztRQUNaLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDckYsQ0FBQztJQUVELElBQUksVUFBVTtRQUNiLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUM1QyxDQUFDO0lBRUQsS0FBSztRQUNKLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxLQUFLO1FBQ0osSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkUsb0VBQW9FO1FBQ3BFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztRQUMxQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRVEsV0FBVyxDQUFDLEtBQWU7UUFDbkMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV6QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7OEdBL0NvQixjQUFjO2tHQUFkLGNBQWM7OzJGQUFkLGNBQWM7a0JBRG5DLFNBQVM7MkVBYUwsV0FBVztzQkFEZCxXQUFXO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJ0BuZy1kb2MvY29yZSc7XG5pbXBvcnQgeyBESUNvbnRyb2wsIGluamVjdEhvc3RDb250cm9sIH0gZnJvbSAnZGktY29udHJvbHMnO1xuaW1wb3J0IHsgRElDb250cm9sQ29uZmlnIH0gZnJvbSAnZGktY29udHJvbHMvY29udHJvbHMvY29udHJvbCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5nRG9jQmFzZUlucHV0PFQ+IGV4dGVuZHMgRElDb250cm9sPFQ+IHtcblx0b3ZlcnJpZGUgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50PiA9IGluamVjdChFbGVtZW50UmVmKTtcblx0cmVhZG9ubHkgY2hhbmdlczogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0KCk7XG5cblx0cHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbmZpZz86IERJQ29udHJvbENvbmZpZzxULCBUPikge1xuXHRcdHN1cGVyKHtcblx0XHRcdGhvc3Q6IGluamVjdEhvc3RDb250cm9sKHsgb3B0aW9uYWw6IHRydWUgfSksXG5cdFx0XHQuLi5jb25maWcsXG5cdFx0fSk7XG5cdH1cblxuXHRASG9zdEJpbmRpbmcoJ2NsYXNzJylcblx0Z2V0IGhvc3RDbGFzc2VzKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuICduZy1kb2MtaW5wdXQnO1xuXHR9XG5cblx0Z2V0IHBsYWNlaG9sZGVyKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnBsYWNlaG9sZGVyIHx8ICcnO1xuXHR9XG5cblx0Z2V0IGlzRm9jdXNlZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gaXNCcm93c2VyID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgOiBmYWxzZTtcblx0fVxuXG5cdGdldCBpc1JlYWRvbmx5KCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5yZWFkT25seTtcblx0fVxuXG5cdGdldCB2YWx1ZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC52YWx1ZTtcblx0fVxuXG5cdGZvY3VzKCk6IHZvaWQge1xuXHRcdHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG5cdH1cblxuXHRibGluaygpOiB2b2lkIHtcblx0XHR0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnLWJsaW5rJyk7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHR0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcblx0XHR0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnLWJsaW5rJyk7XG5cdH1cblxuXHRvdmVycmlkZSB1cGRhdGVNb2RlbCh2YWx1ZTogVCB8IG51bGwpIHtcblx0XHRzdXBlci51cGRhdGVNb2RlbCh2YWx1ZSk7XG5cblx0XHR0aGlzLmNoYW5nZXMubmV4dCgpO1xuXHR9XG59XG4iXX0=