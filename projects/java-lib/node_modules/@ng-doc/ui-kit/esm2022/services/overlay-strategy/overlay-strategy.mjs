import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, NgZone } from '@angular/core';
import { toElement } from '@ng-doc/ui-kit/helpers';
import { ngDocZoneDetach } from '@ng-doc/ui-kit/observables';
import { fromEvent, Subject } from 'rxjs';
import { filter, map, takeUntil, throttleTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class NgDocOverlayStrategy {
    constructor(documentRef, ngZone) {
        this.documentRef = documentRef;
        this.ngZone = ngZone;
        this.overlayRef = null;
        this.destroy$ = new Subject();
    }
    attach(overlayRef) {
        this.overlayRef = overlayRef;
    }
    enable() {
        fromEvent(this.documentRef, 'scroll', { capture: true })
            .pipe(ngDocZoneDetach(this.ngZone), throttleTime(10), map((scrollEvent) => scrollEvent.target instanceof Document
            ? scrollEvent.target.scrollingElement
            : scrollEvent.target), filter((target) => target instanceof Node ? target.contains(this.origin) || !this.origin : false), takeUntil(this.destroy$))
            .subscribe(() => this.detach());
    }
    get origin() {
        const config = this.overlayRef?.getConfig();
        return config?.viewContainerRef
            ? toElement(config.viewContainerRef.element)
            : null;
    }
    disable() {
        this.destroy$.next();
    }
    detach() {
        this.disable();
        if (this.overlayRef?.hasAttached()) {
            this.ngZone.run(() => {
                this.overlayRef?.detach();
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocOverlayStrategy, deps: [{ token: DOCUMENT }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocOverlayStrategy, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocOverlayStrategy, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.NgZone }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkta2l0L3NlcnZpY2VzL292ZXJsYXktc3RyYXRlZ3kvb3ZlcmxheS1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUd0RSxNQUFNLE9BQU8sb0JBQW9CO0lBSWhDLFlBQzJCLFdBQXFCLEVBQ3ZDLE1BQWM7UUFESSxnQkFBVyxHQUFYLFdBQVcsQ0FBVTtRQUN2QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTGYsZUFBVSxHQUFzQixJQUFJLENBQUM7UUFDckMsYUFBUSxHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDO0lBS25ELENBQUM7SUFFSixNQUFNLENBQUMsVUFBc0I7UUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDOUIsQ0FBQztJQUVELE1BQU07UUFDTCxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDdEQsSUFBSSxDQUNKLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQzVCLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFDaEIsR0FBRyxDQUFDLENBQUMsV0FBa0IsRUFBRSxFQUFFLENBQzFCLFdBQVcsQ0FBQyxNQUFNLFlBQVksUUFBUTtZQUNyQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0I7WUFDckMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQ3JCLEVBQ0QsTUFBTSxDQUFDLENBQUMsTUFBMEIsRUFBRSxFQUFFLENBQ3JDLE1BQU0sWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUM3RSxFQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ3hCO2FBQ0EsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFZLE1BQU07UUFDakIsTUFBTSxNQUFNLEdBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQXdCLENBQUM7UUFDcEQsT0FBTyxNQUFNLEVBQUUsZ0JBQWdCO1lBQzlCLENBQUMsQ0FBRSxTQUFTLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBaUI7WUFDN0QsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNULENBQUM7SUFFRCxPQUFPO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsTUFBTTtRQUNMLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztRQUNKLENBQUM7SUFDRixDQUFDOzhHQWxEVyxvQkFBb0Isa0JBS3ZCLFFBQVE7a0hBTEwsb0JBQW9CLGNBRFAsTUFBTTs7MkZBQ25CLG9CQUFvQjtrQkFEaEMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OzBCQU0vQixNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPdmVybGF5UmVmLCBTY3JvbGxTdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0b0VsZW1lbnQgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9oZWxwZXJzJztcbmltcG9ydCB7IE5nRG9jT3ZlcmxheUNvbmZpZyB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgbmdEb2Nab25lRGV0YWNoIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgdGFrZVVudGlsLCB0aHJvdHRsZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTmdEb2NPdmVybGF5U3RyYXRlZ3kgaW1wbGVtZW50cyBTY3JvbGxTdHJhdGVneSB7XG5cdHByaXZhdGUgb3ZlcmxheVJlZjogT3ZlcmxheVJlZiB8IG51bGwgPSBudWxsO1xuXHRwcml2YXRlIGRlc3Ryb3kkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50UmVmOiBEb2N1bWVudCxcblx0XHRwcml2YXRlIG5nWm9uZTogTmdab25lLFxuXHQpIHt9XG5cblx0YXR0YWNoKG92ZXJsYXlSZWY6IE92ZXJsYXlSZWYpOiB2b2lkIHtcblx0XHR0aGlzLm92ZXJsYXlSZWYgPSBvdmVybGF5UmVmO1xuXHR9XG5cblx0ZW5hYmxlKCk6IHZvaWQge1xuXHRcdGZyb21FdmVudCh0aGlzLmRvY3VtZW50UmVmLCAnc2Nyb2xsJywgeyBjYXB0dXJlOiB0cnVlIH0pXG5cdFx0XHQucGlwZShcblx0XHRcdFx0bmdEb2Nab25lRGV0YWNoKHRoaXMubmdab25lKSxcblx0XHRcdFx0dGhyb3R0bGVUaW1lKDEwKSxcblx0XHRcdFx0bWFwKChzY3JvbGxFdmVudDogRXZlbnQpID0+XG5cdFx0XHRcdFx0c2Nyb2xsRXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgRG9jdW1lbnRcblx0XHRcdFx0XHRcdD8gc2Nyb2xsRXZlbnQudGFyZ2V0LnNjcm9sbGluZ0VsZW1lbnRcblx0XHRcdFx0XHRcdDogc2Nyb2xsRXZlbnQudGFyZ2V0LFxuXHRcdFx0XHQpLFxuXHRcdFx0XHRmaWx0ZXIoKHRhcmdldDogRXZlbnRUYXJnZXQgfCBudWxsKSA9PlxuXHRcdFx0XHRcdHRhcmdldCBpbnN0YW5jZW9mIE5vZGUgPyB0YXJnZXQuY29udGFpbnModGhpcy5vcmlnaW4pIHx8ICF0aGlzLm9yaWdpbiA6IGZhbHNlLFxuXHRcdFx0XHQpLFxuXHRcdFx0XHR0YWtlVW50aWwodGhpcy5kZXN0cm95JCksXG5cdFx0XHQpXG5cdFx0XHQuc3Vic2NyaWJlKCgpID0+IHRoaXMuZGV0YWNoKCkpO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXQgb3JpZ2luKCk6IEhUTUxFbGVtZW50IHwgbnVsbCB7XG5cdFx0Y29uc3QgY29uZmlnOiBOZ0RvY092ZXJsYXlDb25maWcgfCB1bmRlZmluZWQgPVxuXHRcdFx0dGhpcy5vdmVybGF5UmVmPy5nZXRDb25maWcoKSBhcyBOZ0RvY092ZXJsYXlDb25maWc7XG5cdFx0cmV0dXJuIGNvbmZpZz8udmlld0NvbnRhaW5lclJlZlxuXHRcdFx0PyAodG9FbGVtZW50KGNvbmZpZy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQpIGFzIEhUTUxFbGVtZW50KVxuXHRcdFx0OiBudWxsO1xuXHR9XG5cblx0ZGlzYWJsZSgpOiB2b2lkIHtcblx0XHR0aGlzLmRlc3Ryb3kkLm5leHQoKTtcblx0fVxuXG5cdGRldGFjaCgpOiB2b2lkIHtcblx0XHR0aGlzLmRpc2FibGUoKTtcblx0XHRpZiAodGhpcy5vdmVybGF5UmVmPy5oYXNBdHRhY2hlZCgpKSB7XG5cdFx0XHR0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuXHRcdFx0XHR0aGlzLm92ZXJsYXlSZWY/LmRldGFjaCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG59XG4iXX0=