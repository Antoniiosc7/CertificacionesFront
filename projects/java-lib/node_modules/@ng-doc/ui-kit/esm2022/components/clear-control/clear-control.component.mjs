import { __decorate, __metadata } from "tslib";
import { NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
import { NgDocInputHost } from '@ng-doc/ui-kit/classes/input-host';
import { NgDocButtonIconComponent } from '@ng-doc/ui-kit/components/button-icon';
import { NgDocIconComponent } from '@ng-doc/ui-kit/components/icon';
import { NgDocFocusableDirective } from '@ng-doc/ui-kit/directives/focusable';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { DIControl, injectHostControl } from 'di-controls';
import * as i0 from "@angular/core";
let NgDocClearControlComponent = class NgDocClearControlComponent extends DIControl {
    constructor() {
        super({
            host: injectHostControl(),
        });
        this.inputHost = inject(NgDocInputHost, {
            optional: true,
        });
    }
    ngAfterContentInit() {
        if (this.inputHost?.inputControl) {
            this.inputHost.inputControl.changes
                .pipe(untilDestroyed(this))
                .subscribe(() => this.changeDetectorRef.detectChanges());
        }
    }
    get isVisible() {
        return this.inputHost?.inputControl?.hasValue || this.hasValue;
    }
    clear() {
        this.inputHost?.inputControl?.writeValueFromHost(null);
        this.updateModel(null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocClearControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocClearControlComponent, isStandalone: true, selector: "ng-doc-clear-control", usesInheritance: true, ngImport: i0, template: "<button\n\tng-doc-button-icon\n\tsize=\"large\"\n\t[ngDocFocusable]=\"false\"\n\t[disabled]=\"disabled\"\n\t[rounded]=\"false\"\n\t(click)=\"clear()\"\n\t(focusout)=\"touch()\"\n\t*ngIf=\"isVisible\">\n\t<ng-doc-icon icon=\"x\"></ng-doc-icon>\n</button>\n", styles: [":host{display:inline-block}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: NgDocButtonIconComponent, selector: "button[ng-doc-button-icon], a[ng-doc-button-icon]", inputs: ["size", "rounded"] }, { kind: "directive", type: NgDocFocusableDirective, selector: "[ngDocFocusable]", inputs: ["ngDocFocusable"], exportAs: ["ngDocFocusable"] }, { kind: "component", type: NgDocIconComponent, selector: "ng-doc-icon", inputs: ["icon", "customIcon", "size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
};
NgDocClearControlComponent = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [])
], NgDocClearControlComponent);
export { NgDocClearControlComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocClearControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-clear-control', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgIf, NgDocButtonIconComponent, NgDocFocusableDirective, NgDocIconComponent], template: "<button\n\tng-doc-button-icon\n\tsize=\"large\"\n\t[ngDocFocusable]=\"false\"\n\t[disabled]=\"disabled\"\n\t[rounded]=\"false\"\n\t(click)=\"clear()\"\n\t(focusout)=\"touch()\"\n\t*ngIf=\"isVisible\">\n\t<ng-doc-icon icon=\"x\"></ng-doc-icon>\n</button>\n", styles: [":host{display:inline-block}\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYXItY29udHJvbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9jb21wb25lbnRzL2NsZWFyLWNvbnRyb2wvY2xlYXItY29udHJvbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9jb21wb25lbnRzL2NsZWFyLWNvbnRyb2wvY2xlYXItY29udHJvbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBb0IsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbkUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDakYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDcEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDOUUsT0FBTyxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDOztBQVdwRCxJQUFNLDBCQUEwQixHQUFoQyxNQUFNLDBCQUE4QixTQUFRLFNBQVk7SUFLOUQ7UUFDQyxLQUFLLENBQUM7WUFDTCxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7U0FDekIsQ0FBQyxDQUFDO1FBUGUsY0FBUyxHQUE2QixNQUFNLENBQUMsY0FBYyxFQUFFO1lBQy9FLFFBQVEsRUFBRSxJQUFJO1NBQ2QsQ0FBQyxDQUFDO0lBTUgsQ0FBQztJQUVELGtCQUFrQjtRQUNqQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsT0FBTztpQkFDakMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDMUIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQzNELENBQUM7SUFDRixDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1osT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNoRSxDQUFDO0lBRUQsS0FBSztRQUNKLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQzs4R0ExQlcsMEJBQTBCO2tHQUExQiwwQkFBMEIsdUdDbEJ2QyxpUUFXQSx1RkRJVyxJQUFJLDZGQUFFLHdCQUF3QiwySEFBRSx1QkFBdUIsdUhBQUUsa0JBQWtCOztBQUd6RSwwQkFBMEI7SUFEdEMsWUFBWSxFQUFFOztHQUNGLDBCQUEwQixDQTJCdEM7OzJGQTNCWSwwQkFBMEI7a0JBVHRDLFNBQVM7K0JBQ0Msc0JBQXNCLG1CQUdmLHVCQUF1QixDQUFDLE1BQU0sY0FDbkMsSUFBSSxXQUNQLENBQUMsSUFBSSxFQUFFLHdCQUF3QixFQUFFLHVCQUF1QixFQUFFLGtCQUFrQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdJZiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nRG9jSW5wdXRIb3N0IH0gZnJvbSAnQG5nLWRvYy91aS1raXQvY2xhc3Nlcy9pbnB1dC1ob3N0JztcbmltcG9ydCB7IE5nRG9jQnV0dG9uSWNvbkNvbXBvbmVudCB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L2NvbXBvbmVudHMvYnV0dG9uLWljb24nO1xuaW1wb3J0IHsgTmdEb2NJY29uQ29tcG9uZW50IH0gZnJvbSAnQG5nLWRvYy91aS1raXQvY29tcG9uZW50cy9pY29uJztcbmltcG9ydCB7IE5nRG9jRm9jdXNhYmxlRGlyZWN0aXZlIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvZGlyZWN0aXZlcy9mb2N1c2FibGUnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBESUNvbnRyb2wsIGluamVjdEhvc3RDb250cm9sIH0gZnJvbSAnZGktY29udHJvbHMnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICduZy1kb2MtY2xlYXItY29udHJvbCcsXG5cdHRlbXBsYXRlVXJsOiAnLi9jbGVhci1jb250cm9sLmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJy4vY2xlYXItY29udHJvbC5jb21wb25lbnQuc2NzcyddLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aW1wb3J0czogW05nSWYsIE5nRG9jQnV0dG9uSWNvbkNvbXBvbmVudCwgTmdEb2NGb2N1c2FibGVEaXJlY3RpdmUsIE5nRG9jSWNvbkNvbXBvbmVudF0sXG59KVxuQFVudGlsRGVzdHJveSgpXG5leHBvcnQgY2xhc3MgTmdEb2NDbGVhckNvbnRyb2xDb21wb25lbnQ8VD4gZXh0ZW5kcyBESUNvbnRyb2w8VD4gaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcblx0cHJvdGVjdGVkIHJlYWRvbmx5IGlucHV0SG9zdDogTmdEb2NJbnB1dEhvc3Q8VD4gfCBudWxsID0gaW5qZWN0KE5nRG9jSW5wdXRIb3N0LCB7XG5cdFx0b3B0aW9uYWw6IHRydWUsXG5cdH0pO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHtcblx0XHRcdGhvc3Q6IGluamVjdEhvc3RDb250cm9sKCksXG5cdFx0fSk7XG5cdH1cblxuXHRuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuaW5wdXRIb3N0Py5pbnB1dENvbnRyb2wpIHtcblx0XHRcdHRoaXMuaW5wdXRIb3N0LmlucHV0Q29udHJvbC5jaGFuZ2VzXG5cdFx0XHRcdC5waXBlKHVudGlsRGVzdHJveWVkKHRoaXMpKVxuXHRcdFx0XHQuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpKTtcblx0XHR9XG5cdH1cblxuXHRnZXQgaXNWaXNpYmxlKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmlucHV0SG9zdD8uaW5wdXRDb250cm9sPy5oYXNWYWx1ZSB8fCB0aGlzLmhhc1ZhbHVlO1xuXHR9XG5cblx0Y2xlYXIoKTogdm9pZCB7XG5cdFx0dGhpcy5pbnB1dEhvc3Q/LmlucHV0Q29udHJvbD8ud3JpdGVWYWx1ZUZyb21Ib3N0KG51bGwpO1xuXHRcdHRoaXMudXBkYXRlTW9kZWwobnVsbCk7XG5cdH1cbn1cbiIsIjxidXR0b25cblx0bmctZG9jLWJ1dHRvbi1pY29uXG5cdHNpemU9XCJsYXJnZVwiXG5cdFtuZ0RvY0ZvY3VzYWJsZV09XCJmYWxzZVwiXG5cdFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG5cdFtyb3VuZGVkXT1cImZhbHNlXCJcblx0KGNsaWNrKT1cImNsZWFyKClcIlxuXHQoZm9jdXNvdXQpPVwidG91Y2goKVwiXG5cdCpuZ0lmPVwiaXNWaXNpYmxlXCI+XG5cdDxuZy1kb2MtaWNvbiBpY29uPVwieFwiPjwvbmctZG9jLWljb24+XG48L2J1dHRvbj5cbiJdfQ==