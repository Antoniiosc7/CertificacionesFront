import { __decorate, __metadata } from "tslib";
import { NgFor, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NgDocDataListComponent } from '@ng-doc/ui-kit/components/data-list';
import { NgDocListComponent } from '@ng-doc/ui-kit/components/list';
import { NgDocOptionComponent } from '@ng-doc/ui-kit/components/option';
import { NgDocOptionGroupComponent, NgDocOptionGroupHeaderDirective, } from '@ng-doc/ui-kit/components/option-group';
import { NgDocTextComponent } from '@ng-doc/ui-kit/components/text';
import { NG_DOC_DEFAULT_STRINGIFY } from '@ng-doc/ui-kit/constants';
import { ngDocMakePure } from '@ng-doc/ui-kit/decorators';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i0 from "@angular/core";
import * as i1 from "@tinkoff/ng-polymorpheus";
export class NgDocDataListGroupComponent extends NgDocDataListComponent {
    constructor() {
        super(...arguments);
        this.groupContent = ({ $implicit, }) => NG_DOC_DEFAULT_STRINGIFY($implicit);
        this.groups = new Map();
        this.groupItems = [];
    }
    getGroupContext($implicit) {
        return { $implicit };
    }
    ngOnChanges({ items, itemGroupFn }) {
        if (items || itemGroupFn) {
            this.groups = new Map();
            this.items?.forEach((item) => {
                if (this.itemGroupFn) {
                    const itemGroup = this.itemGroupFn(item);
                    const itemsList = this.groups.get(itemGroup) || [];
                    itemsList.push(item);
                    this.groups.set(this.itemGroupFn(item), itemsList);
                }
            });
            this.groupItems = Array.from(this.groups.keys());
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocDataListGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocDataListGroupComponent, isStandalone: true, selector: "ng-doc-data-list-group", inputs: { itemGroupFn: "itemGroupFn", groupContent: "groupContent" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<ng-doc-list>\n\t<ng-container *ngIf=\"items && items.length; else emptyTemplate\">\n\t\t<ng-doc-option-group *ngFor=\"let group of groupItems\">\n\t\t\t<span\n\t\t\t\t*polymorpheusOutlet=\"groupContent as groupText; context: getGroupContext(group)\"\n\t\t\t\tngDocOptionGroupHeader>\n\t\t\t\t{{ groupText }}\n\t\t\t</span>\n\t\t\t<ng-doc-option\n\t\t\t\t*ngFor=\"let item of groups.get(group); trackBy: trackByFn\"\n\t\t\t\t[value]=\"defineValueFn(item)\"\n\t\t\t\t[disabled]=\"itemDisabledFn(item)\">\n\t\t\t\t<ng-container *polymorpheusOutlet=\"itemContent as text; context: getContext(item)\">\n\t\t\t\t\t{{ text }}\n\t\t\t\t</ng-container>\n\t\t\t</ng-doc-option>\n\t\t</ng-doc-option-group>\n\t</ng-container>\n\n\t<ng-template #emptyTemplate>\n\t\t<div class=\"ng-doc-empty-message\" ng-doc-text>\n\t\t\t<ng-container *ngIf=\"emptyContent\">\n\t\t\t\t<ng-container *polymorpheusOutlet=\"emptyContent as text\"> {{ text }} </ng-container>\n\t\t\t</ng-container>\n\t\t</div>\n\t</ng-template>\n</ng-doc-list>\n", styles: [":host{display:block;max-height:var(--ng-doc-list-size)}ng-doc-option-group:not(:last-child){margin-bottom:calc(var(--ng-doc-base-gutter) * 2)}.ng-doc-empty-message{padding:var(--ng-doc-base-gutter) calc(var(--ng-doc-base-gutter) * 2);--ng-doc-font-size: 13px;--ng-doc-line-height: 22px}\n"], dependencies: [{ kind: "component", type: NgDocListComponent, selector: "ng-doc-list" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: NgDocOptionGroupComponent, selector: "ng-doc-option-group" }, { kind: "ngmodule", type: PolymorpheusModule }, { kind: "directive", type: i1.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: NgDocOptionGroupHeaderDirective, selector: "[ngDocOptionGroupHeader]" }, { kind: "component", type: NgDocOptionComponent, selector: "ng-doc-option" }, { kind: "component", type: NgDocTextComponent, selector: "[ng-doc-text]", inputs: ["size", "color", "align", "absoluteContent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    ngDocMakePure,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], NgDocDataListGroupComponent.prototype, "getGroupContext", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocDataListGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-data-list-group', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        NgDocListComponent,
                        NgIf,
                        NgFor,
                        NgDocOptionGroupComponent,
                        PolymorpheusModule,
                        NgDocOptionGroupHeaderDirective,
                        NgDocOptionComponent,
                        NgDocTextComponent,
                    ], template: "<ng-doc-list>\n\t<ng-container *ngIf=\"items && items.length; else emptyTemplate\">\n\t\t<ng-doc-option-group *ngFor=\"let group of groupItems\">\n\t\t\t<span\n\t\t\t\t*polymorpheusOutlet=\"groupContent as groupText; context: getGroupContext(group)\"\n\t\t\t\tngDocOptionGroupHeader>\n\t\t\t\t{{ groupText }}\n\t\t\t</span>\n\t\t\t<ng-doc-option\n\t\t\t\t*ngFor=\"let item of groups.get(group); trackBy: trackByFn\"\n\t\t\t\t[value]=\"defineValueFn(item)\"\n\t\t\t\t[disabled]=\"itemDisabledFn(item)\">\n\t\t\t\t<ng-container *polymorpheusOutlet=\"itemContent as text; context: getContext(item)\">\n\t\t\t\t\t{{ text }}\n\t\t\t\t</ng-container>\n\t\t\t</ng-doc-option>\n\t\t</ng-doc-option-group>\n\t</ng-container>\n\n\t<ng-template #emptyTemplate>\n\t\t<div class=\"ng-doc-empty-message\" ng-doc-text>\n\t\t\t<ng-container *ngIf=\"emptyContent\">\n\t\t\t\t<ng-container *polymorpheusOutlet=\"emptyContent as text\"> {{ text }} </ng-container>\n\t\t\t</ng-container>\n\t\t</div>\n\t</ng-template>\n</ng-doc-list>\n", styles: [":host{display:block;max-height:var(--ng-doc-list-size)}ng-doc-option-group:not(:last-child){margin-bottom:calc(var(--ng-doc-base-gutter) * 2)}.ng-doc-empty-message{padding:var(--ng-doc-base-gutter) calc(var(--ng-doc-base-gutter) * 2);--ng-doc-font-size: 13px;--ng-doc-line-height: 22px}\n"] }]
        }], propDecorators: { itemGroupFn: [{
                type: Input
            }], groupContent: [{
                type: Input
            }], getGroupContext: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1saXN0LWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkta2l0L2NvbXBvbmVudHMvZGF0YS1saXN0LWdyb3VwL2RhdGEtbGlzdC1ncm91cC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9jb21wb25lbnRzL2RhdGEtbGlzdC1ncm91cC9kYXRhLWxpc3QtZ3JvdXAuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3hFLE9BQU8sRUFDTix5QkFBeUIsRUFDekIsK0JBQStCLEdBQy9CLE1BQU0sd0NBQXdDLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDcEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRzFELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7QUFtQjlELE1BQU0sT0FBTywyQkFDWixTQUFRLHNCQUF5QjtJQWxCbEM7O1FBeUJDLGlCQUFZLEdBQThDLENBQUMsRUFDMUQsU0FBUyxHQUNvQixFQUFFLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV2RSxXQUFNLEdBQWdCLElBQUksR0FBRyxFQUFFLENBQUM7UUFFaEMsZUFBVSxHQUFRLEVBQUUsQ0FBQztLQXdCckI7SUFyQkEsZUFBZSxDQUFDLFNBQVk7UUFDM0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFpQjtRQUNoRCxJQUFJLEtBQUssSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7WUFFaEMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFPLEVBQUUsRUFBRTtnQkFDL0IsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7b0JBQ3RCLE1BQU0sU0FBUyxHQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzVDLE1BQU0sU0FBUyxHQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDeEQsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFFckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDcEQsQ0FBQztZQUNGLENBQUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNsRCxDQUFDO0lBQ0YsQ0FBQzs4R0FyQ1csMkJBQTJCO2tHQUEzQiwyQkFBMkIsb01DakN4Qyx5L0JBMkJBLDBWREpFLGtCQUFrQix3REFDbEIsSUFBSSw2RkFDSixLQUFLLG1IQUNMLHlCQUF5QiwrREFDekIsa0JBQWtCLDJMQUNsQiwrQkFBK0IscUVBQy9CLG9CQUFvQiwwREFDcEIsa0JBQWtCOztBQW9CbkI7SUFEQyxhQUFhOzs7O2tFQUdiOzJGQW5CVywyQkFBMkI7a0JBakJ2QyxTQUFTOytCQUNDLHdCQUF3QixtQkFHakIsdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJLFdBQ1A7d0JBQ1Isa0JBQWtCO3dCQUNsQixJQUFJO3dCQUNKLEtBQUs7d0JBQ0wseUJBQXlCO3dCQUN6QixrQkFBa0I7d0JBQ2xCLCtCQUErQjt3QkFDL0Isb0JBQW9CO3dCQUNwQixrQkFBa0I7cUJBQ2xCOzhCQU9ELFdBQVc7c0JBRFYsS0FBSztnQkFJTixZQUFZO3NCQURYLEtBQUs7Z0JBVU4sZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nRm9yLCBOZ0lmIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nRG9jRGF0YUxpc3RDb21wb25lbnQgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9jb21wb25lbnRzL2RhdGEtbGlzdCc7XG5pbXBvcnQgeyBOZ0RvY0xpc3RDb21wb25lbnQgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9jb21wb25lbnRzL2xpc3QnO1xuaW1wb3J0IHsgTmdEb2NPcHRpb25Db21wb25lbnQgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9jb21wb25lbnRzL29wdGlvbic7XG5pbXBvcnQge1xuXHROZ0RvY09wdGlvbkdyb3VwQ29tcG9uZW50LFxuXHROZ0RvY09wdGlvbkdyb3VwSGVhZGVyRGlyZWN0aXZlLFxufSBmcm9tICdAbmctZG9jL3VpLWtpdC9jb21wb25lbnRzL29wdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBOZ0RvY1RleHRDb21wb25lbnQgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9jb21wb25lbnRzL3RleHQnO1xuaW1wb3J0IHsgTkdfRE9DX0RFRkFVTFRfU1RSSU5HSUZZIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvY29uc3RhbnRzJztcbmltcG9ydCB7IG5nRG9jTWFrZVB1cmUgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9kZWNvcmF0b3JzJztcbmltcG9ydCB7IE5nRG9jQ29udGV4dFdpdGhJbXBsaWNpdCB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgTmdEb2NDb250ZW50LCBOZ0RvY0dyb3VwRm4gfSBmcm9tICdAbmctZG9jL3VpLWtpdC90eXBlcyc7XG5pbXBvcnQgeyBQb2x5bW9ycGhldXNNb2R1bGUgfSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICduZy1kb2MtZGF0YS1saXN0LWdyb3VwJyxcblx0dGVtcGxhdGVVcmw6ICcuL2RhdGEtbGlzdC1ncm91cC5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL2RhdGEtbGlzdC1ncm91cC5jb21wb25lbnQuc2NzcyddLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aW1wb3J0czogW1xuXHRcdE5nRG9jTGlzdENvbXBvbmVudCxcblx0XHROZ0lmLFxuXHRcdE5nRm9yLFxuXHRcdE5nRG9jT3B0aW9uR3JvdXBDb21wb25lbnQsXG5cdFx0UG9seW1vcnBoZXVzTW9kdWxlLFxuXHRcdE5nRG9jT3B0aW9uR3JvdXBIZWFkZXJEaXJlY3RpdmUsXG5cdFx0TmdEb2NPcHRpb25Db21wb25lbnQsXG5cdFx0TmdEb2NUZXh0Q29tcG9uZW50LFxuXHRdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0RvY0RhdGFMaXN0R3JvdXBDb21wb25lbnQ8VCwgRz5cblx0ZXh0ZW5kcyBOZ0RvY0RhdGFMaXN0Q29tcG9uZW50PFQ+XG5cdGltcGxlbWVudHMgT25DaGFuZ2VzXG57XG5cdEBJbnB1dCgpXG5cdGl0ZW1Hcm91cEZuPzogTmdEb2NHcm91cEZuPFQsIEc+O1xuXG5cdEBJbnB1dCgpXG5cdGdyb3VwQ29udGVudDogTmdEb2NDb250ZW50PE5nRG9jQ29udGV4dFdpdGhJbXBsaWNpdDxHPj4gPSAoe1xuXHRcdCRpbXBsaWNpdCxcblx0fTogTmdEb2NDb250ZXh0V2l0aEltcGxpY2l0PEc+KSA9PiBOR19ET0NfREVGQVVMVF9TVFJJTkdJRlkoJGltcGxpY2l0KTtcblxuXHRncm91cHM6IE1hcDxHLCBUW10+ID0gbmV3IE1hcCgpO1xuXG5cdGdyb3VwSXRlbXM6IEdbXSA9IFtdO1xuXG5cdEBuZ0RvY01ha2VQdXJlXG5cdGdldEdyb3VwQ29udGV4dCgkaW1wbGljaXQ6IEcpOiBOZ0RvY0NvbnRleHRXaXRoSW1wbGljaXQ8Rz4ge1xuXHRcdHJldHVybiB7ICRpbXBsaWNpdCB9O1xuXHR9XG5cblx0bmdPbkNoYW5nZXMoeyBpdGVtcywgaXRlbUdyb3VwRm4gfTogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuXHRcdGlmIChpdGVtcyB8fCBpdGVtR3JvdXBGbikge1xuXHRcdFx0dGhpcy5ncm91cHMgPSBuZXcgTWFwPEcsIFRbXT4oKTtcblxuXHRcdFx0dGhpcy5pdGVtcz8uZm9yRWFjaCgoaXRlbTogVCkgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5pdGVtR3JvdXBGbikge1xuXHRcdFx0XHRcdGNvbnN0IGl0ZW1Hcm91cDogRyA9IHRoaXMuaXRlbUdyb3VwRm4oaXRlbSk7XG5cdFx0XHRcdFx0Y29uc3QgaXRlbXNMaXN0OiBUW10gPSB0aGlzLmdyb3Vwcy5nZXQoaXRlbUdyb3VwKSB8fCBbXTtcblx0XHRcdFx0XHRpdGVtc0xpc3QucHVzaChpdGVtKTtcblxuXHRcdFx0XHRcdHRoaXMuZ3JvdXBzLnNldCh0aGlzLml0ZW1Hcm91cEZuKGl0ZW0pLCBpdGVtc0xpc3QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5ncm91cEl0ZW1zID0gQXJyYXkuZnJvbSh0aGlzLmdyb3Vwcy5rZXlzKCkpO1xuXHRcdH1cblx0fVxufVxuIiwiPG5nLWRvYy1saXN0PlxuXHQ8bmctY29udGFpbmVyICpuZ0lmPVwiaXRlbXMgJiYgaXRlbXMubGVuZ3RoOyBlbHNlIGVtcHR5VGVtcGxhdGVcIj5cblx0XHQ8bmctZG9jLW9wdGlvbi1ncm91cCAqbmdGb3I9XCJsZXQgZ3JvdXAgb2YgZ3JvdXBJdGVtc1wiPlxuXHRcdFx0PHNwYW5cblx0XHRcdFx0KnBvbHltb3JwaGV1c091dGxldD1cImdyb3VwQ29udGVudCBhcyBncm91cFRleHQ7IGNvbnRleHQ6IGdldEdyb3VwQ29udGV4dChncm91cClcIlxuXHRcdFx0XHRuZ0RvY09wdGlvbkdyb3VwSGVhZGVyPlxuXHRcdFx0XHR7eyBncm91cFRleHQgfX1cblx0XHRcdDwvc3Bhbj5cblx0XHRcdDxuZy1kb2Mtb3B0aW9uXG5cdFx0XHRcdCpuZ0Zvcj1cImxldCBpdGVtIG9mIGdyb3Vwcy5nZXQoZ3JvdXApOyB0cmFja0J5OiB0cmFja0J5Rm5cIlxuXHRcdFx0XHRbdmFsdWVdPVwiZGVmaW5lVmFsdWVGbihpdGVtKVwiXG5cdFx0XHRcdFtkaXNhYmxlZF09XCJpdGVtRGlzYWJsZWRGbihpdGVtKVwiPlxuXHRcdFx0XHQ8bmctY29udGFpbmVyICpwb2x5bW9ycGhldXNPdXRsZXQ9XCJpdGVtQ29udGVudCBhcyB0ZXh0OyBjb250ZXh0OiBnZXRDb250ZXh0KGl0ZW0pXCI+XG5cdFx0XHRcdFx0e3sgdGV4dCB9fVxuXHRcdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHRcdDwvbmctZG9jLW9wdGlvbj5cblx0XHQ8L25nLWRvYy1vcHRpb24tZ3JvdXA+XG5cdDwvbmctY29udGFpbmVyPlxuXG5cdDxuZy10ZW1wbGF0ZSAjZW1wdHlUZW1wbGF0ZT5cblx0XHQ8ZGl2IGNsYXNzPVwibmctZG9jLWVtcHR5LW1lc3NhZ2VcIiBuZy1kb2MtdGV4dD5cblx0XHRcdDxuZy1jb250YWluZXIgKm5nSWY9XCJlbXB0eUNvbnRlbnRcIj5cblx0XHRcdFx0PG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwiZW1wdHlDb250ZW50IGFzIHRleHRcIj4ge3sgdGV4dCB9fSA8L25nLWNvbnRhaW5lcj5cblx0XHRcdDwvbmctY29udGFpbmVyPlxuXHRcdDwvZGl2PlxuXHQ8L25nLXRlbXBsYXRlPlxuPC9uZy1kb2MtbGlzdD5cbiJdfQ==