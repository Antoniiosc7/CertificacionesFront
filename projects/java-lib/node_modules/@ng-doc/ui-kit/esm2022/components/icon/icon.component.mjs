import { HttpClient } from '@angular/common/http';
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, inject, Input, } from '@angular/core';
import { NgDocCacheInterceptor } from '@ng-doc/ui-kit/interceptors';
import { NG_DOC_ASSETS_PATH, NG_DOC_CUSTOM_ICONS_PATH } from '@ng-doc/ui-kit/tokens';
import { of, Subject } from 'rxjs';
import { catchError, startWith, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class NgDocIconComponent {
    constructor(elementRef, httpClient) {
        this.elementRef = elementRef;
        this.httpClient = httpClient;
        /** Icon name */
        this.icon = '';
        /** Custom icon name, if not set, `icon` will be used */
        this.customIcon = '';
        /** Icon size */
        this.size = 16;
        this.reload$ = new Subject();
        this.assetsPath = inject(NG_DOC_ASSETS_PATH, { optional: true }) ?? '';
        this.customIconsPath = inject(NG_DOC_CUSTOM_ICONS_PATH, { optional: true }) ?? '';
    }
    ngOnChanges() {
        this.reload$.next();
    }
    ngOnInit() {
        this.reload$
            .pipe(startWith(null), switchMap(() => this.httpClient
            .get(this.href, {
            responseType: 'text',
            params: { [NgDocCacheInterceptor.TOKEN]: 'true' },
        })
            .pipe(catchError((e) => {
            console.error(e);
            return of('');
        }))))
            .subscribe((svg) => (this.elementRef.nativeElement.innerHTML = svg));
    }
    get href() {
        return this.customIcon
            ? `${this.customIconsPath}/${this.customIcon}.svg#${this.customIcon}`
            : `${this.assetsPath}/icons/${this.size}/${this.icon}.svg#${this.icon}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocIconComponent, deps: [{ token: i0.ElementRef }, { token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocIconComponent, isStandalone: true, selector: "ng-doc-icon", inputs: { icon: "icon", customIcon: "customIcon", size: "size" }, host: { properties: { "attr.data-ng-doc-icon": "this.icon", "attr.data-ng-doc-custom-icon": "this.customIcon", "attr.data-ng-doc-size": "this.size" } }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [":host{display:inline-flex;align-items:center;justify-content:center;width:var(--ng-doc-icon-width, 16px);height:var(--ng-doc-icon-height, 16px);color:var(--ng-doc-icon-color, var(--ng-doc-text));vertical-align:sub}:host svg{vertical-align:top}:host[data-ng-doc-size=\"24\"]{width:var(--ng-doc-icon-width, 24px);height:var(--ng-dpc-icon-height, 24px)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocIconComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-icon', template: '', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, styles: [":host{display:inline-flex;align-items:center;justify-content:center;width:var(--ng-doc-icon-width, 16px);height:var(--ng-doc-icon-height, 16px);color:var(--ng-doc-icon-color, var(--ng-doc-text));vertical-align:sub}:host svg{vertical-align:top}:host[data-ng-doc-size=\"24\"]{width:var(--ng-doc-icon-width, 24px);height:var(--ng-dpc-icon-height, 24px)}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.HttpClient }], propDecorators: { icon: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-ng-doc-icon']
            }], customIcon: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-ng-doc-custom-icon']
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-ng-doc-size']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9jb21wb25lbnRzL2ljb24vaWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFDTix1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssR0FHTCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVyRixPQUFPLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBU2xFLE1BQU0sT0FBTyxrQkFBa0I7SUFxQjlCLFlBQ2tCLFVBQW1DLEVBQ25DLFVBQXNCO1FBRHRCLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ25DLGVBQVUsR0FBVixVQUFVLENBQVk7UUF0QnhDLGdCQUFnQjtRQUdoQixTQUFJLEdBQVcsRUFBRSxDQUFDO1FBRWxCLHdEQUF3RDtRQUd4RCxlQUFVLEdBQVcsRUFBRSxDQUFDO1FBRXhCLGdCQUFnQjtRQUdoQixTQUFJLEdBQWtCLEVBQUUsQ0FBQztRQUVSLFlBQU8sR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUM3QyxlQUFVLEdBQVcsTUFBTSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzFFLG9CQUFlLEdBQy9CLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUt6RCxDQUFDO0lBRUosV0FBVztRQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFFBQVE7UUFDUCxJQUFJLENBQUMsT0FBTzthQUNWLElBQUksQ0FDSixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2YsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNkLElBQUksQ0FBQyxVQUFVO2FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZixZQUFZLEVBQUUsTUFBTTtZQUNwQixNQUFNLEVBQUUsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRTtTQUNqRCxDQUFDO2FBQ0QsSUFBSSxDQUNKLFVBQVUsQ0FBQyxDQUFDLENBQVEsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFakIsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixDQUFDLENBQUMsQ0FDRixDQUNGLENBQ0Q7YUFDQSxTQUFTLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELElBQUksSUFBSTtRQUNQLE9BQU8sSUFBSSxDQUFDLFVBQVU7WUFDckIsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsVUFBVSxRQUFRLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDckUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsVUFBVSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFFLENBQUM7OEdBeERXLGtCQUFrQjtrR0FBbEIsa0JBQWtCLHVUQUxwQixFQUFFOzsyRkFLQSxrQkFBa0I7a0JBUDlCLFNBQVM7K0JBQ0MsYUFBYSxZQUNiLEVBQUUsbUJBRUssdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJO3dHQU1oQixJQUFJO3NCQUZILEtBQUs7O3NCQUNMLFdBQVc7dUJBQUMsdUJBQXVCO2dCQU1wQyxVQUFVO3NCQUZULEtBQUs7O3NCQUNMLFdBQVc7dUJBQUMsOEJBQThCO2dCQU0zQyxJQUFJO3NCQUZILEtBQUs7O3NCQUNMLFdBQVc7dUJBQUMsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7XG5cdENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuXHRDb21wb25lbnQsXG5cdEVsZW1lbnRSZWYsXG5cdEhvc3RCaW5kaW5nLFxuXHRpbmplY3QsXG5cdElucHV0LFxuXHRPbkNoYW5nZXMsXG5cdE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0RvY0NhY2hlSW50ZXJjZXB0b3IgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9pbnRlcmNlcHRvcnMnO1xuaW1wb3J0IHsgTkdfRE9DX0FTU0VUU19QQVRILCBOR19ET0NfQ1VTVE9NX0lDT05TX1BBVEggfSBmcm9tICdAbmctZG9jL3VpLWtpdC90b2tlbnMnO1xuaW1wb3J0IHsgTmdEb2NJY29uU2l6ZSB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L3R5cGVzJztcbmltcG9ydCB7IG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBzdGFydFdpdGgsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnbmctZG9jLWljb24nLFxuXHR0ZW1wbGF0ZTogJycsXG5cdHN0eWxlVXJsczogWycuL2ljb24uY29tcG9uZW50LnNjc3MnXSxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIE5nRG9jSWNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0IHtcblx0LyoqIEljb24gbmFtZSAqL1xuXHRASW5wdXQoKVxuXHRASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1uZy1kb2MtaWNvbicpXG5cdGljb246IHN0cmluZyA9ICcnO1xuXG5cdC8qKiBDdXN0b20gaWNvbiBuYW1lLCBpZiBub3Qgc2V0LCBgaWNvbmAgd2lsbCBiZSB1c2VkICovXG5cdEBJbnB1dCgpXG5cdEBIb3N0QmluZGluZygnYXR0ci5kYXRhLW5nLWRvYy1jdXN0b20taWNvbicpXG5cdGN1c3RvbUljb246IHN0cmluZyA9ICcnO1xuXG5cdC8qKiBJY29uIHNpemUgKi9cblx0QElucHV0KClcblx0QEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtbmctZG9jLXNpemUnKVxuXHRzaXplOiBOZ0RvY0ljb25TaXplID0gMTY7XG5cblx0cHJpdmF0ZSByZWFkb25seSByZWxvYWQkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblx0cHJpdmF0ZSByZWFkb25seSBhc3NldHNQYXRoOiBzdHJpbmcgPSBpbmplY3QoTkdfRE9DX0FTU0VUU19QQVRILCB7IG9wdGlvbmFsOiB0cnVlIH0pID8/ICcnO1xuXHRwcml2YXRlIHJlYWRvbmx5IGN1c3RvbUljb25zUGF0aDogc3RyaW5nID1cblx0XHRpbmplY3QoTkdfRE9DX0NVU1RPTV9JQ09OU19QQVRILCB7IG9wdGlvbmFsOiB0cnVlIH0pID8/ICcnO1xuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG5cdFx0cHJpdmF0ZSByZWFkb25seSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxuXHQpIHt9XG5cblx0bmdPbkNoYW5nZXMoKTogdm9pZCB7XG5cdFx0dGhpcy5yZWxvYWQkLm5leHQoKTtcblx0fVxuXG5cdG5nT25Jbml0KCk6IHZvaWQge1xuXHRcdHRoaXMucmVsb2FkJFxuXHRcdFx0LnBpcGUoXG5cdFx0XHRcdHN0YXJ0V2l0aChudWxsKSxcblx0XHRcdFx0c3dpdGNoTWFwKCgpID0+XG5cdFx0XHRcdFx0dGhpcy5odHRwQ2xpZW50XG5cdFx0XHRcdFx0XHQuZ2V0KHRoaXMuaHJlZiwge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZVR5cGU6ICd0ZXh0Jyxcblx0XHRcdFx0XHRcdFx0cGFyYW1zOiB7IFtOZ0RvY0NhY2hlSW50ZXJjZXB0b3IuVE9LRU5dOiAndHJ1ZScgfSxcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQucGlwZShcblx0XHRcdFx0XHRcdFx0Y2F0Y2hFcnJvcigoZTogRXJyb3IpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGUpO1xuXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG9mKCcnKTtcblx0XHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHQpLFxuXHRcdFx0KVxuXHRcdFx0LnN1YnNjcmliZSgoc3ZnOiBzdHJpbmcpID0+ICh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSBzdmcpKTtcblx0fVxuXG5cdGdldCBocmVmKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuY3VzdG9tSWNvblxuXHRcdFx0PyBgJHt0aGlzLmN1c3RvbUljb25zUGF0aH0vJHt0aGlzLmN1c3RvbUljb259LnN2ZyMke3RoaXMuY3VzdG9tSWNvbn1gXG5cdFx0XHQ6IGAke3RoaXMuYXNzZXRzUGF0aH0vaWNvbnMvJHt0aGlzLnNpemV9LyR7dGhpcy5pY29ufS5zdmcjJHt0aGlzLmljb259YDtcblx0fVxufVxuIl19