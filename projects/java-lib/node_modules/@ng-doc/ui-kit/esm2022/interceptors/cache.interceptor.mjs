import { HttpResponse, } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { shareReplay, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class NgDocCacheInterceptor {
    constructor() {
        this.cache = new Map();
    }
    static { this.TOKEN = Math.random().toString(36).slice(-8); }
    intercept(request, next) {
        // Only GET requests can be cached
        if (request.method !== 'GET') {
            return next.handle(request);
        }
        // Do not cache request when the token is not provided
        if (!request.params.has(NgDocCacheInterceptor.TOKEN)) {
            return next.handle(request);
        }
        // Return cached response
        const cachedRequest = this.cache.get(request.url);
        if (cachedRequest) {
            return cachedRequest;
        }
        // Clone the request, delete the TOKEN from the params
        const newRequest = request.clone({
            params: request.params.delete(NgDocCacheInterceptor.TOKEN),
        });
        // Create a new request handler
        const newHandler = next.handle(newRequest).pipe(tap({
            error: (event) => {
                if (event instanceof HttpResponse) {
                    this.cache.delete(event.url || '');
                }
            },
        }), shareReplay(1));
        // Cache the request and return the new handler
        this.cache.set(request.url, newHandler);
        return newHandler;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocCacheInterceptor, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocCacheInterceptor }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocCacheInterceptor, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9pbnRlcmNlcHRvcnMvY2FjaGUuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUtOLFlBQVksR0FDWixNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHbEQsTUFBTSxPQUFPLHFCQUFxQjtJQURsQztRQUdTLFVBQUssR0FBZ0QsSUFBSSxHQUFHLEVBR2pFLENBQUM7S0E0Q0o7YUFoRGdCLFVBQUssR0FBVyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUEvQyxDQUFnRDtJQU1yRSxTQUFTLENBQUksT0FBdUIsRUFBRSxJQUFpQjtRQUN0RCxrQ0FBa0M7UUFDbEMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQzlCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixDQUFDO1FBRUQsc0RBQXNEO1FBQ3RELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3RELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixDQUFDO1FBRUQseUJBQXlCO1FBQ3pCLE1BQU0sYUFBYSxHQUF5QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FDekUsT0FBTyxDQUFDLEdBQUcsQ0FDaUIsQ0FBQztRQUU5QixJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ25CLE9BQU8sYUFBYSxDQUFDO1FBQ3RCLENBQUM7UUFFRCxzREFBc0Q7UUFDdEQsTUFBTSxVQUFVLEdBQW1CLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDaEQsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztTQUMxRCxDQUFDLENBQUM7UUFFSCwrQkFBK0I7UUFDL0IsTUFBTSxVQUFVLEdBQTZCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUN4RSxHQUFHLENBQUM7WUFDSCxLQUFLLEVBQUUsQ0FBQyxLQUF1QixFQUFFLEVBQUU7Z0JBQ2xDLElBQUksS0FBSyxZQUFZLFlBQVksRUFBRSxDQUFDO29CQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUNwQyxDQUFDO1lBQ0YsQ0FBQztTQUNELENBQUMsRUFDRixXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2QsQ0FBQztRQUVGLCtDQUErQztRQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRXhDLE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7OEdBaERXLHFCQUFxQjtrSEFBckIscUJBQXFCOzsyRkFBckIscUJBQXFCO2tCQURqQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0SHR0cEV2ZW50LFxuXHRIdHRwSGFuZGxlcixcblx0SHR0cEludGVyY2VwdG9yLFxuXHRIdHRwUmVxdWVzdCxcblx0SHR0cFJlc3BvbnNlLFxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzaGFyZVJlcGxheSwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmdEb2NDYWNoZUludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblx0c3RhdGljIHJlYWRvbmx5IFRPS0VOOiBzdHJpbmcgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgtOCk7XG5cdHByaXZhdGUgY2FjaGU6IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8SHR0cEV2ZW50PHVua25vd24+Pj4gPSBuZXcgTWFwPFxuXHRcdHN0cmluZyxcblx0XHRPYnNlcnZhYmxlPEh0dHBFdmVudDx1bmtub3duPj5cblx0PigpO1xuXG5cdGludGVyY2VwdDxUPihyZXF1ZXN0OiBIdHRwUmVxdWVzdDxUPiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxUPj4ge1xuXHRcdC8vIE9ubHkgR0VUIHJlcXVlc3RzIGNhbiBiZSBjYWNoZWRcblx0XHRpZiAocmVxdWVzdC5tZXRob2QgIT09ICdHRVQnKSB7XG5cdFx0XHRyZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG5cdFx0fVxuXG5cdFx0Ly8gRG8gbm90IGNhY2hlIHJlcXVlc3Qgd2hlbiB0aGUgdG9rZW4gaXMgbm90IHByb3ZpZGVkXG5cdFx0aWYgKCFyZXF1ZXN0LnBhcmFtcy5oYXMoTmdEb2NDYWNoZUludGVyY2VwdG9yLlRPS0VOKSkge1xuXHRcdFx0cmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBjYWNoZWQgcmVzcG9uc2Vcblx0XHRjb25zdCBjYWNoZWRSZXF1ZXN0OiBPYnNlcnZhYmxlPEh0dHBFdmVudDxUPj4gfCB1bmRlZmluZWQgPSB0aGlzLmNhY2hlLmdldChcblx0XHRcdHJlcXVlc3QudXJsLFxuXHRcdCkgYXMgT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8VD4+O1xuXG5cdFx0aWYgKGNhY2hlZFJlcXVlc3QpIHtcblx0XHRcdHJldHVybiBjYWNoZWRSZXF1ZXN0O1xuXHRcdH1cblxuXHRcdC8vIENsb25lIHRoZSByZXF1ZXN0LCBkZWxldGUgdGhlIFRPS0VOIGZyb20gdGhlIHBhcmFtc1xuXHRcdGNvbnN0IG5ld1JlcXVlc3Q6IEh0dHBSZXF1ZXN0PFQ+ID0gcmVxdWVzdC5jbG9uZSh7XG5cdFx0XHRwYXJhbXM6IHJlcXVlc3QucGFyYW1zLmRlbGV0ZShOZ0RvY0NhY2hlSW50ZXJjZXB0b3IuVE9LRU4pLFxuXHRcdH0pO1xuXG5cdFx0Ly8gQ3JlYXRlIGEgbmV3IHJlcXVlc3QgaGFuZGxlclxuXHRcdGNvbnN0IG5ld0hhbmRsZXI6IE9ic2VydmFibGU8SHR0cEV2ZW50PFQ+PiA9IG5leHQuaGFuZGxlKG5ld1JlcXVlc3QpLnBpcGUoXG5cdFx0XHR0YXAoe1xuXHRcdFx0XHRlcnJvcjogKGV2ZW50OiBIdHRwRXZlbnQ8RXJyb3I+KSA9PiB7XG5cdFx0XHRcdFx0aWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNhY2hlLmRlbGV0ZShldmVudC51cmwgfHwgJycpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdH0pLFxuXHRcdFx0c2hhcmVSZXBsYXkoMSksXG5cdFx0KTtcblxuXHRcdC8vIENhY2hlIHRoZSByZXF1ZXN0IGFuZCByZXR1cm4gdGhlIG5ldyBoYW5kbGVyXG5cdFx0dGhpcy5jYWNoZS5zZXQocmVxdWVzdC51cmwsIG5ld0hhbmRsZXIpO1xuXG5cdFx0cmV0dXJuIG5ld0hhbmRsZXI7XG5cdH1cbn1cbiJdfQ==