import { __decorate, __metadata } from "tslib";
import { Directive, forwardRef, HostListener } from '@angular/core';
import { isPresent } from '@ng-doc/core/helpers/is-present';
import { NgDocBaseInput } from '@ng-doc/ui-kit/classes/base-input';
import { toElement } from '@ng-doc/ui-kit/helpers';
import { UntilDestroy } from '@ngneat/until-destroy';
import * as i0 from "@angular/core";
/** Directive converts any input data or model to text */
let NgDocInputStringDirective = class NgDocInputStringDirective extends NgDocBaseInput {
    constructor() {
        super({
            onIncomingUpdate: (value) => {
                toElement(this.elementRef).value = isPresent(value) ? String(value) : '';
            },
        });
    }
    blurEvent() {
        this.touch();
    }
    inputEvent() {
        this.updateModel(this.elementRef.nativeElement.value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocInputStringDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocInputStringDirective, isStandalone: true, selector: "input[ngDocInputString]", host: { listeners: { "blur": "blurEvent()", "input": "inputEvent()" } }, providers: [
            { provide: NgDocBaseInput, useExisting: forwardRef(() => NgDocInputStringDirective) },
        ], usesInheritance: true, ngImport: i0 }); }
};
NgDocInputStringDirective = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [])
], NgDocInputStringDirective);
export { NgDocInputStringDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocInputStringDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `input[ngDocInputString]`,
                    providers: [
                        { provide: NgDocBaseInput, useExisting: forwardRef(() => NgDocInputStringDirective) },
                    ],
                    standalone: true,
                }]
        }], ctorParameters: () => [], propDecorators: { blurEvent: [{
                type: HostListener,
                args: ['blur']
            }], inputEvent: [{
                type: HostListener,
                args: ['input']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtc3RyaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkta2l0L2RpcmVjdGl2ZXMvaW5wdXQtc3RyaW5nL2lucHV0LXN0cmluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBRXJELHlEQUF5RDtBQVNsRCxJQUFNLHlCQUF5QixHQUEvQixNQUFNLHlCQUEwQixTQUFRLGNBQXNCO0lBQ3BFO1FBQ0MsS0FBSyxDQUFDO1lBQ0wsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDM0IsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMxRSxDQUFDO1NBQ0QsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUdELFNBQVM7UUFDUixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBR0QsVUFBVTtRQUNULElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs4R0FqQlcseUJBQXlCO2tHQUF6Qix5QkFBeUIsK0lBTjFCO1lBQ1YsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsRUFBRTtTQUNyRjs7QUFJVyx5QkFBeUI7SUFEckMsWUFBWSxFQUFFOztHQUNGLHlCQUF5QixDQWtCckM7OzJGQWxCWSx5QkFBeUI7a0JBUnJDLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsU0FBUyxFQUFFO3dCQUNWLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSwwQkFBMEIsQ0FBQyxFQUFFO3FCQUNyRjtvQkFDRCxVQUFVLEVBQUUsSUFBSTtpQkFDaEI7d0RBWUEsU0FBUztzQkFEUixZQUFZO3VCQUFDLE1BQU07Z0JBTXBCLFVBQVU7c0JBRFQsWUFBWTt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUHJlc2VudCB9IGZyb20gJ0BuZy1kb2MvY29yZS9oZWxwZXJzL2lzLXByZXNlbnQnO1xuaW1wb3J0IHsgTmdEb2NCYXNlSW5wdXQgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9jbGFzc2VzL2Jhc2UtaW5wdXQnO1xuaW1wb3J0IHsgdG9FbGVtZW50IH0gZnJvbSAnQG5nLWRvYy91aS1raXQvaGVscGVycyc7XG5pbXBvcnQgeyBVbnRpbERlc3Ryb3kgfSBmcm9tICdAbmduZWF0L3VudGlsLWRlc3Ryb3knO1xuXG4vKiogRGlyZWN0aXZlIGNvbnZlcnRzIGFueSBpbnB1dCBkYXRhIG9yIG1vZGVsIHRvIHRleHQgKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogYGlucHV0W25nRG9jSW5wdXRTdHJpbmddYCxcblx0cHJvdmlkZXJzOiBbXG5cdFx0eyBwcm92aWRlOiBOZ0RvY0Jhc2VJbnB1dCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTmdEb2NJbnB1dFN0cmluZ0RpcmVjdGl2ZSkgfSxcblx0XSxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5AVW50aWxEZXN0cm95KClcbmV4cG9ydCBjbGFzcyBOZ0RvY0lucHV0U3RyaW5nRGlyZWN0aXZlIGV4dGVuZHMgTmdEb2NCYXNlSW5wdXQ8c3RyaW5nPiB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHtcblx0XHRcdG9uSW5jb21pbmdVcGRhdGU6ICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0b0VsZW1lbnQodGhpcy5lbGVtZW50UmVmKS52YWx1ZSA9IGlzUHJlc2VudCh2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogJyc7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcignYmx1cicpXG5cdGJsdXJFdmVudCgpOiB2b2lkIHtcblx0XHR0aGlzLnRvdWNoKCk7XG5cdH1cblxuXHRASG9zdExpc3RlbmVyKCdpbnB1dCcpXG5cdGlucHV0RXZlbnQoKTogdm9pZCB7XG5cdFx0dGhpcy51cGRhdGVNb2RlbCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC52YWx1ZSk7XG5cdH1cbn1cbiJdfQ==