var NgDocFocusCatcherDirective_1;
import { __decorate, __metadata } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostBinding, NgZone, Output, } from '@angular/core';
import { BLUR_EVENT, FOCUS_EVENT } from '@ng-doc/ui-kit/constants';
import { toElement } from '@ng-doc/ui-kit/helpers';
import { ngDocZoneOptimize } from '@ng-doc/ui-kit/observables';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { fromEvent, merge } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import * as i0 from "@angular/core";
let NgDocFocusCatcherDirective = class NgDocFocusCatcherDirective {
    static { NgDocFocusCatcherDirective_1 = this; }
    constructor(elementRef, ngZone, changeDetectorRef) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        this.focusEvent = new EventEmitter();
        this.blurEvent = new EventEmitter();
        this.focused = false;
        NgDocFocusCatcherDirective_1.observeFocus(toElement(this.elementRef))
            .pipe(ngDocZoneOptimize(this.ngZone), untilDestroyed(this))
            .subscribe((event) => {
            this.focused = event.type === FOCUS_EVENT;
            this.focused ? this.focusEvent.emit(event) : this.blurEvent.emit(event);
            this.changeDetectorRef.markForCheck();
        });
    }
    static observeFocus(element) {
        return merge(fromEvent(element, FOCUS_EVENT), fromEvent(element, BLUR_EVENT)).pipe(debounceTime(0), distinctUntilChanged((a, b) => a.type === b.type));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocFocusCatcherDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocFocusCatcherDirective, isStandalone: true, selector: "[ngDocFocusCatcher]", outputs: { focusEvent: "focusEvent", blurEvent: "blurEvent" }, host: { properties: { "attr.data-ng-doc-focused": "this.focused" } }, exportAs: ["ngDocFocusCatcher"], ngImport: i0 }); }
};
NgDocFocusCatcherDirective = NgDocFocusCatcherDirective_1 = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [ElementRef,
        NgZone,
        ChangeDetectorRef])
], NgDocFocusCatcherDirective);
export { NgDocFocusCatcherDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocFocusCatcherDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngDocFocusCatcher]',
                    exportAs: 'ngDocFocusCatcher',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }], propDecorators: { focusEvent: [{
                type: Output
            }], blurEvent: [{
                type: Output
            }], focused: [{
                type: HostBinding,
                args: ['attr.data-ng-doc-focused']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtY2F0Y2hlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9kaXJlY3RpdmVzL2ZvY3VzLWNhdGNoZXIvZm9jdXMtY2F0Y2hlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQ04saUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFdBQVcsRUFDWCxNQUFNLEVBQ04sTUFBTSxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQVE3RCxJQUFNLDBCQUEwQixHQUFoQyxNQUFNLDBCQUEwQjs7SUFVdEMsWUFDUyxVQUFtQyxFQUNuQyxNQUFjLEVBQ2QsaUJBQW9DO1FBRnBDLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ25DLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBWDdDLGVBQVUsR0FBd0IsSUFBSSxZQUFZLEVBQVMsQ0FBQztRQUc1RCxjQUFTLEdBQXdCLElBQUksWUFBWSxFQUFTLENBQUM7UUFHM0QsWUFBTyxHQUFZLEtBQUssQ0FBQztRQU94Qiw0QkFBMEIsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNqRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMxRCxTQUFTLENBQUMsQ0FBQyxLQUFpQixFQUFFLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQztZQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBb0I7UUFDdkMsT0FBTyxLQUFLLENBQ1gsU0FBUyxDQUFhLE9BQU8sRUFBRSxXQUFXLENBQUMsRUFDM0MsU0FBUyxDQUFhLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FDMUMsQ0FBQyxJQUFJLENBQ0wsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUNmLG9CQUFvQixDQUFDLENBQUMsQ0FBYSxFQUFFLENBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ3pFLENBQUM7SUFDSCxDQUFDOzhHQWhDVywwQkFBMEI7a0dBQTFCLDBCQUEwQjs7QUFBMUIsMEJBQTBCO0lBRHRDLFlBQVksRUFBRTtxQ0FZTyxVQUFVO1FBQ2QsTUFBTTtRQUNLLGlCQUFpQjtHQWJqQywwQkFBMEIsQ0FpQ3RDOzsyRkFqQ1ksMEJBQTBCO2tCQU50QyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFVBQVUsRUFBRSxJQUFJO2lCQUNoQjtvSUFJQSxVQUFVO3NCQURULE1BQU07Z0JBSVAsU0FBUztzQkFEUixNQUFNO2dCQUlQLE9BQU87c0JBRE4sV0FBVzt1QkFBQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDaGFuZ2VEZXRlY3RvclJlZixcblx0RGlyZWN0aXZlLFxuXHRFbGVtZW50UmVmLFxuXHRFdmVudEVtaXR0ZXIsXG5cdEhvc3RCaW5kaW5nLFxuXHROZ1pvbmUsXG5cdE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCTFVSX0VWRU5ULCBGT0NVU19FVkVOVCB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L2NvbnN0YW50cyc7XG5pbXBvcnQgeyB0b0VsZW1lbnQgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9oZWxwZXJzJztcbmltcG9ydCB7IG5nRG9jWm9uZU9wdGltaXplIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIG1lcmdlLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbbmdEb2NGb2N1c0NhdGNoZXJdJyxcblx0ZXhwb3J0QXM6ICduZ0RvY0ZvY3VzQ2F0Y2hlcicsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG59KVxuQFVudGlsRGVzdHJveSgpXG5leHBvcnQgY2xhc3MgTmdEb2NGb2N1c0NhdGNoZXJEaXJlY3RpdmUge1xuXHRAT3V0cHV0KClcblx0Zm9jdXNFdmVudDogRXZlbnRFbWl0dGVyPEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG5cblx0QE91dHB1dCgpXG5cdGJsdXJFdmVudDogRXZlbnRFbWl0dGVyPEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8RXZlbnQ+KCk7XG5cblx0QEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtbmctZG9jLWZvY3VzZWQnKVxuXHRmb2N1c2VkOiBib29sZWFuID0gZmFsc2U7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pixcblx0XHRwcml2YXRlIG5nWm9uZTogTmdab25lLFxuXHRcdHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuXHQpIHtcblx0XHROZ0RvY0ZvY3VzQ2F0Y2hlckRpcmVjdGl2ZS5vYnNlcnZlRm9jdXModG9FbGVtZW50KHRoaXMuZWxlbWVudFJlZikpXG5cdFx0XHQucGlwZShuZ0RvY1pvbmVPcHRpbWl6ZSh0aGlzLm5nWm9uZSksIHVudGlsRGVzdHJveWVkKHRoaXMpKVxuXHRcdFx0LnN1YnNjcmliZSgoZXZlbnQ6IEZvY3VzRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5mb2N1c2VkID0gZXZlbnQudHlwZSA9PT0gRk9DVVNfRVZFTlQ7XG5cdFx0XHRcdHRoaXMuZm9jdXNlZCA/IHRoaXMuZm9jdXNFdmVudC5lbWl0KGV2ZW50KSA6IHRoaXMuYmx1ckV2ZW50LmVtaXQoZXZlbnQpO1xuXHRcdFx0XHR0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRzdGF0aWMgb2JzZXJ2ZUZvY3VzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogT2JzZXJ2YWJsZTxGb2N1c0V2ZW50PiB7XG5cdFx0cmV0dXJuIG1lcmdlKFxuXHRcdFx0ZnJvbUV2ZW50PEZvY3VzRXZlbnQ+KGVsZW1lbnQsIEZPQ1VTX0VWRU5UKSxcblx0XHRcdGZyb21FdmVudDxGb2N1c0V2ZW50PihlbGVtZW50LCBCTFVSX0VWRU5UKSxcblx0XHQpLnBpcGUoXG5cdFx0XHRkZWJvdW5jZVRpbWUoMCksXG5cdFx0XHRkaXN0aW5jdFVudGlsQ2hhbmdlZCgoYTogRm9jdXNFdmVudCwgYjogRm9jdXNFdmVudCkgPT4gYS50eXBlID09PSBiLnR5cGUpLFxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==