import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, NgZone } from '@angular/core';
import { asArray } from '@ng-doc/core/helpers/as-array';
import { toElement } from '@ng-doc/ui-kit/helpers';
import { ngDocZoneDetach } from '@ng-doc/ui-kit/observables';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { fromEvent, merge } from 'rxjs';
import * as i0 from "@angular/core";
let NgDocEventSwitcherDirective = class NgDocEventSwitcherDirective {
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.switchTo = null;
        this.events = [];
    }
    ngOnInit() {
        merge(...asArray(this.events).map((eventName) => fromEvent(this.elementRef.nativeElement, eventName)))
            .pipe(ngDocZoneDetach(this.ngZone), untilDestroyed(this))
            .subscribe((event) => {
            if (this.switchTo && !event.defaultPrevented && event.bubbles) {
                event.stopPropagation();
                this.makeEvent(event, toElement(this.switchTo));
            }
        });
    }
    makeEvent(from, target) {
        const eventConstructor = from.constructor;
        target.dispatchEvent(new eventConstructor(from.type, from));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocEventSwitcherDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocEventSwitcherDirective, isStandalone: true, selector: "[ngDocEventSwitcher]", inputs: { switchTo: ["ngDocEventSwitcher", "switchTo"], events: "events" }, ngImport: i0 }); }
};
NgDocEventSwitcherDirective = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [ElementRef, NgZone])
], NgDocEventSwitcherDirective);
export { NgDocEventSwitcherDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocEventSwitcherDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngDocEventSwitcher]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { switchTo: [{
                type: Input,
                args: ['ngDocEventSwitcher']
            }], events: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtc3dpdGNoZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1raXQvZGlyZWN0aXZlcy9ldmVudC1zd2l0Y2hlci9ldmVudC1zd2l0Y2hlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXhELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFPakMsSUFBTSwyQkFBMkIsR0FBakMsTUFBTSwyQkFBMkI7SUFPdkMsWUFBb0IsVUFBbUMsRUFBVSxNQUFjO1FBQTNELGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUwvRSxhQUFRLEdBQW9DLElBQUksQ0FBQztRQUdqRCxXQUFNLEdBQXNCLEVBQUUsQ0FBQztJQUVtRCxDQUFDO0lBRW5GLFFBQVE7UUFDUCxLQUFLLENBQ0osR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQWlCLEVBQUUsRUFBRSxDQUNqRCxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQ25ELENBQ0Q7YUFDQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDeEQsU0FBUyxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUU7WUFDM0IsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDL0QsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDakQsQ0FBQztRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFNBQVMsQ0FBQyxJQUFXLEVBQUUsTUFBZTtRQUM3QyxNQUFNLGdCQUFnQixHQUF1QixJQUFJLENBQUMsV0FBaUMsQ0FBQztRQUNwRixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7OEdBM0JXLDJCQUEyQjtrR0FBM0IsMkJBQTJCOztBQUEzQiwyQkFBMkI7SUFEdkMsWUFBWSxFQUFFO3FDQVFrQixVQUFVLEVBQStCLE1BQU07R0FQbkUsMkJBQTJCLENBNEJ2Qzs7MkZBNUJZLDJCQUEyQjtrQkFMdkMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxVQUFVLEVBQUUsSUFBSTtpQkFDaEI7b0dBSUEsUUFBUTtzQkFEUCxLQUFLO3VCQUFDLG9CQUFvQjtnQkFJM0IsTUFBTTtzQkFETCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgTmdab25lLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFzQXJyYXkgfSBmcm9tICdAbmctZG9jL2NvcmUvaGVscGVycy9hcy1hcnJheSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3RvciB9IGZyb20gJ0BuZy1kb2MvY29yZS90eXBlcyc7XG5pbXBvcnQgeyB0b0VsZW1lbnQgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9oZWxwZXJzJztcbmltcG9ydCB7IG5nRG9jWm9uZURldGFjaCB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L29ic2VydmFibGVzJztcbmltcG9ydCB7IEJhc2VFbGVtZW50IH0gZnJvbSAnQG5nLWRvYy91aS1raXQvdHlwZXMnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tuZ0RvY0V2ZW50U3dpdGNoZXJdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5AVW50aWxEZXN0cm95KClcbmV4cG9ydCBjbGFzcyBOZ0RvY0V2ZW50U3dpdGNoZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXHRASW5wdXQoJ25nRG9jRXZlbnRTd2l0Y2hlcicpXG5cdHN3aXRjaFRvOiBCYXNlRWxlbWVudDxIVE1MRWxlbWVudD4gfCBudWxsID0gbnVsbDtcblxuXHRASW5wdXQoKVxuXHRldmVudHM6IHN0cmluZyB8IHN0cmluZ1tdID0gW107XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge31cblxuXHRuZ09uSW5pdCgpOiB2b2lkIHtcblx0XHRtZXJnZShcblx0XHRcdC4uLmFzQXJyYXkodGhpcy5ldmVudHMpLm1hcCgoZXZlbnROYW1lOiBzdHJpbmcpID0+XG5cdFx0XHRcdGZyb21FdmVudCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgZXZlbnROYW1lKSxcblx0XHRcdCksXG5cdFx0KVxuXHRcdFx0LnBpcGUobmdEb2Nab25lRGV0YWNoKHRoaXMubmdab25lKSwgdW50aWxEZXN0cm95ZWQodGhpcykpXG5cdFx0XHQuc3Vic2NyaWJlKChldmVudDogRXZlbnQpID0+IHtcblx0XHRcdFx0aWYgKHRoaXMuc3dpdGNoVG8gJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgZXZlbnQuYnViYmxlcykge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdHRoaXMubWFrZUV2ZW50KGV2ZW50LCB0b0VsZW1lbnQodGhpcy5zd2l0Y2hUbykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgbWFrZUV2ZW50KGZyb206IEV2ZW50LCB0YXJnZXQ6IEVsZW1lbnQpOiB2b2lkIHtcblx0XHRjb25zdCBldmVudENvbnN0cnVjdG9yOiBDb25zdHJ1Y3RvcjxFdmVudD4gPSBmcm9tLmNvbnN0cnVjdG9yIGFzIENvbnN0cnVjdG9yPEV2ZW50Pjtcblx0XHR0YXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgZXZlbnRDb25zdHJ1Y3Rvcihmcm9tLnR5cGUsIGZyb20pKTtcblx0fVxufVxuIl19