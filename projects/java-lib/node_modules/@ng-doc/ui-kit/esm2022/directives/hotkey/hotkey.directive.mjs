import { __decorate, __metadata } from "tslib";
import { afterNextRender, Directive, EventEmitter, Input, NgZone, Output } from '@angular/core';
import { isKeyboardEvent } from '@ng-doc/core/helpers/is-keyboard-event';
import { objectKeys } from '@ng-doc/core/helpers/object-keys';
import { ngDocZoneOptimize } from '@ng-doc/ui-kit/observables';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { fromEvent } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
let NgDocHotkeyDirective = class NgDocHotkeyDirective {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.callback = new EventEmitter();
        afterNextRender(() => {
            fromEvent(document, 'keyup')
                .pipe(filter(isKeyboardEvent), filter((event) => objectKeys(this.hotkey ?? {}).every((key) => this.hotkey && this.hotkey[key] === event[key])), filter((event) => {
                if (event.target instanceof HTMLElement) {
                    return !['input', 'textarea', 'select'].includes(event.target.tagName.toLowerCase());
                }
                return true;
            }), ngDocZoneOptimize(this.ngZone), untilDestroyed(this))
                .subscribe((event) => {
                event.preventDefault();
                this.callback.emit();
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocHotkeyDirective, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocHotkeyDirective, isStandalone: true, selector: "[ngDocHotkey]", inputs: { hotkey: ["ngDocHotkey", "hotkey"] }, outputs: { callback: "ngDocHotkey" }, ngImport: i0 }); }
};
NgDocHotkeyDirective = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [NgZone])
], NgDocHotkeyDirective);
export { NgDocHotkeyDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocHotkeyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngDocHotkey]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.NgZone }], propDecorators: { hotkey: [{
                type: Input,
                args: ['ngDocHotkey']
            }], callback: [{
                type: Output,
                args: ['ngDocHotkey']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90a2V5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkta2l0L2RpcmVjdGl2ZXMvaG90a2V5L2hvdGtleS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDekUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBT2pDLElBQU0sb0JBQW9CLEdBQTFCLE1BQU0sb0JBQW9CO0lBT2hDLFlBQTZCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRjNDLGFBQVEsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUd2RCxlQUFlLENBQUMsR0FBRyxFQUFFO1lBQ3BCLFNBQVMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDO2lCQUMxQixJQUFJLENBQ0osTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUN2QixNQUFNLENBQUMsQ0FBQyxLQUFvQixFQUFFLEVBQUUsQ0FDL0IsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUNsQyxDQUFDLEdBQXdCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQzVFLENBQ0QsRUFDRCxNQUFNLENBQUMsQ0FBQyxLQUFvQixFQUFFLEVBQUU7Z0JBQy9CLElBQUksS0FBSyxDQUFDLE1BQU0sWUFBWSxXQUFXLEVBQUUsQ0FBQztvQkFDekMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztnQkFDdEYsQ0FBQztnQkFDRCxPQUFPLElBQUksQ0FBQztZQUNiLENBQUMsQ0FBQyxFQUNGLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDOUIsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUNwQjtpQkFDQSxTQUFTLENBQUMsQ0FBQyxLQUFvQixFQUFFLEVBQUU7Z0JBQ25DLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs4R0EvQlcsb0JBQW9CO2tHQUFwQixvQkFBb0I7O0FBQXBCLG9CQUFvQjtJQURoQyxZQUFZLEVBQUU7cUNBUXVCLE1BQU07R0FQL0Isb0JBQW9CLENBZ0NoQzs7MkZBaENZLG9CQUFvQjtrQkFMaEMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsZUFBZTtvQkFDekIsVUFBVSxFQUFFLElBQUk7aUJBQ2hCOzJFQUlBLE1BQU07c0JBREwsS0FBSzt1QkFBQyxhQUFhO2dCQUlwQixRQUFRO3NCQURQLE1BQU07dUJBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFmdGVyTmV4dFJlbmRlciwgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBOZ1pvbmUsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNLZXlib2FyZEV2ZW50IH0gZnJvbSAnQG5nLWRvYy9jb3JlL2hlbHBlcnMvaXMta2V5Ym9hcmQtZXZlbnQnO1xuaW1wb3J0IHsgb2JqZWN0S2V5cyB9IGZyb20gJ0BuZy1kb2MvY29yZS9oZWxwZXJzL29iamVjdC1rZXlzJztcbmltcG9ydCB7IG5nRG9jWm9uZU9wdGltaXplIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnW25nRG9jSG90a2V5XScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG59KVxuQFVudGlsRGVzdHJveSgpXG5leHBvcnQgY2xhc3MgTmdEb2NIb3RrZXlEaXJlY3RpdmUge1xuXHRASW5wdXQoJ25nRG9jSG90a2V5Jylcblx0aG90a2V5PzogUGFydGlhbDxLZXlib2FyZEV2ZW50PjtcblxuXHRAT3V0cHV0KCduZ0RvY0hvdGtleScpXG5cdGNhbGxiYWNrOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBuZ1pvbmU6IE5nWm9uZSkge1xuXHRcdGFmdGVyTmV4dFJlbmRlcigoKSA9PiB7XG5cdFx0XHRmcm9tRXZlbnQoZG9jdW1lbnQsICdrZXl1cCcpXG5cdFx0XHRcdC5waXBlKFxuXHRcdFx0XHRcdGZpbHRlcihpc0tleWJvYXJkRXZlbnQpLFxuXHRcdFx0XHRcdGZpbHRlcigoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+XG5cdFx0XHRcdFx0XHRvYmplY3RLZXlzKHRoaXMuaG90a2V5ID8/IHt9KS5ldmVyeShcblx0XHRcdFx0XHRcdFx0KGtleToga2V5b2YgS2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5ob3RrZXkgJiYgdGhpcy5ob3RrZXlba2V5XSA9PT0gZXZlbnRba2V5XSxcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRmaWx0ZXIoKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICFbJ2lucHV0JywgJ3RleHRhcmVhJywgJ3NlbGVjdCddLmluY2x1ZGVzKGV2ZW50LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0bmdEb2Nab25lT3B0aW1pemUodGhpcy5uZ1pvbmUpLFxuXHRcdFx0XHRcdHVudGlsRGVzdHJveWVkKHRoaXMpLFxuXHRcdFx0XHQpXG5cdFx0XHRcdC5zdWJzY3JpYmUoKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR0aGlzLmNhbGxiYWNrLmVtaXQoKTtcblx0XHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==