import { __decorate, __metadata } from "tslib";
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { Directive, Input, TemplateRef, ViewContainerRef, } from '@angular/core';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { distinctUntilChanged, pluck } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/layout";
let NgDocMediaQueryDirective = class NgDocMediaQueryDirective {
    constructor(templateRef, viewContainerRef, breakpointObserver) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.breakpointObserver = breakpointObserver;
        this.match = [];
        this.breakpoints = Breakpoints;
    }
    ngOnInit() {
        this.breakpointObserver
            .observe(this.match)
            .pipe(pluck('matches'), distinctUntilChanged(), untilDestroyed(this))
            .subscribe((matches) => {
            this.viewRef?.destroy();
            this.viewRef = undefined;
            if (matches) {
                this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);
                this.viewRef.markForCheck();
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocMediaQueryDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: i1.BreakpointObserver }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocMediaQueryDirective, isStandalone: true, selector: "[ngDocMediaQuery]", inputs: { match: ["ngDocMediaQuery", "match"] }, exportAs: ["ngDocMediaQuery"], ngImport: i0 }); }
};
NgDocMediaQueryDirective = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        BreakpointObserver])
], NgDocMediaQueryDirective);
export { NgDocMediaQueryDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocMediaQueryDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngDocMediaQuery]',
                    exportAs: 'ngDocMediaQuery',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: i1.BreakpointObserver }], propDecorators: { match: [{
                type: Input,
                args: ['ngDocMediaQuery']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEtcXVlcnkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1raXQvZGlyZWN0aXZlcy9tZWRpYS1xdWVyeS9tZWRpYS1xdWVyeS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQ04sU0FBUyxFQUVULEtBQUssRUFFTCxXQUFXLEVBQ1gsZ0JBQWdCLEdBQ2hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFRdEQsSUFBTSx3QkFBd0IsR0FBOUIsTUFBTSx3QkFBd0I7SUFRcEMsWUFDa0IsV0FBaUMsRUFDakMsZ0JBQWtDLEVBQ2xDLGtCQUFzQztRQUZ0QyxnQkFBVyxHQUFYLFdBQVcsQ0FBc0I7UUFDakMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBVHhELFVBQUssR0FBc0IsRUFBRSxDQUFDO1FBRXJCLGdCQUFXLEdBQXVCLFdBQVcsQ0FBQztJQVFwRCxDQUFDO0lBRUosUUFBUTtRQUNQLElBQUksQ0FBQyxrQkFBa0I7YUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwRSxTQUFTLENBQUMsQ0FBQyxPQUFnQixFQUFFLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztZQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztZQUV6QixJQUFJLE9BQU8sRUFBRSxDQUFDO2dCQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDMUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUM3QixDQUFDO1FBQ0YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzhHQTNCVyx3QkFBd0I7a0dBQXhCLHdCQUF3Qjs7QUFBeEIsd0JBQXdCO0lBRHBDLFlBQVksRUFBRTtxQ0FVaUIsV0FBVztRQUNOLGdCQUFnQjtRQUNkLGtCQUFrQjtHQVg1Qyx3QkFBd0IsQ0E0QnBDOzsyRkE1Qlksd0JBQXdCO2tCQU5wQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFVBQVUsRUFBRSxJQUFJO2lCQUNoQjtnSkFJQSxLQUFLO3NCQURKLEtBQUs7dUJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnJlYWtwb2ludE9ic2VydmVyLCBCcmVha3BvaW50cyB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9sYXlvdXQnO1xuaW1wb3J0IHtcblx0RGlyZWN0aXZlLFxuXHRFbWJlZGRlZFZpZXdSZWYsXG5cdElucHV0LFxuXHRPbkluaXQsXG5cdFRlbXBsYXRlUmVmLFxuXHRWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVudGlsRGVzdHJveSwgdW50aWxEZXN0cm95ZWQgfSBmcm9tICdAbmduZWF0L3VudGlsLWRlc3Ryb3knO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIHBsdWNrIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbbmdEb2NNZWRpYVF1ZXJ5XScsXG5cdGV4cG9ydEFzOiAnbmdEb2NNZWRpYVF1ZXJ5Jyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5AVW50aWxEZXN0cm95KClcbmV4cG9ydCBjbGFzcyBOZ0RvY01lZGlhUXVlcnlEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXHRASW5wdXQoJ25nRG9jTWVkaWFRdWVyeScpXG5cdG1hdGNoOiBzdHJpbmcgfCBzdHJpbmdbXSA9IFtdO1xuXG5cdHJlYWRvbmx5IGJyZWFrcG9pbnRzOiB0eXBlb2YgQnJlYWtwb2ludHMgPSBCcmVha3BvaW50cztcblxuXHRwcml2YXRlIHZpZXdSZWY/OiBFbWJlZGRlZFZpZXdSZWY8dW5rbm93bj47XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWFkb25seSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8dW5rbm93bj4sXG5cdFx0cHJpdmF0ZSByZWFkb25seSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgYnJlYWtwb2ludE9ic2VydmVyOiBCcmVha3BvaW50T2JzZXJ2ZXIsXG5cdCkge31cblxuXHRuZ09uSW5pdCgpOiB2b2lkIHtcblx0XHR0aGlzLmJyZWFrcG9pbnRPYnNlcnZlclxuXHRcdFx0Lm9ic2VydmUodGhpcy5tYXRjaClcblx0XHRcdC5waXBlKHBsdWNrKCdtYXRjaGVzJyksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksIHVudGlsRGVzdHJveWVkKHRoaXMpKVxuXHRcdFx0LnN1YnNjcmliZSgobWF0Y2hlczogYm9vbGVhbikgPT4ge1xuXHRcdFx0XHR0aGlzLnZpZXdSZWY/LmRlc3Ryb3koKTtcblx0XHRcdFx0dGhpcy52aWV3UmVmID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdGlmIChtYXRjaGVzKSB7XG5cdFx0XHRcdFx0dGhpcy52aWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcblx0XHRcdFx0XHR0aGlzLnZpZXdSZWYubWFya0ZvckNoZWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9XG59XG4iXX0=