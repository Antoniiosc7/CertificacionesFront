import { __decorate, __metadata } from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, NgZone, Output, ViewContainerRef, } from '@angular/core';
import { asArray } from '@ng-doc/core/helpers/as-array';
import { isPresent } from '@ng-doc/core/helpers/is-present';
import { tooltipCloseAnimation, tooltipOpenAnimation } from '@ng-doc/ui-kit/animations';
import { NgDocOverlayContainerComponent } from '@ng-doc/ui-kit/components/overlay-container';
import { toElement } from '@ng-doc/ui-kit/helpers';
import { ngDocZoneDetach, ngDocZoneOptimize } from '@ng-doc/ui-kit/observables';
import { NgDocOverlayService } from '@ng-doc/ui-kit/services';
import { NgDocOverlayStrategy } from '@ng-doc/ui-kit/services/overlay-strategy';
import { NgDocOverlayUtils } from '@ng-doc/ui-kit/utils';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { EMPTY, fromEvent, merge, timer } from 'rxjs';
import { filter, switchMap, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ng-doc/ui-kit/services";
import * as i2 from "@ng-doc/ui-kit/services/overlay-strategy";
let NgDocTooltipDirective = class NgDocTooltipDirective {
    constructor(elementRef, changeDetectorRef, viewContainerRef, overlayService, ngZone, scrollStrategy) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.viewContainerRef = viewContainerRef;
        this.overlayService = overlayService;
        this.ngZone = ngZone;
        this.scrollStrategy = scrollStrategy;
        this.content = '';
        this.delay = 1000;
        this.positions = [
            'top-center',
            'bottom-center',
            'right-center',
            'left-center',
        ];
        this.canOpen = true;
        this.panelClass = '';
        this.minHeight = '';
        this.maxHeight = '';
        this.height = '';
        this.minWidth = '';
        this.maxWidth = '';
        this.width = '';
        this.beforeOpen = new EventEmitter();
        this.afterOpen = new EventEmitter();
        this.beforeClose = new EventEmitter();
        this.afterClose = new EventEmitter();
        this.overlayRef = null;
    }
    ngAfterViewInit() {
        // Opens tooltip with delay
        fromEvent(this.pointerOriginElement, 'mouseenter')
            .pipe(filter(() => this.canOpen && !this.isOpened), switchMap(() => timer(this.delay).pipe(takeUntil(fromEvent(this.pointerOriginElement, 'mouseleave')))), ngDocZoneOptimize(this.ngZone), untilDestroyed(this))
            .subscribe(() => this.show());
        // Closes tooltip when mouseleave was fired, and cancel closing if mouseenter was happened
        merge(fromEvent(this.pointerOriginElement, 'mouseleave'), this.beforeOpen.pipe(switchMap(() => isPresent(this.overlayRef)
            ? fromEvent(this.overlayRef.overlayRef.overlayElement, 'mouseleave')
            : EMPTY)))
            .pipe(filter(() => this.isOpened), switchMap(() => timer(50).pipe(takeUntil(fromEvent(this.pointerOriginElement, 'mouseenter')), takeUntil(isPresent(this.overlayRef)
            ? fromEvent(this.overlayRef.overlayRef.overlayElement, 'mouseenter')
            : EMPTY))), untilDestroyed(this), ngDocZoneOptimize(this.ngZone))
            .subscribe(() => this.hide());
    }
    show() {
        if (!this.isOpened) {
            this.overlayRef = this.overlayService.open(this.content, {
                origin: this.displayOriginElement,
                overlayContainer: NgDocOverlayContainerComponent,
                positionStrategy: this.overlayService.connectedPositionStrategy(this.displayOriginElement, this.getPositions(this.positions)),
                viewContainerRef: this.viewContainerRef,
                withPointer: true,
                contactBorder: true,
                panelClass: ['ng-doc-tooltip', ...asArray(this.panelClass)],
                height: this.height,
                width: this.width,
                minHeight: this.minHeight,
                minWidth: this.minWidth,
                maxHeight: this.maxHeight,
                maxWidth: this.maxWidth,
                scrollStrategy: this.scrollStrategy,
                disposeOnRouteNavigation: true,
                openAnimation: tooltipOpenAnimation,
                closeAnimation: tooltipCloseAnimation,
            });
            this.beforeOpen.emit();
            this.overlayRef
                ?.afterOpen()
                .pipe(ngDocZoneDetach(this.ngZone))
                .subscribe(() => this.afterOpen.emit());
            this.overlayRef
                ?.beforeClose()
                .pipe(ngDocZoneDetach(this.ngZone))
                .subscribe(() => this.beforeClose.emit());
            this.overlayRef
                ?.afterClose()
                .pipe(ngDocZoneDetach(this.ngZone))
                .subscribe(() => this.afterClose.emit());
            this.overlayRef?.beforeClose().subscribe(() => this.hide());
            this.changeDetectorRef.markForCheck();
        }
    }
    hide() {
        if (this.isOpened) {
            this.overlayRef?.close();
            this.overlayRef = null;
            this.changeDetectorRef.markForCheck();
        }
    }
    get isOpened() {
        return !!this.overlayRef;
    }
    ngOnDestroy() {
        if (this.overlayRef) {
            this.overlayRef.overlayRef.dispose();
        }
    }
    get pointerOriginElement() {
        return isPresent(this.pointerOrigin)
            ? toElement(this.pointerOrigin)
            : toElement(this.elementRef);
    }
    get displayOriginElement() {
        return isPresent(this.displayOrigin)
            ? toElement(this.displayOrigin)
            : toElement(this.elementRef);
    }
    getPositions(positions) {
        return NgDocOverlayUtils.getConnectedPosition(!!positions && asArray(positions).length
            ? positions
            : ['bottom-center', 'top-center', 'right-center', 'left-center'], this.displayOriginElement, 0, true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocTooltipDirective, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.ViewContainerRef }, { token: i1.NgDocOverlayService }, { token: i0.NgZone }, { token: i2.NgDocOverlayStrategy }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocTooltipDirective, isStandalone: true, selector: "[ngDocTooltip]", inputs: { content: ["ngDocTooltip", "content"], delay: "delay", displayOrigin: "displayOrigin", pointerOrigin: "pointerOrigin", positions: "positions", canOpen: "canOpen", panelClass: "panelClass", minHeight: "minHeight", maxHeight: "maxHeight", height: "height", minWidth: "minWidth", maxWidth: "maxWidth", width: "width" }, outputs: { beforeOpen: "beforeOpen", afterOpen: "afterOpen", beforeClose: "beforeClose", afterClose: "afterClose" }, exportAs: ["ngDocTooltip"], ngImport: i0 }); }
};
NgDocTooltipDirective = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [ElementRef,
        ChangeDetectorRef,
        ViewContainerRef,
        NgDocOverlayService,
        NgZone,
        NgDocOverlayStrategy])
], NgDocTooltipDirective);
export { NgDocTooltipDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocTooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngDocTooltip]',
                    exportAs: 'ngDocTooltip',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.ViewContainerRef }, { type: i1.NgDocOverlayService }, { type: i0.NgZone }, { type: i2.NgDocOverlayStrategy }], propDecorators: { content: [{
                type: Input,
                args: ['ngDocTooltip']
            }], delay: [{
                type: Input
            }], displayOrigin: [{
                type: Input
            }], pointerOrigin: [{
                type: Input
            }], positions: [{
                type: Input
            }], canOpen: [{
                type: Input
            }], panelClass: [{
                type: Input
            }], minHeight: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], height: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], width: [{
                type: Input
            }], beforeOpen: [{
                type: Output
            }], afterOpen: [{
                type: Output
            }], beforeClose: [{
                type: Output
            }], afterClose: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9kaXJlY3RpdmVzL3Rvb2x0aXAvdG9vbHRpcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFTixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFFTixNQUFNLEVBQ04sZ0JBQWdCLEdBQ2hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFeEYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDN0YsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNoRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUVoRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFRdkQsSUFBTSxxQkFBcUIsR0FBM0IsTUFBTSxxQkFBcUI7SUEyRGpDLFlBQ2tCLFVBQW1DLEVBQ25DLGlCQUFvQyxFQUNwQyxnQkFBa0MsRUFDbEMsY0FBbUMsRUFDbkMsTUFBYyxFQUNkLGNBQW9DO1FBTHBDLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ25DLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxtQkFBYyxHQUFkLGNBQWMsQ0FBcUI7UUFDbkMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLG1CQUFjLEdBQWQsY0FBYyxDQUFzQjtRQS9EdEQsWUFBTyxHQUFpQixFQUFFLENBQUM7UUFHM0IsVUFBSyxHQUFXLElBQUksQ0FBQztRQVNyQixjQUFTLEdBQWtEO1lBQzFELFlBQVk7WUFDWixlQUFlO1lBQ2YsY0FBYztZQUNkLGFBQWE7U0FDYixDQUFDO1FBR0YsWUFBTyxHQUFZLElBQUksQ0FBQztRQUd4QixlQUFVLEdBQXNCLEVBQUUsQ0FBQztRQUduQyxjQUFTLEdBQW9CLEVBQUUsQ0FBQztRQUdoQyxjQUFTLEdBQW9CLEVBQUUsQ0FBQztRQUdoQyxXQUFNLEdBQW9CLEVBQUUsQ0FBQztRQUc3QixhQUFRLEdBQW9CLEVBQUUsQ0FBQztRQUcvQixhQUFRLEdBQW9CLEVBQUUsQ0FBQztRQUcvQixVQUFLLEdBQW9CLEVBQUUsQ0FBQztRQUc1QixlQUFVLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7UUFHMUQsY0FBUyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBR3pELGdCQUFXLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7UUFHM0QsZUFBVSxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBRTFELGVBQVUsR0FBMkIsSUFBSSxDQUFDO0lBU3ZDLENBQUM7SUFFSixlQUFlO1FBQ2QsMkJBQTJCO1FBQzNCLFNBQVMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxDQUFDO2FBQ2hELElBQUksQ0FDSixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDNUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNkLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FDckYsRUFDRCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQzlCLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FDcEI7YUFDQSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFL0IsMEZBQTBGO1FBQzFGLEtBQUssQ0FDSixTQUFTLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxFQUNsRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDbkIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNkLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQztZQUNwRSxDQUFDLENBQUMsS0FBSyxDQUNSLENBQ0QsQ0FDRDthQUNDLElBQUksQ0FDSixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUMzQixTQUFTLENBQUMsR0FBRyxFQUFFLENBQ2QsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDYixTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxZQUFZLENBQUMsQ0FBQyxFQUM3RCxTQUFTLENBQ1IsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDekIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDO1lBQ3BFLENBQUMsQ0FBQyxLQUFLLENBQ1IsQ0FDRCxDQUNELEVBQ0QsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUNwQixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQzlCO2FBQ0EsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ3hELE1BQU0sRUFBRSxJQUFJLENBQUMsb0JBQW9CO2dCQUNqQyxnQkFBZ0IsRUFBRSw4QkFBOEI7Z0JBQ2hELGdCQUFnQixFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLENBQzlELElBQUksQ0FBQyxvQkFBb0IsRUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQ2pDO2dCQUNELGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7Z0JBQ3ZDLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixhQUFhLEVBQUUsSUFBSTtnQkFDbkIsVUFBVSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMzRCxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07Z0JBQ25CLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO2dCQUN6QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7Z0JBQ3ZCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztnQkFDekIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7Z0JBQ25DLHdCQUF3QixFQUFFLElBQUk7Z0JBQzlCLGFBQWEsRUFBRSxvQkFBb0I7Z0JBQ25DLGNBQWMsRUFBRSxxQkFBcUI7YUFDckMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUV2QixJQUFJLENBQUMsVUFBVTtnQkFDZCxFQUFFLFNBQVMsRUFBRTtpQkFDWixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDbEMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUV6QyxJQUFJLENBQUMsVUFBVTtnQkFDZCxFQUFFLFdBQVcsRUFBRTtpQkFDZCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDbEMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUUzQyxJQUFJLENBQUMsVUFBVTtnQkFDZCxFQUFFLFVBQVUsRUFBRTtpQkFDYixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDbEMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUUxQyxJQUFJLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUU1RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdkMsQ0FBQztJQUNGLENBQUM7SUFFRCxJQUFJO1FBQ0gsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztZQUN2QixJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdkMsQ0FBQztJQUNGLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDWCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzFCLENBQUM7SUFFRCxXQUFXO1FBQ1YsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdEMsQ0FBQztJQUNGLENBQUM7SUFFRCxJQUFZLG9CQUFvQjtRQUMvQixPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQ25DLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUMvQixDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBWSxvQkFBb0I7UUFDL0IsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUNuQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7WUFDL0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVPLFlBQVksQ0FDbkIsU0FBd0Q7UUFFeEQsT0FBTyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FDNUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTTtZQUN2QyxDQUFDLENBQUMsU0FBUztZQUNYLENBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLGFBQWEsQ0FBQyxFQUNqRSxJQUFJLENBQUMsb0JBQW9CLEVBQ3pCLENBQUMsRUFDRCxJQUFJLENBQ0osQ0FBQztJQUNILENBQUM7OEdBdE1XLHFCQUFxQjtrR0FBckIscUJBQXFCOztBQUFyQixxQkFBcUI7SUFEakMsWUFBWSxFQUFFO3FDQTZEZ0IsVUFBVTtRQUNILGlCQUFpQjtRQUNsQixnQkFBZ0I7UUFDbEIsbUJBQW1CO1FBQzNCLE1BQU07UUFDRSxvQkFBb0I7R0FqRTFDLHFCQUFxQixDQXVNakM7OzJGQXZNWSxxQkFBcUI7a0JBTmpDLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFVBQVUsRUFBRSxJQUFJO2lCQUNoQjt3T0FJQSxPQUFPO3NCQUROLEtBQUs7dUJBQUMsY0FBYztnQkFJckIsS0FBSztzQkFESixLQUFLO2dCQUlOLGFBQWE7c0JBRFosS0FBSztnQkFJTixhQUFhO3NCQURaLEtBQUs7Z0JBSU4sU0FBUztzQkFEUixLQUFLO2dCQVNOLE9BQU87c0JBRE4sS0FBSztnQkFJTixVQUFVO3NCQURULEtBQUs7Z0JBSU4sU0FBUztzQkFEUixLQUFLO2dCQUlOLFNBQVM7c0JBRFIsS0FBSztnQkFJTixNQUFNO3NCQURMLEtBQUs7Z0JBSU4sUUFBUTtzQkFEUCxLQUFLO2dCQUlOLFFBQVE7c0JBRFAsS0FBSztnQkFJTixLQUFLO3NCQURKLEtBQUs7Z0JBSU4sVUFBVTtzQkFEVCxNQUFNO2dCQUlQLFNBQVM7c0JBRFIsTUFBTTtnQkFJUCxXQUFXO3NCQURWLE1BQU07Z0JBSVAsVUFBVTtzQkFEVCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QWZ0ZXJWaWV3SW5pdCxcblx0Q2hhbmdlRGV0ZWN0b3JSZWYsXG5cdERpcmVjdGl2ZSxcblx0RWxlbWVudFJlZixcblx0RXZlbnRFbWl0dGVyLFxuXHRJbnB1dCxcblx0Tmdab25lLFxuXHRPbkRlc3Ryb3ksXG5cdE91dHB1dCxcblx0Vmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBhc0FycmF5IH0gZnJvbSAnQG5nLWRvYy9jb3JlL2hlbHBlcnMvYXMtYXJyYXknO1xuaW1wb3J0IHsgaXNQcmVzZW50IH0gZnJvbSAnQG5nLWRvYy9jb3JlL2hlbHBlcnMvaXMtcHJlc2VudCc7XG5pbXBvcnQgeyB0b29sdGlwQ2xvc2VBbmltYXRpb24sIHRvb2x0aXBPcGVuQW5pbWF0aW9uIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBOZ0RvY092ZXJsYXlSZWYgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9jbGFzc2VzL292ZXJsYXktcmVmJztcbmltcG9ydCB7IE5nRG9jT3ZlcmxheUNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L2NvbXBvbmVudHMvb3ZlcmxheS1jb250YWluZXInO1xuaW1wb3J0IHsgdG9FbGVtZW50IH0gZnJvbSAnQG5nLWRvYy91aS1raXQvaGVscGVycyc7XG5pbXBvcnQgeyBuZ0RvY1pvbmVEZXRhY2gsIG5nRG9jWm9uZU9wdGltaXplIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHsgTmdEb2NPdmVybGF5U2VydmljZSB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L3NlcnZpY2VzJztcbmltcG9ydCB7IE5nRG9jT3ZlcmxheVN0cmF0ZWd5IH0gZnJvbSAnQG5nLWRvYy91aS1raXQvc2VydmljZXMvb3ZlcmxheS1zdHJhdGVneSc7XG5pbXBvcnQgeyBCYXNlRWxlbWVudCwgTmdEb2NDb250ZW50LCBOZ0RvY092ZXJsYXlQb3NpdGlvbiB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L3R5cGVzJztcbmltcG9ydCB7IE5nRG9jT3ZlcmxheVV0aWxzIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvdXRpbHMnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBFTVBUWSwgZnJvbUV2ZW50LCBtZXJnZSwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgc3dpdGNoTWFwLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tuZ0RvY1Rvb2x0aXBdJyxcblx0ZXhwb3J0QXM6ICduZ0RvY1Rvb2x0aXAnLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxufSlcbkBVbnRpbERlc3Ryb3koKVxuZXhwb3J0IGNsYXNzIE5nRG9jVG9vbHRpcERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cdEBJbnB1dCgnbmdEb2NUb29sdGlwJylcblx0Y29udGVudDogTmdEb2NDb250ZW50ID0gJyc7XG5cblx0QElucHV0KClcblx0ZGVsYXk6IG51bWJlciA9IDEwMDA7XG5cblx0QElucHV0KClcblx0ZGlzcGxheU9yaWdpbj86IEJhc2VFbGVtZW50PEhUTUxFbGVtZW50PjtcblxuXHRASW5wdXQoKVxuXHRwb2ludGVyT3JpZ2luPzogQmFzZUVsZW1lbnQ8SFRNTEVsZW1lbnQ+O1xuXG5cdEBJbnB1dCgpXG5cdHBvc2l0aW9uczogTmdEb2NPdmVybGF5UG9zaXRpb24gfCBOZ0RvY092ZXJsYXlQb3NpdGlvbltdID0gW1xuXHRcdCd0b3AtY2VudGVyJyxcblx0XHQnYm90dG9tLWNlbnRlcicsXG5cdFx0J3JpZ2h0LWNlbnRlcicsXG5cdFx0J2xlZnQtY2VudGVyJyxcblx0XTtcblxuXHRASW5wdXQoKVxuXHRjYW5PcGVuOiBib29sZWFuID0gdHJ1ZTtcblxuXHRASW5wdXQoKVxuXHRwYW5lbENsYXNzOiBzdHJpbmcgfCBzdHJpbmdbXSA9ICcnO1xuXG5cdEBJbnB1dCgpXG5cdG1pbkhlaWdodDogbnVtYmVyIHwgc3RyaW5nID0gJyc7XG5cblx0QElucHV0KClcblx0bWF4SGVpZ2h0OiBudW1iZXIgfCBzdHJpbmcgPSAnJztcblxuXHRASW5wdXQoKVxuXHRoZWlnaHQ6IG51bWJlciB8IHN0cmluZyA9ICcnO1xuXG5cdEBJbnB1dCgpXG5cdG1pbldpZHRoOiBudW1iZXIgfCBzdHJpbmcgPSAnJztcblxuXHRASW5wdXQoKVxuXHRtYXhXaWR0aDogbnVtYmVyIHwgc3RyaW5nID0gJyc7XG5cblx0QElucHV0KClcblx0d2lkdGg6IG51bWJlciB8IHN0cmluZyA9ICcnO1xuXG5cdEBPdXRwdXQoKVxuXHRiZWZvcmVPcGVuOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cblx0QE91dHB1dCgpXG5cdGFmdGVyT3BlbjogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG5cdEBPdXRwdXQoKVxuXHRiZWZvcmVDbG9zZTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG5cdEBPdXRwdXQoKVxuXHRhZnRlckNsb3NlOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cblx0b3ZlcmxheVJlZjogTmdEb2NPdmVybGF5UmVmIHwgbnVsbCA9IG51bGw7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcml2YXRlIHJlYWRvbmx5IHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBvdmVybGF5U2VydmljZTogTmdEb2NPdmVybGF5U2VydmljZSxcblx0XHRwcml2YXRlIHJlYWRvbmx5IG5nWm9uZTogTmdab25lLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgc2Nyb2xsU3RyYXRlZ3k6IE5nRG9jT3ZlcmxheVN0cmF0ZWd5LFxuXHQpIHt9XG5cblx0bmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuXHRcdC8vIE9wZW5zIHRvb2x0aXAgd2l0aCBkZWxheVxuXHRcdGZyb21FdmVudCh0aGlzLnBvaW50ZXJPcmlnaW5FbGVtZW50LCAnbW91c2VlbnRlcicpXG5cdFx0XHQucGlwZShcblx0XHRcdFx0ZmlsdGVyKCgpID0+IHRoaXMuY2FuT3BlbiAmJiAhdGhpcy5pc09wZW5lZCksXG5cdFx0XHRcdHN3aXRjaE1hcCgoKSA9PlxuXHRcdFx0XHRcdHRpbWVyKHRoaXMuZGVsYXkpLnBpcGUodGFrZVVudGlsKGZyb21FdmVudCh0aGlzLnBvaW50ZXJPcmlnaW5FbGVtZW50LCAnbW91c2VsZWF2ZScpKSksXG5cdFx0XHRcdCksXG5cdFx0XHRcdG5nRG9jWm9uZU9wdGltaXplKHRoaXMubmdab25lKSxcblx0XHRcdFx0dW50aWxEZXN0cm95ZWQodGhpcyksXG5cdFx0XHQpXG5cdFx0XHQuc3Vic2NyaWJlKCgpID0+IHRoaXMuc2hvdygpKTtcblxuXHRcdC8vIENsb3NlcyB0b29sdGlwIHdoZW4gbW91c2VsZWF2ZSB3YXMgZmlyZWQsIGFuZCBjYW5jZWwgY2xvc2luZyBpZiBtb3VzZWVudGVyIHdhcyBoYXBwZW5lZFxuXHRcdG1lcmdlKFxuXHRcdFx0ZnJvbUV2ZW50KHRoaXMucG9pbnRlck9yaWdpbkVsZW1lbnQsICdtb3VzZWxlYXZlJyksXG5cdFx0XHR0aGlzLmJlZm9yZU9wZW4ucGlwZShcblx0XHRcdFx0c3dpdGNoTWFwKCgpID0+XG5cdFx0XHRcdFx0aXNQcmVzZW50KHRoaXMub3ZlcmxheVJlZilcblx0XHRcdFx0XHRcdD8gZnJvbUV2ZW50KHRoaXMub3ZlcmxheVJlZi5vdmVybGF5UmVmLm92ZXJsYXlFbGVtZW50LCAnbW91c2VsZWF2ZScpXG5cdFx0XHRcdFx0XHQ6IEVNUFRZLFxuXHRcdFx0XHQpLFxuXHRcdFx0KSxcblx0XHQpXG5cdFx0XHQucGlwZShcblx0XHRcdFx0ZmlsdGVyKCgpID0+IHRoaXMuaXNPcGVuZWQpLFxuXHRcdFx0XHRzd2l0Y2hNYXAoKCkgPT5cblx0XHRcdFx0XHR0aW1lcig1MCkucGlwZShcblx0XHRcdFx0XHRcdHRha2VVbnRpbChmcm9tRXZlbnQodGhpcy5wb2ludGVyT3JpZ2luRWxlbWVudCwgJ21vdXNlZW50ZXInKSksXG5cdFx0XHRcdFx0XHR0YWtlVW50aWwoXG5cdFx0XHRcdFx0XHRcdGlzUHJlc2VudCh0aGlzLm92ZXJsYXlSZWYpXG5cdFx0XHRcdFx0XHRcdFx0PyBmcm9tRXZlbnQodGhpcy5vdmVybGF5UmVmLm92ZXJsYXlSZWYub3ZlcmxheUVsZW1lbnQsICdtb3VzZWVudGVyJylcblx0XHRcdFx0XHRcdFx0XHQ6IEVNUFRZLFxuXHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHQpLFxuXHRcdFx0XHR1bnRpbERlc3Ryb3llZCh0aGlzKSxcblx0XHRcdFx0bmdEb2Nab25lT3B0aW1pemUodGhpcy5uZ1pvbmUpLFxuXHRcdFx0KVxuXHRcdFx0LnN1YnNjcmliZSgoKSA9PiB0aGlzLmhpZGUoKSk7XG5cdH1cblxuXHRzaG93KCk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5pc09wZW5lZCkge1xuXHRcdFx0dGhpcy5vdmVybGF5UmVmID0gdGhpcy5vdmVybGF5U2VydmljZS5vcGVuKHRoaXMuY29udGVudCwge1xuXHRcdFx0XHRvcmlnaW46IHRoaXMuZGlzcGxheU9yaWdpbkVsZW1lbnQsXG5cdFx0XHRcdG92ZXJsYXlDb250YWluZXI6IE5nRG9jT3ZlcmxheUNvbnRhaW5lckNvbXBvbmVudCxcblx0XHRcdFx0cG9zaXRpb25TdHJhdGVneTogdGhpcy5vdmVybGF5U2VydmljZS5jb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5KFxuXHRcdFx0XHRcdHRoaXMuZGlzcGxheU9yaWdpbkVsZW1lbnQsXG5cdFx0XHRcdFx0dGhpcy5nZXRQb3NpdGlvbnModGhpcy5wb3NpdGlvbnMpLFxuXHRcdFx0XHQpLFxuXHRcdFx0XHR2aWV3Q29udGFpbmVyUmVmOiB0aGlzLnZpZXdDb250YWluZXJSZWYsXG5cdFx0XHRcdHdpdGhQb2ludGVyOiB0cnVlLFxuXHRcdFx0XHRjb250YWN0Qm9yZGVyOiB0cnVlLFxuXHRcdFx0XHRwYW5lbENsYXNzOiBbJ25nLWRvYy10b29sdGlwJywgLi4uYXNBcnJheSh0aGlzLnBhbmVsQ2xhc3MpXSxcblx0XHRcdFx0aGVpZ2h0OiB0aGlzLmhlaWdodCxcblx0XHRcdFx0d2lkdGg6IHRoaXMud2lkdGgsXG5cdFx0XHRcdG1pbkhlaWdodDogdGhpcy5taW5IZWlnaHQsXG5cdFx0XHRcdG1pbldpZHRoOiB0aGlzLm1pbldpZHRoLFxuXHRcdFx0XHRtYXhIZWlnaHQ6IHRoaXMubWF4SGVpZ2h0LFxuXHRcdFx0XHRtYXhXaWR0aDogdGhpcy5tYXhXaWR0aCxcblx0XHRcdFx0c2Nyb2xsU3RyYXRlZ3k6IHRoaXMuc2Nyb2xsU3RyYXRlZ3ksXG5cdFx0XHRcdGRpc3Bvc2VPblJvdXRlTmF2aWdhdGlvbjogdHJ1ZSxcblx0XHRcdFx0b3BlbkFuaW1hdGlvbjogdG9vbHRpcE9wZW5BbmltYXRpb24sXG5cdFx0XHRcdGNsb3NlQW5pbWF0aW9uOiB0b29sdGlwQ2xvc2VBbmltYXRpb24sXG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuYmVmb3JlT3Blbi5lbWl0KCk7XG5cblx0XHRcdHRoaXMub3ZlcmxheVJlZlxuXHRcdFx0XHQ/LmFmdGVyT3BlbigpXG5cdFx0XHRcdC5waXBlKG5nRG9jWm9uZURldGFjaCh0aGlzLm5nWm9uZSkpXG5cdFx0XHRcdC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5hZnRlck9wZW4uZW1pdCgpKTtcblxuXHRcdFx0dGhpcy5vdmVybGF5UmVmXG5cdFx0XHRcdD8uYmVmb3JlQ2xvc2UoKVxuXHRcdFx0XHQucGlwZShuZ0RvY1pvbmVEZXRhY2godGhpcy5uZ1pvbmUpKVxuXHRcdFx0XHQuc3Vic2NyaWJlKCgpID0+IHRoaXMuYmVmb3JlQ2xvc2UuZW1pdCgpKTtcblxuXHRcdFx0dGhpcy5vdmVybGF5UmVmXG5cdFx0XHRcdD8uYWZ0ZXJDbG9zZSgpXG5cdFx0XHRcdC5waXBlKG5nRG9jWm9uZURldGFjaCh0aGlzLm5nWm9uZSkpXG5cdFx0XHRcdC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5hZnRlckNsb3NlLmVtaXQoKSk7XG5cblx0XHRcdHRoaXMub3ZlcmxheVJlZj8uYmVmb3JlQ2xvc2UoKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5oaWRlKCkpO1xuXG5cdFx0XHR0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuXHRcdH1cblx0fVxuXG5cdGhpZGUoKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuaXNPcGVuZWQpIHtcblx0XHRcdHRoaXMub3ZlcmxheVJlZj8uY2xvc2UoKTtcblx0XHRcdHRoaXMub3ZlcmxheVJlZiA9IG51bGw7XG5cdFx0XHR0aGlzLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuXHRcdH1cblx0fVxuXG5cdGdldCBpc09wZW5lZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gISF0aGlzLm92ZXJsYXlSZWY7XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5vdmVybGF5UmVmKSB7XG5cdFx0XHR0aGlzLm92ZXJsYXlSZWYub3ZlcmxheVJlZi5kaXNwb3NlKCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBnZXQgcG9pbnRlck9yaWdpbkVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuXHRcdHJldHVybiBpc1ByZXNlbnQodGhpcy5wb2ludGVyT3JpZ2luKVxuXHRcdFx0PyB0b0VsZW1lbnQodGhpcy5wb2ludGVyT3JpZ2luKVxuXHRcdFx0OiB0b0VsZW1lbnQodGhpcy5lbGVtZW50UmVmKTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0IGRpc3BsYXlPcmlnaW5FbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcblx0XHRyZXR1cm4gaXNQcmVzZW50KHRoaXMuZGlzcGxheU9yaWdpbilcblx0XHRcdD8gdG9FbGVtZW50KHRoaXMuZGlzcGxheU9yaWdpbilcblx0XHRcdDogdG9FbGVtZW50KHRoaXMuZWxlbWVudFJlZik7XG5cdH1cblxuXHRwcml2YXRlIGdldFBvc2l0aW9ucyhcblx0XHRwb3NpdGlvbnM6IE5nRG9jT3ZlcmxheVBvc2l0aW9uIHwgTmdEb2NPdmVybGF5UG9zaXRpb25bXSxcblx0KTogTmdEb2NPdmVybGF5UG9zaXRpb25bXSB7XG5cdFx0cmV0dXJuIE5nRG9jT3ZlcmxheVV0aWxzLmdldENvbm5lY3RlZFBvc2l0aW9uKFxuXHRcdFx0ISFwb3NpdGlvbnMgJiYgYXNBcnJheShwb3NpdGlvbnMpLmxlbmd0aFxuXHRcdFx0XHQ/IHBvc2l0aW9uc1xuXHRcdFx0XHQ6IFsnYm90dG9tLWNlbnRlcicsICd0b3AtY2VudGVyJywgJ3JpZ2h0LWNlbnRlcicsICdsZWZ0LWNlbnRlciddLFxuXHRcdFx0dGhpcy5kaXNwbGF5T3JpZ2luRWxlbWVudCxcblx0XHRcdDAsXG5cdFx0XHR0cnVlLFxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==