export class NgDocFocusUtils {
    static isNativeKeyboardFocusable(element) {
        if (element.hasAttribute('disabled') || element.getAttribute('tabIndex') === '-1') {
            return false;
        }
        if ((element instanceof HTMLElement && element.isContentEditable) ||
            element.getAttribute('tabIndex') === '0') {
            return true;
        }
        switch (element.tagName) {
            case 'BUTTON':
            case 'SELECT':
            case 'TEXTAREA':
                return true;
            case 'VIDEO':
            case 'AUDIO':
                return element.hasAttribute('controls');
            case 'INPUT':
                return element.getAttribute('type') !== 'hidden';
            case 'A':
            case 'LINK':
                return element.hasAttribute('href');
            default:
                return false;
        }
    }
    static getClosestKeyboardFocusable(initial, root, forward = true) {
        if (!root.ownerDocument) {
            return null;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const svgNodeFilter = ((node) => 'ownerSVGElement' in node ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT);
        const treeWalker = root.ownerDocument.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, svgNodeFilter);
        treeWalker.currentNode = initial;
        while (forward ? treeWalker.nextNode() : treeWalker.previousNode()) {
            if (treeWalker.currentNode instanceof HTMLElement) {
                initial = treeWalker.currentNode;
            }
            if (NgDocFocusUtils.isNativeKeyboardFocusable(initial)) {
                return initial;
            }
        }
        return null;
    }
    static focusClosestElement(initial, root, forward = true) {
        const focusable = NgDocFocusUtils.getClosestKeyboardFocusable(initial, root, forward);
        if (focusable) {
            focusable.focus();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC91dGlscy9mb2N1cy11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sZUFBZTtJQUMzQixNQUFNLENBQUMseUJBQXlCLENBQUMsT0FBZ0I7UUFDaEQsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDbkYsT0FBTyxLQUFLLENBQUM7UUFDZCxDQUFDO1FBRUQsSUFDQyxDQUFDLE9BQU8sWUFBWSxXQUFXLElBQUksT0FBTyxDQUFDLGlCQUFpQixDQUFDO1lBQzdELE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxFQUN2QyxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDO1FBRUQsUUFBUSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDekIsS0FBSyxRQUFRLENBQUM7WUFDZCxLQUFLLFFBQVEsQ0FBQztZQUNkLEtBQUssVUFBVTtnQkFDZCxPQUFPLElBQUksQ0FBQztZQUNiLEtBQUssT0FBTyxDQUFDO1lBQ2IsS0FBSyxPQUFPO2dCQUNYLE9BQU8sT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN6QyxLQUFLLE9BQU87Z0JBQ1gsT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsQ0FBQztZQUNsRCxLQUFLLEdBQUcsQ0FBQztZQUNULEtBQUssTUFBTTtnQkFDVixPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckM7Z0JBQ0MsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0lBQ0YsQ0FBQztJQUVELE1BQU0sQ0FBQywyQkFBMkIsQ0FDakMsT0FBb0IsRUFDcEIsSUFBVSxFQUNWLFVBQW1CLElBQUk7UUFFdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN6QixPQUFPLElBQUksQ0FBQztRQUNiLENBQUM7UUFFRCxtRUFBbUU7UUFDbkUsTUFBTSxhQUFhLEdBQWUsQ0FBQyxDQUFDLElBQVUsRUFBRSxFQUFFLENBQ2pELGlCQUFpQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBVSxDQUFDO1FBRTNGLE1BQU0sVUFBVSxHQUFlLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQ2pFLElBQUksRUFDSixVQUFVLENBQUMsWUFBWSxFQUN2QixhQUFhLENBQ2IsQ0FBQztRQUVGLFVBQVUsQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1FBRWpDLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDO1lBQ3BFLElBQUksVUFBVSxDQUFDLFdBQVcsWUFBWSxXQUFXLEVBQUUsQ0FBQztnQkFDbkQsT0FBTyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7WUFDbEMsQ0FBQztZQUVELElBQUksZUFBZSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ3hELE9BQU8sT0FBTyxDQUFDO1lBQ2hCLENBQUM7UUFDRixDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQW9CLEVBQUUsSUFBVSxFQUFFLFVBQW1CLElBQUk7UUFDbkYsTUFBTSxTQUFTLEdBQXVCLGVBQWUsQ0FBQywyQkFBMkIsQ0FDaEYsT0FBTyxFQUNQLElBQUksRUFDSixPQUFPLENBQ1AsQ0FBQztRQUNGLElBQUksU0FBUyxFQUFFLENBQUM7WUFDZixTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbkIsQ0FBQztJQUNGLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBOZ0RvY0ZvY3VzVXRpbHMge1xuXHRzdGF0aWMgaXNOYXRpdmVLZXlib2FyZEZvY3VzYWJsZShlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbiB7XG5cdFx0aWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0YWJJbmRleCcpID09PSAnLTEnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKFxuXHRcdFx0KGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBlbGVtZW50LmlzQ29udGVudEVkaXRhYmxlKSB8fFxuXHRcdFx0ZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JykgPT09ICcwJ1xuXHRcdCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0c3dpdGNoIChlbGVtZW50LnRhZ05hbWUpIHtcblx0XHRcdGNhc2UgJ0JVVFRPTic6XG5cdFx0XHRjYXNlICdTRUxFQ1QnOlxuXHRcdFx0Y2FzZSAnVEVYVEFSRUEnOlxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdGNhc2UgJ1ZJREVPJzpcblx0XHRcdGNhc2UgJ0FVRElPJzpcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdjb250cm9scycpO1xuXHRcdFx0Y2FzZSAnSU5QVVQnOlxuXHRcdFx0XHRyZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSAhPT0gJ2hpZGRlbic7XG5cdFx0XHRjYXNlICdBJzpcblx0XHRcdGNhc2UgJ0xJTksnOlxuXHRcdFx0XHRyZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2hyZWYnKTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgZ2V0Q2xvc2VzdEtleWJvYXJkRm9jdXNhYmxlKFxuXHRcdGluaXRpYWw6IEhUTUxFbGVtZW50LFxuXHRcdHJvb3Q6IE5vZGUsXG5cdFx0Zm9yd2FyZDogYm9vbGVhbiA9IHRydWUsXG5cdCk6IEhUTUxFbGVtZW50IHwgbnVsbCB7XG5cdFx0aWYgKCFyb290Lm93bmVyRG9jdW1lbnQpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcblx0XHRjb25zdCBzdmdOb2RlRmlsdGVyOiBOb2RlRmlsdGVyID0gKChub2RlOiBOb2RlKSA9PlxuXHRcdFx0J293bmVyU1ZHRWxlbWVudCcgaW4gbm9kZSA/IE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVCA6IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCkgYXMgbmV2ZXI7XG5cblx0XHRjb25zdCB0cmVlV2Fsa2VyOiBUcmVlV2Fsa2VyID0gcm9vdC5vd25lckRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoXG5cdFx0XHRyb290LFxuXHRcdFx0Tm9kZUZpbHRlci5TSE9XX0VMRU1FTlQsXG5cdFx0XHRzdmdOb2RlRmlsdGVyLFxuXHRcdCk7XG5cblx0XHR0cmVlV2Fsa2VyLmN1cnJlbnROb2RlID0gaW5pdGlhbDtcblxuXHRcdHdoaWxlIChmb3J3YXJkID8gdHJlZVdhbGtlci5uZXh0Tm9kZSgpIDogdHJlZVdhbGtlci5wcmV2aW91c05vZGUoKSkge1xuXHRcdFx0aWYgKHRyZWVXYWxrZXIuY3VycmVudE5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuXHRcdFx0XHRpbml0aWFsID0gdHJlZVdhbGtlci5jdXJyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKE5nRG9jRm9jdXNVdGlscy5pc05hdGl2ZUtleWJvYXJkRm9jdXNhYmxlKGluaXRpYWwpKSB7XG5cdFx0XHRcdHJldHVybiBpbml0aWFsO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0c3RhdGljIGZvY3VzQ2xvc2VzdEVsZW1lbnQoaW5pdGlhbDogSFRNTEVsZW1lbnQsIHJvb3Q6IE5vZGUsIGZvcndhcmQ6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG5cdFx0Y29uc3QgZm9jdXNhYmxlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBOZ0RvY0ZvY3VzVXRpbHMuZ2V0Q2xvc2VzdEtleWJvYXJkRm9jdXNhYmxlKFxuXHRcdFx0aW5pdGlhbCxcblx0XHRcdHJvb3QsXG5cdFx0XHRmb3J3YXJkLFxuXHRcdCk7XG5cdFx0aWYgKGZvY3VzYWJsZSkge1xuXHRcdFx0Zm9jdXNhYmxlLmZvY3VzKCk7XG5cdFx0fVxuXHR9XG59XG4iXX0=