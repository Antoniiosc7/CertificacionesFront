"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runDevServer = runDevServer;
const architect_1 = require("@angular-devkit/architect");
const dev_server_1 = require("@angular-devkit/build-angular/src/builders/dev-server");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const engine_1 = require("../engine");
const helpers_1 = require("../helpers");
const patch_builder_context_1 = require("./patch-builder-context");
/**
 * Attach NgDocBuilder and run DevServer
 * @param options Builder configuration
 * @param context Builder context
 */
function runDevServer(options, context) {
    const contextWithPatch = (0, patch_builder_context_1.patchBuilderContext)(context, {
        mock: ['@ng-doc/builder:application', './dist/libs/builder:application'],
        with: '@angular-devkit/build-angular:application',
        optionsTransform: (options) => {
            delete options.ngDoc;
        },
    });
    const target = options.buildTarget && (0, architect_1.targetFromTargetString)(options.buildTarget);
    const options$ = target
        ? (0, rxjs_1.from)(context.getTargetOptions(target))
        : (0, rxjs_1.of)(options);
    return options$.pipe((0, operators_1.switchMap)((targetOptions) => {
        var _a;
        const builderContext = (0, helpers_1.createBuilderContext)(targetOptions, context, (_a = options.ngDoc) === null || _a === void 0 ? void 0 : _a.config);
        const buildNgDoc$ = (0, engine_1.buildNgDoc)(builderContext).pipe((0, operators_1.shareReplay)(1));
        return buildNgDoc$.pipe((0, operators_1.first)(), (0, operators_1.switchMap)(() => (0, rxjs_1.combineLatest)([buildNgDoc$, (0, dev_server_1.executeDevServer)(options, contextWithPatch)]).pipe((0, operators_1.map)(([, devServerOutput]) => devServerOutput))));
    }));
}
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
exports.default = (0, architect_1.createBuilder)(runDevServer);
//# sourceMappingURL=index.js.map