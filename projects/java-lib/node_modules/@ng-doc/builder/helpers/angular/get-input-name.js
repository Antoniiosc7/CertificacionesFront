"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInputName = getInputName;
const ts_morph_1 = require("ts-morph");
const is_input_1 = require("./is-input");
/**
 * Returns the name of the component input.
 * @param property - The property declaration
 */
function getInputName(property) {
    var _a, _b;
    if ((0, is_input_1.isInputDecorator)(property)) {
        const inputArgument = (_a = property.getDecorator('Input')) === null || _a === void 0 ? void 0 : _a.getArguments()[0];
        if (ts_morph_1.Node.isStringLiteral(inputArgument)) {
            return inputArgument.getLiteralText().replace(/^["']|['"]$/g, '');
        }
        if (ts_morph_1.Node.isObjectLiteralExpression(inputArgument)) {
            const inputAliasProperty = inputArgument.getProperty('alias');
            if (ts_morph_1.Node.isPropertyAssignment(inputAliasProperty)) {
                return inputAliasProperty
                    .getInitializerIfKindOrThrow(ts_morph_1.SyntaxKind.StringLiteral)
                    .getLiteralText();
            }
        }
    }
    if ((0, is_input_1.isInputSignal)(property)) {
        const typeDeclaration = (_b = property.getType().getSymbol()) === null || _b === void 0 ? void 0 : _b.getDeclarations()[0];
        if (ts_morph_1.Node.isInterfaceDeclaration(typeDeclaration) && ts_morph_1.Node.isPropertyDeclaration(property)) {
            const inputInitializer = property.getInitializerIfKind(ts_morph_1.SyntaxKind.CallExpression);
            const argumentsIndex = (inputInitializer === null || inputInitializer === void 0 ? void 0 : inputInitializer.getExpression().getText()) === 'input.required' ? 0 : 1;
            const objectExpression = inputInitializer === null || inputInitializer === void 0 ? void 0 : inputInitializer.getArguments()[argumentsIndex];
            if (ts_morph_1.Node.isObjectLiteralExpression(objectExpression)) {
                const inputAliasProperty = objectExpression.getProperty('alias');
                if (ts_morph_1.Node.isPropertyAssignment(inputAliasProperty)) {
                    return inputAliasProperty
                        .getInitializerIfKindOrThrow(ts_morph_1.SyntaxKind.StringLiteral)
                        .getLiteralText();
                }
            }
        }
    }
    return property.getName();
}
//# sourceMappingURL=get-input-name.js.map