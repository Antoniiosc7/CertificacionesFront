"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateApiEntities = generateApiEntities;
const tslib_1 = require("tslib");
const core_1 = require("@ng-doc/core");
const glob = tslib_1.__importStar(require("glob"));
const engine_1 = require("../engine");
const is_supported_declaration_1 = require("./is-supported-declaration");
/**
 *
 * @param apiRootEntity
 */
function generateApiEntities(apiRootEntity) {
    var _a, _b;
    const result = [];
    const scopes = new Map();
    const duplicatesInScope = new Map();
    const duplicatedDeclarations = new Map();
    const paths = (_b = (_a = apiRootEntity.target) === null || _a === void 0 ? void 0 : _a.scopes.map((scope) => {
        const scopeEntity = new engine_1.NgDocApiScopeEntity(apiRootEntity.store, apiRootEntity.cache, apiRootEntity.context, apiRootEntity.sourceFile, apiRootEntity, scope);
        const files = (0, core_1.asArray)(scope.include)
            .map((i) => glob.sync(i, {
            ignore: scope.exclude,
            absolute: true,
        }))
            .flat();
        files.forEach((f) => scopes.set(f, scopeEntity));
        result.push(scopeEntity);
        return files;
    }).flat()) !== null && _b !== void 0 ? _b : [];
    apiRootEntity.sourceFile
        .getProject()
        .addSourceFilesAtPaths(paths)
        .map((sourceFile) => [sourceFile.getFilePath(), sourceFile.getExportedDeclarations()])
        .reduce((acc, [path, declarations]) => {
        var _a;
        const current = (_a = acc.get(path)) !== null && _a !== void 0 ? _a : new Map();
        declarations.forEach((value, key) => {
            const existing = current.get(key);
            const supported = value.filter(is_supported_declaration_1.isSupportedDeclaration);
            existing
                ? current.set(key, (0, core_1.asArray)(new Set(existing.concat(supported))))
                : current.set(key, supported);
        });
        acc.set(path, current);
        return acc;
    }, new Map())
        .forEach((declMap, path) => {
        declMap.forEach((declarations, name) => {
            declarations.forEach((declaration) => {
                var _a, _b, _c, _d, _e;
                const sourceFile = declaration.getSourceFile();
                const scope = scopes.get(path);
                if (scope && !((_a = duplicatedDeclarations.get(scope)) === null || _a === void 0 ? void 0 : _a.has(declaration))) {
                    const duplicates = (_b = duplicatesInScope.get(scope)) !== null && _b !== void 0 ? _b : new Map();
                    const count = (_c = duplicates.get(name)) !== null && _c !== void 0 ? _c : 0;
                    const page = new engine_1.NgDocApiPageEntity(apiRootEntity.store, apiRootEntity.cache, apiRootEntity.context, sourceFile, scope, name, count);
                    duplicates.set(name, count + 1);
                    duplicatesInScope.set(scope, duplicates);
                    duplicatedDeclarations.set(scope, (_e = (_d = duplicatedDeclarations.get(scope)) === null || _d === void 0 ? void 0 : _d.add(declaration)) !== null && _e !== void 0 ? _e : new Set([declaration]));
                    result.push(page);
                }
            });
        });
    });
    return result;
}
//# sourceMappingURL=generate-api-entities.js.map