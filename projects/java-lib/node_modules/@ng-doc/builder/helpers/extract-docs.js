"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractDocs = extractDocs;
exports.extractSeeDocs = extractSeeDocs;
exports.extractParameterDocs = extractParameterDocs;
const tsdoc_1 = require("@microsoft/tsdoc");
const core_1 = require("@ng-doc/core");
const ts_doc_formatter_1 = require("../engine/ts-doc-formatter");
const markdown_to_html_1 = require("./markdown-to-html");
/**
 *
 * @param node
 * @param section
 * @param customTag
 * @param param
 */
function extractDocs(node, customTag) {
    const jsDocs = (0, core_1.asArray)(node.getJsDocs()[0]);
    const parser = new tsdoc_1.TSDocParser(getTsDocConfiguration());
    const docs = jsDocs
        .map((doc) => {
        const context = parser.parseString(doc.getText());
        return customTag
            ? ts_doc_formatter_1.TsDocFormatter.renderDocNodes(context.docComment.customBlocks.filter((block) => block.blockTag.tagName === customTag))
            : ts_doc_formatter_1.TsDocFormatter.renderDocNode(context.docComment.summarySection);
    })
        .join('');
    return (0, markdown_to_html_1.markdownToHtml)(docs).trim();
}
/**
 *
 * @param node
 */
function extractSeeDocs(node) {
    const jsDocs = (0, core_1.asArray)(node.getJsDocs()[0]);
    const parser = new tsdoc_1.TSDocParser(getTsDocConfiguration());
    return jsDocs
        .map((jsDoc) => {
        const context = parser.parseString(jsDoc.getText());
        return context.docComment.seeBlocks
            .map((seeBlock) => ts_doc_formatter_1.TsDocFormatter.renderDocNode(seeBlock))
            .map((block) => (0, markdown_to_html_1.markdownToHtml)(block));
    })
        .flat();
}
/**
 *
 * @param node
 * @param paramName
 */
function extractParameterDocs(node, paramName) {
    const jsDocs = (0, core_1.asArray)(node.getJsDocs()[0]);
    const parser = new tsdoc_1.TSDocParser(getTsDocConfiguration());
    const docs = jsDocs
        .map((doc) => {
        const context = parser.parseString(doc.getText());
        const paramBlock = context.docComment.params.tryGetBlockByName(paramName);
        return paramBlock ? ts_doc_formatter_1.TsDocFormatter.renderDocNode(paramBlock.content) : '';
    })
        .join('');
    return (0, markdown_to_html_1.markdownToHtml)(docs).trim();
}
/**
 *
 */
function getTsDocConfiguration() {
    const customTags = [
        new tsdoc_1.TSDocTagDefinition({
            tagName: '@usageNotes',
            syntaxKind: tsdoc_1.TSDocTagSyntaxKind.BlockTag,
            allowMultiple: false,
        }),
    ];
    const configuration = new tsdoc_1.TSDocConfiguration();
    customTags.forEach((tag) => configuration.addTagDefinition(tag));
    return configuration;
}
//# sourceMappingURL=extract-docs.js.map