"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.markdownToHtml = markdownToHtml;
const tslib_1 = require("tslib");
const builder_1 = require("@ng-doc/builder");
const core_1 = require("@ng-doc/core");
const fs = tslib_1.__importStar(require("fs"));
const marked_1 = require("marked");
const node_os_1 = require("node:os");
const path = tslib_1.__importStar(require("path"));
const remove_lines_from_code_1 = require("./remove-lines-from-code");
const blockquoteRegex = /^<p><strong>(\w+)<\/strong>\s*/;
/**
 *
 * @param this
 * @param markdown
 * @param contextFolder
 * @param page
 * @param context
 * @param addDependency
 */
function markdownToHtml(markdown, context, addDependency) {
    const renderer = {
        code(code, lang) {
            var _a;
            const { language, file, name, highlightedLines, fileLineStart, fileLineEnd, group, active, icon, } = (0, builder_1.parseCodeBlockParams)((_a = lang === null || lang === void 0 ? void 0 : lang.trim()) !== null && _a !== void 0 ? _a : 'typescript');
            if (file && context) {
                const relativeFilePath = path.join(context, file);
                const fileContent = fs
                    .readFileSync(relativeFilePath !== null && relativeFilePath !== void 0 ? relativeFilePath : '', 'utf8')
                    .split(node_os_1.EOL)
                    .slice(fileLineStart, fileLineEnd)
                    .join(node_os_1.EOL)
                    .trim();
                addDependency && addDependency(relativeFilePath);
                code = (0, remove_lines_from_code_1.removeLinesFromCode)(fileContent);
            }
            const codeElement = `<pre><code class="language-${language !== null && language !== void 0 ? language : 'ts'}"
	      lang="${language}"
	      name="${!group && name ? name : ''}"
	      icon="${!group && icon ? icon : ''}"
	      highlightedLines="${JSON.stringify(highlightedLines !== null && highlightedLines !== void 0 ? highlightedLines : [])}">${(0, core_1.escapeHtml)(code)}</code></pre>`;
            return group
                ? `<ng-doc-tab group="${group}" name="${name}" icon="${icon !== null && icon !== void 0 ? icon : ''}" ${active ? 'active' : ''}>${codeElement}</ng-doc-tab>`
                : codeElement;
        },
        blockquote(quote) {
            const match = quote.match(blockquoteRegex);
            if (match) {
                return `<ng-doc-blockquote type="${match[1].toLowerCase()}">${quote.replace(blockquoteRegex, '<p>')}</ng-doc-blockquote>`;
            }
            return `<ng-doc-blockquote>${quote}</ng-doc-blockquote>`;
        },
    };
    marked_1.marked.use({ renderer });
    return marked_1.marked.parse(markdown, { headerIds: false });
}
//# sourceMappingURL=markdown-to-html.js.map