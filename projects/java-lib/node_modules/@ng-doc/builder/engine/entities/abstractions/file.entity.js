"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgDocFileEntity = void 0;
const tslib_1 = require("tslib");
const minimatch_1 = require("minimatch");
const path = tslib_1.__importStar(require("path"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const ts_morph_1 = require("ts-morph");
const helpers_1 = require("../../../helpers");
const variables_1 = require("../../variables");
const source_file_entity_1 = require("./source-file.entity");
/**
 * Entity for file end points that generate modules and components.
 */
class NgDocFileEntity extends source_file_entity_1.NgDocSourceFileEntity {
    refreshImpl() {
        return super
            .refreshImpl()
            .pipe((0, operators_1.tap)(() => (this.objectExpression = (0, helpers_1.getObjectExpressionFromDefault)(this.sourceFile))));
    }
    /**
     * Runs when the source file was updated, can be used to load target file.
     */
    loadImpl() {
        return (0, rxjs_1.defer)(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.target = (yield (0, helpers_1.importFreshEsm)(this.pathToCompiledFile)).default;
            if (!this.target || !this.objectExpression) {
                new Error(`Failed to load object. Make sure that you have exported it as default.`);
            }
        }));
    }
    getParentFromCategory() {
        var _a, _b, _c, _d, _e, _f;
        const sourceFilePath = (_f = (_e = (_d = (_c = (_b = (_a = this.objectExpression) === null || _a === void 0 ? void 0 : _a.getProperty('category')) === null || _b === void 0 ? void 0 : _b.getChildrenOfKind(ts_morph_1.SyntaxKind.Identifier)) === null || _c === void 0 ? void 0 : _c.pop()) === null || _d === void 0 ? void 0 : _d.getDefinitions()[0]) === null || _e === void 0 ? void 0 : _e.getSourceFile()) === null || _f === void 0 ? void 0 : _f.getFilePath();
        if (sourceFilePath &&
            (0, minimatch_1.minimatch)(sourceFilePath, variables_1.CATEGORY_PATTERN) &&
            sourceFilePath !== this.sourceFilePath) {
            const parent = this.store.get(path.relative(this.context.context.workspaceRoot, sourceFilePath));
            return (0, helpers_1.isCategoryEntity)(parent) && parent.isReadyForBuild ? parent : undefined;
        }
        return undefined;
    }
    /**
     * Compiles the source file
     */
    compile() {
        return (0, rxjs_1.from)((0, helpers_1.buildFileEntity)(this.sourceFile, this.context.tsConfig, this.context.context.workspaceRoot)).pipe((0, operators_1.map)(() => void 0), (0, operators_1.tap)({
            error: (e) => this.errors.push(e),
        }));
    }
    load() {
        return this.loadImpl().pipe((0, operators_1.tap)({
            error: (e) => this.errors.push(e),
        }));
    }
    setParentDynamically() {
        // No implementation
    }
    destroy() {
        super.destroy();
    }
    removeArtifacts() {
        super.removeArtifacts();
    }
}
exports.NgDocFileEntity = NgDocFileEntity;
//# sourceMappingURL=file.entity.js.map