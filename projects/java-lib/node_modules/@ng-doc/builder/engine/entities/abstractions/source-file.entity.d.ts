import { Observable } from 'rxjs';
import { SourceFile } from 'ts-morph';
import { NgDocBuilderContext } from '../../../interfaces';
import { NgDocEntityStore } from '../../entity-store';
import { NgDocCache } from '../cache';
import { NgDocEntity } from './entity';
export declare abstract class NgDocSourceFileEntity extends NgDocEntity {
    readonly store: NgDocEntityStore;
    readonly cache: NgDocCache;
    readonly context: NgDocBuilderContext;
    readonly sourceFile: SourceFile;
    /**
     * The key by which the entity will be stored in the store
     */
    readonly id: string;
    constructor(store: NgDocEntityStore, cache: NgDocCache, context: NgDocBuilderContext, sourceFile: SourceFile);
    /**
     * Files that are watched for changes to rebuild entity or remove it
     */
    get rootFiles(): string[];
    get sourceFilePath(): string;
    /**
     * Returns relative path to a sourceFileFolder of the source file
     * @type {string}
     */
    get sourceFileFolder(): string;
    get importPath(): string;
    /**
     * Returns import paths that can be used to import the current source file
     */
    get pathToCompiledFile(): string;
    /**
     * Runs when the source file was updated, can be used refresh source file in the typescript project
     */
    protected refreshImpl(): Observable<void>;
    refresh(): Observable<void>;
    destroy(): void;
}
