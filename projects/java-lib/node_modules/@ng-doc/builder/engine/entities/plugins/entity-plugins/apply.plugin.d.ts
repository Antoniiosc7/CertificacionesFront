import { NgDocEntity } from '../../abstractions/entity';
import { NgDocEntityPlugin } from '../types';
type ApplyFn<T, TEntity extends NgDocEntity> = (data: T, entity: TEntity) => Promise<T>;
type TransformFn<T, R, TEntity extends NgDocEntity> = (data: T, apply: ApplyFn<R, TEntity>, entity: TEntity) => Promise<T>;
/**
 *
 * @param fn
 * @param get
 * @param transform
 * @param plugins
 */
export declare function applyPlugin<T, R, TEntity extends NgDocEntity = NgDocEntity>(transform: TransformFn<T, R, TEntity>, plugins: (data: R) => Array<NgDocEntityPlugin<R, TEntity>>): NgDocEntityPlugin<T, TEntity>;
/**
 *
 */
export declare function forArrayItems<T, TEntity extends NgDocEntity>(): TransformFn<T[], T, TEntity>;
/**
 *
 */
export declare function forObjectValues<T, K extends keyof T, TEntity extends NgDocEntity>(): TransformFn<T, T[K], TEntity>;
/**
 *
 * @param key
 */
export declare function forObjectValue<T extends object, K extends keyof T, TEntity extends NgDocEntity>(key: K): TransformFn<T, T[K], TEntity>;
export {};
