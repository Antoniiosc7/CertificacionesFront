"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgDocApiEntity = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@ng-doc/core");
const path = tslib_1.__importStar(require("path"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const helpers_1 = require("../../helpers");
const nunjucks_1 = require("../nunjucks");
const navigation_entity_1 = require("./abstractions/navigation.entity");
const api_list_entity_1 = require("./api-list.entity");
const api_scope_entity_1 = require("./api-scope.entity");
const decorators_1 = require("./cache/decorators");
let NgDocApiEntity = (() => {
    let _classDecorators = [(0, decorators_1.CachedEntity)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = navigation_entity_1.NgDocNavigationEntity;
    var NgDocApiEntity = _classThis = class extends _classSuper {
        constructor() {
            super(...arguments);
            this.moduleFileName = `${(0, helpers_1.uniqueName)('ng-doc-api-list')}.module.ts`;
        }
        get route() {
            var _a, _b;
            return (_b = (_a = this.target) === null || _a === void 0 ? void 0 : _a.route) !== null && _b !== void 0 ? _b : 'api';
        }
        /**
         * Returns full url from the root
         * @type {string}
         */
        get url() {
            return `${this.parent ? this.parent.url + '/' : ''}${this.route}`;
        }
        get isRoot() {
            var _a;
            return !((_a = this.target) === null || _a === void 0 ? void 0 : _a.category);
        }
        get title() {
            var _a, _b;
            return (_b = (_a = this.target) === null || _a === void 0 ? void 0 : _a.title) !== null && _b !== void 0 ? _b : '';
        }
        get order() {
            var _a;
            return (_a = this.target) === null || _a === void 0 ? void 0 : _a.order;
        }
        get buildCandidates() {
            return this.parentEntities;
        }
        get folderPath() {
            return path.join(this.context.apiPath, this.route);
        }
        get builtChildren() {
            return super.builtChildren.filter((child) => child instanceof api_scope_entity_1.NgDocApiScopeEntity);
        }
        get keywords() {
            var _a;
            return [...(0, core_1.asArray)((_a = this.target) === null || _a === void 0 ? void 0 : _a.keyword)].map((key) => ({
                key: `*${key}`,
                title: this.title,
                path: this.fullRoute,
            }));
        }
        setParentDynamically() {
            super.setParentDynamically();
            this.parent = this.getParentFromCategory();
        }
        childrenGenerator() {
            this.children.forEach((child) => child.destroy());
            return this.refreshImpl().pipe((0, operators_1.switchMap)(() => (0, helpers_1.buildFileEntity)(this.sourceFile, this.context.tsConfig, this.context.context.workspaceRoot)), (0, operators_1.switchMap)(() => this.loadImpl()), (0, operators_1.map)(() => (0, helpers_1.generateApiEntities)(this)), (0, operators_1.map)((entities) => entities.concat(new api_list_entity_1.NgDocApiListEntity(this.store, this.cache, this.context, this))));
        }
        loadImpl() {
            return super.loadImpl().pipe((0, operators_1.tap)({
                next: () => {
                    if (!this.title) {
                        throw new Error(`Failed to load ${this.sourceFile.getFilePath()}. Make sure that you have a title property.`);
                    }
                },
                error: (e) => this.errors.push(e),
            }));
        }
        build() {
            if (this.target) {
                const result = (0, nunjucks_1.renderTemplate)('./api-list.ts.nunj', {
                    context: {
                        api: this,
                        outFolder: this.folderPath,
                    },
                });
                return (0, rxjs_1.of)({
                    result,
                    entity: this,
                    toBuilderOutput: (content) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        return ({
                            content,
                            filePath: this.modulePath,
                        });
                    }),
                });
            }
            throw new Error(`The entity "${this.id}" is not loaded.`);
        }
    };
    tslib_1.__setFunctionName(_classThis, "NgDocApiEntity");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        NgDocApiEntity = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        tslib_1.__runInitializers(_classThis, _classExtraInitializers);
    })();
    return NgDocApiEntity = _classThis;
})();
exports.NgDocApiEntity = NgDocApiEntity;
//# sourceMappingURL=api.entity.js.map