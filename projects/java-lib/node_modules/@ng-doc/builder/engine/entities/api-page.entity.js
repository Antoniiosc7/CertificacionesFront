"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgDocApiPageEntity = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@ng-doc/core");
const path = tslib_1.__importStar(require("path"));
const rxjs_1 = require("rxjs");
const helpers_1 = require("../../helpers");
const nunjucks_1 = require("../nunjucks");
const route_entity_1 = require("./abstractions/route.entity");
const cache_1 = require("./cache");
const plugins_1 = require("./plugins");
let NgDocApiPageEntity = (() => {
    let _classDecorators = [(0, cache_1.CachedEntity)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = route_entity_1.NgDocRouteEntity;
    var NgDocApiPageEntity = _classThis = class extends _classSuper {
        constructor(store, cache, context, sourceFile, parent, declarationName, index) {
            super(store, cache, context, sourceFile);
            this.store = store;
            this.cache = cache;
            this.context = context;
            this.sourceFile = sourceFile;
            this.parent = parent;
            this.declarationName = declarationName;
            this.index = index;
            this.physical = false;
            this.id = (0, helpers_1.uniqueName)(`${this.sourceFilePath}#${this.declarationName}`);
            this.folderName = '';
            this.updateDeclaration();
        }
        get isRoot() {
            // always false, api pages are not rooted
            return false;
        }
        get route() {
            return this.declaration
                ? (0, helpers_1.posix)(path.join((0, helpers_1.declarationFolderName)(this.declaration), this.declarationName + (this.index ? this.index : '')))
                : '';
        }
        refreshImpl() {
            /**
             * Just refresh source file, we don't need to emit it
             */
            this.sourceFile.refreshFromFileSystemSync();
            this.updateDeclaration();
            return (0, rxjs_1.of)(void 0);
        }
        get title() {
            return this.declarationName;
        }
        get editSourceFileUrl() {
            var _a;
            if (this.context.config.repoConfig) {
                return (0, helpers_1.editFileInRepoUrl)(this.context.config.repoConfig, this.sourceFilePath, this.parent.route.toLowerCase(), (_a = this.declaration) === null || _a === void 0 ? void 0 : _a.getStartLineNumber(true));
            }
            return undefined;
        }
        get viewSourceFileUrl() {
            var _a;
            if (this.context.config.repoConfig) {
                return (0, helpers_1.viewFileInRepoUrl)(this.context.config.repoConfig, this.sourceFilePath, (_a = this.declaration) === null || _a === void 0 ? void 0 : _a.getStartLineNumber(true));
            }
            return undefined;
        }
        get folderPath() {
            return path.join(this.parent.folderPath, this.route);
        }
        get buildCandidates() {
            return [];
        }
        get keywords() {
            return [
                {
                    key: this.declarationName,
                    title: this.declarationName,
                    path: this.fullRoute,
                },
            ].concat(this.anchors.map((anchor) => (0, helpers_1.buildEntityKeyword)(this.declarationName, this.declarationName, this.fullRoute, anchor)));
        }
        compile() {
            return (0, rxjs_1.of)(void 0);
        }
        loadImpl() {
            return (0, rxjs_1.of)(void 0);
        }
        build() {
            if (this.parent.target) {
                const result = (0, nunjucks_1.renderTemplate)('./api-page-content.html.nunj', {
                    context: {
                        declaration: this.declaration,
                        scope: this.parent.target,
                    },
                });
                return (0, rxjs_1.of)({
                    result,
                    entity: this,
                    toBuilderOutput: (content) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        return ({
                            content: (0, nunjucks_1.renderTemplate)('./api-page.ts.nunj', {
                                context: {
                                    page: this,
                                    pageContent: content,
                                },
                            }),
                            filePath: this.modulePath,
                        });
                    }),
                    postBuildPlugins: [(0, plugins_1.processHtmlPlugin)()],
                    postProcessPlugins: [(0, plugins_1.postProcessHtmlPlugin)(), (0, plugins_1.fillIndexesPlugin)()],
                });
            }
            throw new Error(`The entity "${this.id}" is not loaded.`);
        }
        updateDeclaration() {
            const declarations = [
                ...(0, core_1.asArray)(this.sourceFile.getExportedDeclarations().get(this.declarationName)),
                ...(0, core_1.asArray)(this.sourceFile.getExportedDeclarations().get('default')),
            ].filter(helpers_1.isSupportedDeclaration);
            this.declaration = declarations.find((declaration) => declaration.getName() === this.declarationName);
            if (!this.declaration) {
                this.destroy();
            }
        }
    };
    tslib_1.__setFunctionName(_classThis, "NgDocApiPageEntity");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        NgDocApiPageEntity = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        tslib_1.__runInitializers(_classThis, _classExtraInitializers);
    })();
    return NgDocApiPageEntity = _classThis;
})();
exports.NgDocApiPageEntity = NgDocApiPageEntity;
//# sourceMappingURL=api-page.entity.js.map