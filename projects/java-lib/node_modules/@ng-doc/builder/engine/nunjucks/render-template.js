"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderTemplate = renderTemplate;
const tslib_1 = require("tslib");
const core_1 = require("@ng-doc/core");
const fs = tslib_1.__importStar(require("fs"));
const nunjucks_1 = require("nunjucks");
const path = tslib_1.__importStar(require("path"));
const ts_morph_1 = require("ts-morph");
const variables_1 = require("../variables");
const extentions_1 = require("./extentions");
const filters = tslib_1.__importStar(require("./filters"));
class NgDocRelativeLoader {
    constructor(path, dependenciesStore) {
        this.path = path;
        this.dependenciesStore = dependenciesStore;
    }
    getSource(name) {
        var _a;
        const fullPath = path.join(this.path, name);
        (_a = this.dependenciesStore) === null || _a === void 0 ? void 0 : _a.add(fullPath);
        return {
            src: fs.readFileSync(fullPath, 'utf-8'),
            path: fullPath,
            noCache: true,
        };
    }
}
/**
 * Renders a template with the given options via Nunjucks.
 * @param template - The template path to render.
 * @param options - The options to render the template with.
 */
function renderTemplate(template, options) {
    var _a;
    let environment = new nunjucks_1.Environment(new NgDocRelativeLoader((_a = options === null || options === void 0 ? void 0 : options.scope) !== null && _a !== void 0 ? _a : variables_1.TEMPLATES_PATH, options === null || options === void 0 ? void 0 : options.dependenciesStore), { autoescape: false });
    if ((options === null || options === void 0 ? void 0 : options.filters) !== false) {
        (0, core_1.objectKeys)(filters).forEach((filter) => (environment = environment.addFilter(filter, filters[filter])));
        environment.addGlobal('Node', ts_morph_1.Node);
    }
    environment.addExtension('NgDocIndexExtension', new extentions_1.NgDocIndexExtension());
    return environment.render(template, options === null || options === void 0 ? void 0 : options.context);
}
//# sourceMappingURL=render-template.js.map