"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgDocEntityStore = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@ng-doc/core");
const helpers_1 = require("../helpers");
class NgDocEntityStore extends Map {
    constructor(config) {
        super();
        this.config = config;
        this.keywordMap = new Map();
        this.globalKeywords = new Map();
    }
    asArray() {
        return (0, core_1.asArray)(this.values());
    }
    set(key, value) {
        var _a;
        if (this.get(key) !== value) {
            (_a = this.get(key)) === null || _a === void 0 ? void 0 : _a.destroy();
        }
        return super.set(key, value);
    }
    delete(key) {
        return super.delete(key);
    }
    getByKeyword(keyword) {
        var _a;
        const key = (0, helpers_1.keywordKey)(keyword);
        return (_a = this.keywordMap.get(key)) !== null && _a !== void 0 ? _a : this.globalKeywords.get(key);
    }
    getKeywords() {
        return Object.fromEntries(this.keywordMap);
    }
    loadGlobalKeywords() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e;
            const keywordLoaders = (0, core_1.asArray)((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.keywords) === null || _b === void 0 ? void 0 : _b.loaders);
            const keywords = yield Promise.all(keywordLoaders.map((loader) => loader()));
            keywords
                .concat((_e = (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.keywords) === null || _d === void 0 ? void 0 : _d.keywords) !== null && _e !== void 0 ? _e : {})
                .forEach((keywords) => {
                (0, core_1.objectKeys)(keywords).forEach((key) => {
                    var _a;
                    const keyword = keywords[key];
                    if (keyword) {
                        this.globalKeywords.set((0, helpers_1.keywordKey)(key), {
                            title: (_a = keyword.title) !== null && _a !== void 0 ? _a : key,
                            path: keyword.url,
                            description: keyword.description,
                            isCodeLink: !!keyword.isCodeLink,
                        });
                    }
                });
            });
        });
    }
    updateKeywordMap() {
        this.keywordMap.clear();
        this.asArray().forEach((entity) => {
            if ((0, helpers_1.isRouteEntity)(entity) && entity.isReadyForBuild) {
                entity.keywords.forEach((keyword) => this.addKeyword((0, helpers_1.keywordKey)(keyword.key), {
                    title: keyword.title,
                    path: keyword.path,
                    type: (0, helpers_1.getKeywordTypeFromEntity)(entity),
                    isCodeLink: (0, helpers_1.isApiPageEntity)(entity),
                }));
            }
        });
    }
    getAllWithErrorsOrWarnings() {
        return this.asArray().filter((entity) => entity.errors.length || entity.warnings.length);
    }
    getRootEntitiesForBuild() {
        return this.asArray().filter((e) => e.isRoot && e.isReadyForBuild);
    }
    addKeyword(key, keyword) {
        this.keywordMap.set(key, keyword);
    }
}
exports.NgDocEntityStore = NgDocEntityStore;
//# sourceMappingURL=entity-store.js.map