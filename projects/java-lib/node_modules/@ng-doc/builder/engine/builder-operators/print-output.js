"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printOutput = printOutput;
const operators_1 = require("rxjs/operators");
const helpers_1 = require("../../helpers");
/**
 * Prints all errors and warnings existing in the store
 * @param store - The store to print warnings and errors from
 */
function printOutput(store) {
    return (source) => source.pipe((0, operators_1.tap)(() => {
        const entitiesWithErrors = store
            .getAllWithErrorsOrWarnings()
            .sort(sortEntities);
        if (entitiesWithErrors.length > 0) {
            (0, helpers_1.printError)(`NgDoc: ${entitiesWithErrors.length} entities with problems:`);
            entitiesWithErrors.forEach((entity) => {
                const printIdFunc = entity.errors.length ? helpers_1.printError : helpers_1.printWarning;
                printIdFunc(`  ${entity.id}:`);
                entity.warnings.forEach((error, i) => {
                    const isLast = i === entity.warnings.length - 1 && !entity.errors.length;
                    (0, helpers_1.printWarning)(`    ${error.message}${isLast ? '\n' : ''}`);
                });
                entity.errors.forEach((error, i) => {
                    const isLast = i === entity.errors.length - 1;
                    (0, helpers_1.printError)(`    ${error}${isLast ? '\n' : ''}`);
                });
            });
        }
    }));
}
/**
 * Sorts entities by errors and warnings
 * @param a - The first entity to compare
 * @param b - The second entity to compare
 */
function sortEntities(a, b) {
    if (a.errors.length && !b.errors.length) {
        return -1;
    }
    if (!a.errors.length && b.errors.length) {
        return 1;
    }
    if (a.warnings.length && !b.warnings.length) {
        return -1;
    }
    if (!a.warnings.length && b.warnings.length) {
        return 1;
    }
    return 0;
}
//# sourceMappingURL=print-output.js.map