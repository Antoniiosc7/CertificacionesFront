"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postProcess = postProcess;
const core_1 = require("@ng-doc/core");
const operators_1 = require("rxjs/operators");
const operators_2 = require("../../operators");
const error_handler_1 = require("../../operators/error-handler");
const plugins_1 = require("../entities/plugins");
/**
 * Post-processes the build output.
 * It is used to update the keyword map and to run the post-process function of each entity.
 * @param store - The entity store.
 * @param config - The configuration.
 * @param additionalEntities - Additional entities to be build and post-processed.
 */
function postProcess(store, config, ...additionalEntities) {
    return (source) => source.pipe((0, operators_1.tap)(() => store.updateKeywordMap()), (0, operators_1.switchMap)((outputs) => (0, operators_2.forkJoinOrEmpty)(outputs.map((output) => handlePostProcess(output).pipe((0, error_handler_1.errorHandler)(output)))).pipe((0, operators_1.switchMap)((postProcessedOutputs) => (0, operators_2.forkJoinOrEmpty)(additionalEntities.map((e) => e.build())).pipe((0, operators_1.switchMap)((additionalOutputs) => (0, operators_2.forkJoinOrEmpty)(additionalOutputs.map((output) => handlePostProcess(output).pipe((0, error_handler_1.errorHandler)(output))))), (0, operators_1.map)((additionalPostProcessedOutputs) => [
        ...postProcessedOutputs,
        ...additionalPostProcessedOutputs,
    ]))))));
}
/**
 *
 * @param output
 */
function handlePostProcess(output) {
    return (0, plugins_1.executePlugins)(output.result, output.entity, (0, core_1.asArray)(output.postProcessPlugins)).pipe((0, operators_1.map)((result) => Object.assign({}, output, { result })));
}
//# sourceMappingURL=post-process.js.map