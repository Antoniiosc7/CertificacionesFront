import { AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { NgDocRootPage } from '@ng-doc/app/classes/root-page';
import { NgDocPlaygroundConfig, NgDocPlaygroundOptions, NgDocPlaygroundProperties } from '@ng-doc/core/interfaces';
import { NgDocPlaygroundForm } from './playground-form';
import * as i0 from "@angular/core";
export declare class NgDocPlaygroundComponent<T extends NgDocPlaygroundProperties = NgDocPlaygroundProperties> implements OnChanges, AfterViewInit {
    private readonly rootPage;
    private readonly formBuilder;
    id: string;
    pipeName: string;
    selectors: string[];
    properties?: T;
    options: NgDocPlaygroundOptions;
    recreateDemo: boolean;
    formGroup: FormGroup<NgDocPlaygroundForm>;
    defaultValues?: Record<string, unknown>;
    configuration: NgDocPlaygroundConfig;
    private defaultProperties;
    private defaultContent;
    constructor(rootPage: NgDocRootPage, formBuilder: FormBuilder);
    ngOnChanges({ options }: SimpleChanges): void;
    ngAfterViewInit(): void;
    protected isDefaultState(): boolean;
    private getPropertiesFormValues;
    private getContentFormValues;
    resetForm(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgDocPlaygroundComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgDocPlaygroundComponent<any>, "ng-doc-playground", never, { "id": { "alias": "id"; "required": true; }; "pipeName": { "alias": "pipeName"; "required": false; }; "selectors": { "alias": "selectors"; "required": false; }; "properties": { "alias": "properties"; "required": false; }; "options": { "alias": "options"; "required": false; }; }, {}, never, never, true, never>;
}
