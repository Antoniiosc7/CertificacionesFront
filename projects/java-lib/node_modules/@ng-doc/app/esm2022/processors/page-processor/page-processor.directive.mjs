import { Directive, ElementRef, EventEmitter, inject, Injector, Input, Output, Renderer2, ViewContainerRef, } from '@angular/core';
import { NG_DOC_PAGE_CUSTOM_PROCESSOR, NG_DOC_PAGE_PROCESSOR } from '@ng-doc/app/tokens';
import { asArray, objectKeys } from '@ng-doc/core';
import * as i0 from "@angular/core";
/**
 * Base processor class to create a processor directive that will be used to replace
 * html nodes with an Angular component.
 */
export class NgDocPageProcessorDirective {
    constructor() {
        this.html = '';
        this.afterRender = new EventEmitter();
        this.processors = inject(NG_DOC_PAGE_PROCESSOR, { optional: true }) ?? [];
        this.customProcessors = inject(NG_DOC_PAGE_CUSTOM_PROCESSOR, { optional: true }) ??
            [];
        this.elementRef = inject(ElementRef);
        this.viewContainerRef = inject(ViewContainerRef);
        this.injector = inject(Injector);
        this.renderer = inject(Renderer2);
    }
    ngOnChanges({ html }) {
        if (html) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'innerHTML', this.html);
            this.afterRender.emit();
        }
    }
    ngOnInit() {
        asArray(this.processors, this.customProcessors).forEach(this.process.bind(this));
    }
    process(processor) {
        Array.from(this.elementRef.nativeElement.querySelectorAll(processor.selector)).forEach((elementNode) => {
            // check if element node has a parent node because it can be removed by another processor
            if (elementNode.parentNode) {
                const replaceElement = (processor.nodeToReplace && processor.nodeToReplace(elementNode, this.injector)) ??
                    elementNode;
                const options = processor.extractOptions(elementNode, this.elementRef.nativeElement);
                // create component
                const componentRef = this.viewContainerRef.createComponent(processor.component, {
                    projectableNodes: options.content,
                    injector: this.injector,
                });
                // set component options
                if (options.inputs) {
                    objectKeys(options.inputs).forEach((key) => options.inputs && componentRef.setInput(key, options.inputs[key]));
                }
                // replace element node with component node
                replaceElement.parentNode?.replaceChild(componentRef.location.nativeElement, replaceElement);
                componentRef.changeDetectorRef.markForCheck();
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocPageProcessorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocPageProcessorDirective, isStandalone: true, selector: "[ngDocPageProcessor]", inputs: { html: ["ngDocPageProcessor", "html"] }, outputs: { afterRender: "afterRender" }, host: { attributes: { "ngSkipHydration": "true" } }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocPageProcessorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngDocPageProcessor]',
                    standalone: true,
                    host: { ngSkipHydration: 'true' },
                }]
        }], propDecorators: { html: [{
                type: Input,
                args: [{ required: true, alias: 'ngDocPageProcessor' }]
            }], afterRender: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1wcm9jZXNzb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hcHAvcHJvY2Vzc29ycy9wYWdlLXByb2Nlc3Nvci9wYWdlLXByb2Nlc3Nvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVOLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sRUFDTixRQUFRLEVBQ1IsS0FBSyxFQUdMLE1BQU0sRUFDTixTQUFTLEVBRVQsZ0JBQWdCLEdBQ2hCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQUVuRDs7O0dBR0c7QUFNSCxNQUFNLE9BQU8sMkJBQTJCO0lBTHhDO1FBT0MsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUdsQixnQkFBVyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBRTNELGVBQVUsR0FDVCxNQUFNLENBQXFDLHFCQUFxQixFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdGLHFCQUFnQixHQUNmLE1BQU0sQ0FBcUMsNEJBQTRCLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDNUYsRUFBRSxDQUFDO1FBRWUsZUFBVSxHQUE0QixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekQscUJBQWdCLEdBQXFCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzlELGFBQVEsR0FBYSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsYUFBUSxHQUFjLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQXNEM0Q7SUFwREEsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFpQjtRQUNsQyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLENBQUM7SUFDRixDQUFDO0lBRUQsUUFBUTtRQUNQLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFTyxPQUFPLENBQUksU0FBZ0M7UUFDbEQsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQ3JGLENBQUMsV0FBb0IsRUFBRSxFQUFFO1lBQ3hCLHlGQUF5RjtZQUN6RixJQUFJLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztnQkFDNUIsTUFBTSxjQUFjLEdBQ25CLENBQUMsU0FBUyxDQUFDLGFBQWEsSUFBSSxTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ2hGLFdBQVcsQ0FBQztnQkFDYixNQUFNLE9BQU8sR0FBNkIsU0FBUyxDQUFDLGNBQWMsQ0FDakUsV0FBVyxFQUNYLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUM3QixDQUFDO2dCQUVGLG1CQUFtQjtnQkFDbkIsTUFBTSxZQUFZLEdBQW9CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQzFFLFNBQVMsQ0FBQyxTQUFTLEVBQ25CO29CQUNDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxPQUFPO29CQUNqQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7aUJBQ3ZCLENBQ0QsQ0FBQztnQkFFRix3QkFBd0I7Z0JBQ3hCLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUNwQixVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FDakMsQ0FBQyxHQUFZLEVBQUUsRUFBRSxDQUNoQixPQUFPLENBQUMsTUFBTSxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBYSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDNUUsQ0FBQztnQkFDSCxDQUFDO2dCQUVELDJDQUEyQztnQkFDM0MsY0FBYyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQ3RDLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUNuQyxjQUFjLENBQ2QsQ0FBQztnQkFFRixZQUFZLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDL0MsQ0FBQztRQUNGLENBQUMsQ0FDRCxDQUFDO0lBQ0gsQ0FBQzs4R0FyRVcsMkJBQTJCO2tHQUEzQiwyQkFBMkI7OzJGQUEzQiwyQkFBMkI7a0JBTHZDLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLElBQUksRUFBRSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUU7aUJBQ2pDOzhCQUdBLElBQUk7c0JBREgsS0FBSzt1QkFBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFO2dCQUl0RCxXQUFXO3NCQURWLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnRSZWYsXG5cdERpcmVjdGl2ZSxcblx0RWxlbWVudFJlZixcblx0RXZlbnRFbWl0dGVyLFxuXHRpbmplY3QsXG5cdEluamVjdG9yLFxuXHRJbnB1dCxcblx0T25DaGFuZ2VzLFxuXHRPbkluaXQsXG5cdE91dHB1dCxcblx0UmVuZGVyZXIyLFxuXHRTaW1wbGVDaGFuZ2VzLFxuXHRWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nRG9jUGFnZVByb2Nlc3NvciwgTmdEb2NQcm9jZXNzb3JPcHRpb25zIH0gZnJvbSAnQG5nLWRvYy9hcHAvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBOR19ET0NfUEFHRV9DVVNUT01fUFJPQ0VTU09SLCBOR19ET0NfUEFHRV9QUk9DRVNTT1IgfSBmcm9tICdAbmctZG9jL2FwcC90b2tlbnMnO1xuaW1wb3J0IHsgYXNBcnJheSwgb2JqZWN0S2V5cyB9IGZyb20gJ0BuZy1kb2MvY29yZSc7XG5cbi8qKlxuICogQmFzZSBwcm9jZXNzb3IgY2xhc3MgdG8gY3JlYXRlIGEgcHJvY2Vzc29yIGRpcmVjdGl2ZSB0aGF0IHdpbGwgYmUgdXNlZCB0byByZXBsYWNlXG4gKiBodG1sIG5vZGVzIHdpdGggYW4gQW5ndWxhciBjb21wb25lbnQuXG4gKi9cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tuZ0RvY1BhZ2VQcm9jZXNzb3JdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aG9zdDogeyBuZ1NraXBIeWRyYXRpb246ICd0cnVlJyB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ0RvY1BhZ2VQcm9jZXNzb3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG5cdEBJbnB1dCh7IHJlcXVpcmVkOiB0cnVlLCBhbGlhczogJ25nRG9jUGFnZVByb2Nlc3NvcicgfSlcblx0aHRtbDogc3RyaW5nID0gJyc7XG5cblx0QE91dHB1dCgpXG5cdGFmdGVyUmVuZGVyOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cblx0cHJvY2Vzc29yczogQXJyYXk8TmdEb2NQYWdlUHJvY2Vzc29yPHVua25vd24+PiA9XG5cdFx0aW5qZWN0PEFycmF5PE5nRG9jUGFnZVByb2Nlc3Nvcjx1bmtub3duPj4+KE5HX0RPQ19QQUdFX1BST0NFU1NPUiwgeyBvcHRpb25hbDogdHJ1ZSB9KSA/PyBbXTtcblx0Y3VzdG9tUHJvY2Vzc29yczogQXJyYXk8TmdEb2NQYWdlUHJvY2Vzc29yPHVua25vd24+PiA9XG5cdFx0aW5qZWN0PEFycmF5PE5nRG9jUGFnZVByb2Nlc3Nvcjx1bmtub3duPj4+KE5HX0RPQ19QQUdFX0NVU1RPTV9QUk9DRVNTT1IsIHsgb3B0aW9uYWw6IHRydWUgfSkgPz9cblx0XHRbXTtcblxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4gPSBpbmplY3QoRWxlbWVudFJlZik7XG5cdHByb3RlY3RlZCByZWFkb25seSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmID0gaW5qZWN0KFZpZXdDb250YWluZXJSZWYpO1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgaW5qZWN0b3I6IEluamVjdG9yID0gaW5qZWN0KEluamVjdG9yKTtcblx0cHJvdGVjdGVkIHJlYWRvbmx5IHJlbmRlcmVyOiBSZW5kZXJlcjIgPSBpbmplY3QoUmVuZGVyZXIyKTtcblxuXHRuZ09uQ2hhbmdlcyh7IGh0bWwgfTogU2ltcGxlQ2hhbmdlcykge1xuXHRcdGlmIChodG1sKSB7XG5cdFx0XHR0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnaW5uZXJIVE1MJywgdGhpcy5odG1sKTtcblx0XHRcdHRoaXMuYWZ0ZXJSZW5kZXIuZW1pdCgpO1xuXHRcdH1cblx0fVxuXG5cdG5nT25Jbml0KCk6IHZvaWQge1xuXHRcdGFzQXJyYXkodGhpcy5wcm9jZXNzb3JzLCB0aGlzLmN1c3RvbVByb2Nlc3NvcnMpLmZvckVhY2godGhpcy5wcm9jZXNzLmJpbmQodGhpcykpO1xuXHR9XG5cblx0cHJpdmF0ZSBwcm9jZXNzPFQ+KHByb2Nlc3NvcjogTmdEb2NQYWdlUHJvY2Vzc29yPFQ+KTogdm9pZCB7XG5cdFx0QXJyYXkuZnJvbSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHByb2Nlc3Nvci5zZWxlY3RvcikpLmZvckVhY2goXG5cdFx0XHQoZWxlbWVudE5vZGU6IEVsZW1lbnQpID0+IHtcblx0XHRcdFx0Ly8gY2hlY2sgaWYgZWxlbWVudCBub2RlIGhhcyBhIHBhcmVudCBub2RlIGJlY2F1c2UgaXQgY2FuIGJlIHJlbW92ZWQgYnkgYW5vdGhlciBwcm9jZXNzb3Jcblx0XHRcdFx0aWYgKGVsZW1lbnROb2RlLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHRjb25zdCByZXBsYWNlRWxlbWVudDogRWxlbWVudCA9XG5cdFx0XHRcdFx0XHQocHJvY2Vzc29yLm5vZGVUb1JlcGxhY2UgJiYgcHJvY2Vzc29yLm5vZGVUb1JlcGxhY2UoZWxlbWVudE5vZGUsIHRoaXMuaW5qZWN0b3IpKSA/P1xuXHRcdFx0XHRcdFx0ZWxlbWVudE5vZGU7XG5cdFx0XHRcdFx0Y29uc3Qgb3B0aW9uczogTmdEb2NQcm9jZXNzb3JPcHRpb25zPFQ+ID0gcHJvY2Vzc29yLmV4dHJhY3RPcHRpb25zKFxuXHRcdFx0XHRcdFx0ZWxlbWVudE5vZGUsXG5cdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGNvbXBvbmVudFxuXHRcdFx0XHRcdGNvbnN0IGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPFQ+ID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChcblx0XHRcdFx0XHRcdHByb2Nlc3Nvci5jb21wb25lbnQsXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHByb2plY3RhYmxlTm9kZXM6IG9wdGlvbnMuY29udGVudCxcblx0XHRcdFx0XHRcdFx0aW5qZWN0b3I6IHRoaXMuaW5qZWN0b3IsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHQvLyBzZXQgY29tcG9uZW50IG9wdGlvbnNcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5pbnB1dHMpIHtcblx0XHRcdFx0XHRcdG9iamVjdEtleXMob3B0aW9ucy5pbnB1dHMpLmZvckVhY2goXG5cdFx0XHRcdFx0XHRcdChrZXk6IGtleW9mIFQpID0+XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5pbnB1dHMgJiYgY29tcG9uZW50UmVmLnNldElucHV0KGtleSBhcyBzdHJpbmcsIG9wdGlvbnMuaW5wdXRzW2tleV0pLFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyByZXBsYWNlIGVsZW1lbnQgbm9kZSB3aXRoIGNvbXBvbmVudCBub2RlXG5cdFx0XHRcdFx0cmVwbGFjZUVsZW1lbnQucGFyZW50Tm9kZT8ucmVwbGFjZUNoaWxkKFxuXHRcdFx0XHRcdFx0Y29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQsXG5cdFx0XHRcdFx0XHRyZXBsYWNlRWxlbWVudCxcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0Y29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==