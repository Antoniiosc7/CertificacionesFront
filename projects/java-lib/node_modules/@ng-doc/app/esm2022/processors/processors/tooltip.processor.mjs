import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, ViewChild, } from '@angular/core';
import { NgDocTooltipDirective } from '@ng-doc/ui-kit';
import * as i0 from "@angular/core";
class NgDocTooltipWrapperComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.tooltipElement = null;
    }
    ngAfterViewInit() {
        if (this.contentProjection) {
            const element = this.contentProjection.nativeElement.querySelector('[ngDocTooltip]');
            this.tooltipElement = element instanceof HTMLElement ? element : null;
            this.changeDetectorRef.detectChanges();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocTooltipWrapperComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocTooltipWrapperComponent, isStandalone: true, selector: "ng-doc-tooltip-wrapper", inputs: { content: "content" }, viewQueries: [{ propertyName: "contentProjection", first: true, predicate: ["contentProjection"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: `
		<div
			class="content-projection"
			[ngDocTooltip]="content ?? ''"
			[displayOrigin]="tooltipElement ?? contentProjection"
			[pointerOrigin]="tooltipElement ?? contentProjection"
			#contentProjection>
			<ng-content></ng-content>
		</div>
	`, isInline: true, styles: [".content-projection{display:unset}\n"], dependencies: [{ kind: "directive", type: NgDocTooltipDirective, selector: "[ngDocTooltip]", inputs: ["ngDocTooltip", "delay", "displayOrigin", "pointerOrigin", "positions", "canOpen", "panelClass", "minHeight", "maxHeight", "height", "minWidth", "maxWidth", "width"], outputs: ["beforeOpen", "afterOpen", "beforeClose", "afterClose"], exportAs: ["ngDocTooltip"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocTooltipWrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-tooltip-wrapper', template: `
		<div
			class="content-projection"
			[ngDocTooltip]="content ?? ''"
			[displayOrigin]="tooltipElement ?? contentProjection"
			[pointerOrigin]="tooltipElement ?? contentProjection"
			#contentProjection>
			<ng-content></ng-content>
		</div>
	`, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgDocTooltipDirective], styles: [".content-projection{display:unset}\n"] }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { content: [{
                type: Input
            }], contentProjection: [{
                type: ViewChild,
                args: ['contentProjection', { read: ElementRef, static: true }]
            }] } });
export const tooltipProcessor = {
    component: NgDocTooltipWrapperComponent,
    selector: '[ngDocTooltip]',
    extractOptions: (element) => ({
        inputs: {
            content: element.getAttribute('ngDocTooltip') ?? '',
        },
        content: [[element.cloneNode(true)]],
    }),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FwcC9wcm9jZXNzb3JzL3Byb2Nlc3NvcnMvdG9vbHRpcC5wcm9jZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVOLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxHQUNULE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUV2RCxNQXVCTSw0QkFBNEI7SUFTakMsWUFBNkIsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFMdkQsbUJBQWMsR0FBdUIsSUFBSSxDQUFDO0lBS2dCLENBQUM7SUFFckUsZUFBZTtRQUNkLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDNUIsTUFBTSxPQUFPLEdBQ1osSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUV0RSxJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sWUFBWSxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBRXRFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QyxDQUFDO0lBQ0YsQ0FBQzs4R0FwQkksNEJBQTRCO2tHQUE1Qiw0QkFBNEIscU5BTU8sVUFBVSwyQ0EzQnhDOzs7Ozs7Ozs7RUFTVCw4R0FVUyxxQkFBcUI7OzJGQUUxQiw0QkFBNEI7a0JBdkJqQyxTQUFTOytCQUNDLHdCQUF3QixZQUN4Qjs7Ozs7Ozs7O0VBU1QsbUJBUWdCLHVCQUF1QixDQUFDLE1BQU0sY0FDbkMsSUFBSSxXQUNQLENBQUMscUJBQXFCLENBQUM7c0ZBSWhDLE9BQU87c0JBRE4sS0FBSztnQkFNRSxpQkFBaUI7c0JBRHhCLFNBQVM7dUJBQUMsbUJBQW1CLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0FBaUJuRSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBcUQ7SUFDakYsU0FBUyxFQUFFLDRCQUE0QjtJQUN2QyxRQUFRLEVBQUUsZ0JBQWdCO0lBQzFCLGNBQWMsRUFBRSxDQUFDLE9BQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEMsTUFBTSxFQUFFO1lBQ1AsT0FBTyxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRTtTQUNuRDtRQUNELE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ3BDLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QWZ0ZXJWaWV3SW5pdCxcblx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG5cdENoYW5nZURldGVjdG9yUmVmLFxuXHRDb21wb25lbnQsXG5cdEVsZW1lbnRSZWYsXG5cdElucHV0LFxuXHRWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdEb2NQYWdlUHJvY2Vzc29yIH0gZnJvbSAnQG5nLWRvYy9hcHAvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBOZ0RvY1Rvb2x0aXBEaXJlY3RpdmUgfSBmcm9tICdAbmctZG9jL3VpLWtpdCc7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ25nLWRvYy10b29sdGlwLXdyYXBwZXInLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxkaXZcblx0XHRcdGNsYXNzPVwiY29udGVudC1wcm9qZWN0aW9uXCJcblx0XHRcdFtuZ0RvY1Rvb2x0aXBdPVwiY29udGVudCA/PyAnJ1wiXG5cdFx0XHRbZGlzcGxheU9yaWdpbl09XCJ0b29sdGlwRWxlbWVudCA/PyBjb250ZW50UHJvamVjdGlvblwiXG5cdFx0XHRbcG9pbnRlck9yaWdpbl09XCJ0b29sdGlwRWxlbWVudCA/PyBjb250ZW50UHJvamVjdGlvblwiXG5cdFx0XHQjY29udGVudFByb2plY3Rpb24+XG5cdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0PC9kaXY+XG5cdGAsXG5cdHN0eWxlczogW1xuXHRcdGBcblx0XHRcdC5jb250ZW50LXByb2plY3Rpb24ge1xuXHRcdFx0XHRkaXNwbGF5OiB1bnNldDtcblx0XHRcdH1cblx0XHRgLFxuXHRdLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aW1wb3J0czogW05nRG9jVG9vbHRpcERpcmVjdGl2ZV0sXG59KVxuY2xhc3MgTmdEb2NUb29sdGlwV3JhcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXHRASW5wdXQoKVxuXHRjb250ZW50Pzogc3RyaW5nO1xuXG5cdHByb3RlY3RlZCB0b29sdGlwRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuXHRAVmlld0NoaWxkKCdjb250ZW50UHJvamVjdGlvbicsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiB0cnVlIH0pXG5cdHByaXZhdGUgY29udGVudFByb2plY3Rpb24/OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuXHRuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuY29udGVudFByb2plY3Rpb24pIHtcblx0XHRcdGNvbnN0IGVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsID1cblx0XHRcdFx0dGhpcy5jb250ZW50UHJvamVjdGlvbi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuZ0RvY1Rvb2x0aXBdJyk7XG5cblx0XHRcdHRoaXMudG9vbHRpcEVsZW1lbnQgPSBlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyBlbGVtZW50IDogbnVsbDtcblxuXHRcdFx0dGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBjb25zdCB0b29sdGlwUHJvY2Vzc29yOiBOZ0RvY1BhZ2VQcm9jZXNzb3I8TmdEb2NUb29sdGlwV3JhcHBlckNvbXBvbmVudD4gPSB7XG5cdGNvbXBvbmVudDogTmdEb2NUb29sdGlwV3JhcHBlckNvbXBvbmVudCxcblx0c2VsZWN0b3I6ICdbbmdEb2NUb29sdGlwXScsXG5cdGV4dHJhY3RPcHRpb25zOiAoZWxlbWVudDogRWxlbWVudCkgPT4gKHtcblx0XHRpbnB1dHM6IHtcblx0XHRcdGNvbnRlbnQ6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCduZ0RvY1Rvb2x0aXAnKSA/PyAnJyxcblx0XHR9LFxuXHRcdGNvbnRlbnQ6IFtbZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSldXSxcblx0fSksXG59O1xuIl19