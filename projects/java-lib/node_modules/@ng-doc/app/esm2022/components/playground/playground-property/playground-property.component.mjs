import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewChild, ViewContainerRef, } from '@angular/core';
import { FormControl } from '@angular/forms';
import { isPlaygroundProperty } from '@ng-doc/app/helpers';
import { NgDocSanitizeHtmlPipe } from '@ng-doc/app/pipes';
import { NgDocLabelComponent, NgDocTooltipDirective } from '@ng-doc/ui-kit';
import * as i0 from "@angular/core";
export class NgDocPlaygroundPropertyComponent {
    constructor() {
        this.name = '';
    }
    ngOnChanges({ property, control, typeControl, defaultValue }) {
        if ((property || control || typeControl || defaultValue) && this.property && this.typeControl) {
            this.propertyTypeControl?.destroy();
            this.propertyTypeControl = undefined;
            if (this.typeControl && this.propertyOutlet) {
                this.propertyTypeControl = this.propertyOutlet.createComponent(this.typeControl.control);
                this.propertyTypeControl.instance.name = this.name;
                this.propertyTypeControl.instance.description = this.tooltipContent;
                this.propertyTypeControl.instance.options = isPlaygroundProperty(this.property)
                    ? this.property.options
                    : undefined;
                this.propertyTypeControl.instance.default = this.defaultValue;
                this.propertyTypeControl.instance.isManual = isPlaygroundProperty(this.property)
                    ? this.property.isManual
                    : undefined;
                this.propertyTypeControl.instance.writeValue(this.control?.value);
                this.option = this.typeControl.options;
            }
            if (this.control) {
                this.control?.registerOnChange((value) => this.propertyTypeControl?.instance?.writeValue(value));
                this.propertyTypeControl?.instance.registerOnChange((value) => this.control?.setValue(value));
                this.propertyTypeControl?.instance.registerOnTouched(() => this.control?.markAsTouched());
            }
        }
    }
    get hasPropertyControl() {
        return !!this.propertyTypeControl;
    }
    get tooltipContent() {
        return this.property && isPlaygroundProperty(this.property)
            ? this.property.description ?? ''
            : '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocPlaygroundPropertyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocPlaygroundPropertyComponent, isStandalone: true, selector: "ng-doc-playground-property", inputs: { name: "name", property: "property", typeControl: "typeControl", control: "control", defaultValue: "defaultValue" }, host: { properties: { "attr.data-has-property-control": "this.hasPropertyControl" } }, viewQueries: [{ propertyName: "propertyOutlet", first: true, predicate: ["propertyOutlet"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: "<label [ng-doc-label]=\"option?.hideLabel ? '' : labelContent\">\n\t<ng-template #labelContent>\n\t\t<span\n\t\t\t[ngDocTooltip]=\"tooltipTemplate\"\n\t\t\t[canOpen]=\"!!tooltipContent\"\n\t\t\t[positions]=\"['left-center', 'top-right', 'bottom-right']\"\n\t\t\t>{{ name }}</span\n\t\t>\n\t\t<ng-template #tooltipTemplate>\n\t\t\t<div [innerHTML]=\"tooltipContent | ngDocSanitizeHtml\"></div>\n\t\t</ng-template>\n\t</ng-template>\n\t<ng-container #propertyOutlet></ng-container>\n</label>\n", styles: [":host{display:block}:host[data-has-property-control=false]{display:none}\n"], dependencies: [{ kind: "component", type: NgDocLabelComponent, selector: "label[ng-doc-label]", inputs: ["ng-doc-label", "align"] }, { kind: "directive", type: NgDocTooltipDirective, selector: "[ngDocTooltip]", inputs: ["ngDocTooltip", "delay", "displayOrigin", "pointerOrigin", "positions", "canOpen", "panelClass", "minHeight", "maxHeight", "height", "minWidth", "maxWidth", "width"], outputs: ["beforeOpen", "afterOpen", "beforeClose", "afterClose"], exportAs: ["ngDocTooltip"] }, { kind: "pipe", type: NgDocSanitizeHtmlPipe, name: "ngDocSanitizeHtml" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocPlaygroundPropertyComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-playground-property', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgDocLabelComponent, NgDocTooltipDirective, NgDocSanitizeHtmlPipe], template: "<label [ng-doc-label]=\"option?.hideLabel ? '' : labelContent\">\n\t<ng-template #labelContent>\n\t\t<span\n\t\t\t[ngDocTooltip]=\"tooltipTemplate\"\n\t\t\t[canOpen]=\"!!tooltipContent\"\n\t\t\t[positions]=\"['left-center', 'top-right', 'bottom-right']\"\n\t\t\t>{{ name }}</span\n\t\t>\n\t\t<ng-template #tooltipTemplate>\n\t\t\t<div [innerHTML]=\"tooltipContent | ngDocSanitizeHtml\"></div>\n\t\t</ng-template>\n\t</ng-template>\n\t<ng-container #propertyOutlet></ng-container>\n</label>\n", styles: [":host{display:block}:host[data-has-property-control=false]{display:none}\n"] }]
        }], propDecorators: { name: [{
                type: Input
            }], property: [{
                type: Input
            }], typeControl: [{
                type: Input
            }], control: [{
                type: Input
            }], defaultValue: [{
                type: Input
            }], propertyOutlet: [{
                type: ViewChild,
                args: ['propertyOutlet', { read: ViewContainerRef, static: true }]
            }], hasPropertyControl: [{
                type: HostBinding,
                args: ['attr.data-has-property-control']
            }] } });
//# sourceMappingURL=data:application/json;base64,