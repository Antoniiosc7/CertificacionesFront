import { ChangeDetectorRef, Directive, inject, Input, } from '@angular/core';
import { extractFunctionDefaults } from '@ng-doc/core';
import { Subject, take } from 'rxjs';
import { NgDocPlaygroundComponent } from './playground.component';
import * as i0 from "@angular/core";
/**
 * Base class for playgrounds components.
 */
export class NgDocBasePlayground {
    static { this.selector = 'unknown'; }
    constructor(playgroundInstance) {
        this.playgroundInstance = playgroundInstance;
        this.properties = {};
        this.actionData = {};
        this.content = {};
        this.defaultValues = {};
        this.reattached = new Subject();
        this.playgroundContainer = inject(NgDocPlaygroundComponent);
        this.changeDetectorRef = inject(ChangeDetectorRef);
        this.changeDetectorRef.detach();
    }
    get onReattached() {
        return this.reattached.pipe(take(1));
    }
    ngOnInit() {
        /*
         * Extract default values from playground properties. We do this in `ngOnInit` because in this case
         * input values provided from the template are not initialized yet, and we can read default values instead.
         */
        if (this.playground) {
            this.defaultValues = Object.keys(this.playground).reduce((values, key) => {
                if (this.playground) {
                    try {
                        values[key] =
                            // @ts-expect-error we do not know the type of the playground
                            typeof this.playground[key] === 'function'
                                ? // @ts-expect-error we do not know the type of the playground
                                    this.playground[key]()
                                : // @ts-expect-error we do not know the type of the playground
                                    this.playground[key];
                    }
                    catch (e) {
                        // we do catch here because some of the playground properties can be getters and throw an error
                    }
                }
                return values;
            }, {});
        }
        else if (this.playgroundInstance) {
            const defaults = extractFunctionDefaults(this.playgroundInstance.prototype.transform);
            this.defaultValues = Object.keys(this.playgroundContainer.properties ?? {}).reduce((def, key, i) => {
                // we do +1 because the first argument is the `value` of the transform function
                def[key] = defaults[i + 1];
                return def;
            }, {});
        }
        else {
            throw new Error('Playground is not defined or initialized');
        }
        if (!this.playgroundContainer.defaultValues) {
            this.playgroundContainer.defaultValues = this.defaultValues;
        }
        /*
             This is a hack just to wait for the playground container to be initialized and only then
             attach the change detector to have correct inputs values.
         */
        Promise.resolve().then(() => {
            this.changeDetectorRef.reattach();
            this.reattached.next();
        });
    }
    get data() {
        return Object.assign({}, this.configData, this.actionData);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocBasePlayground, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocBasePlayground, inputs: { properties: "properties", actionData: "actionData", content: "content" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocBasePlayground, decorators: [{
            type: Directive
        }], ctorParameters: () => [{ type: undefined }], propDecorators: { properties: [{
                type: Input
            }], actionData: [{
                type: Input
            }], content: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,