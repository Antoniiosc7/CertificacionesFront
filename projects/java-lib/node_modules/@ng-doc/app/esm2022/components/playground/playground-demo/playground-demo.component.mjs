import { __decorate, __metadata } from "tslib";
import { AsyncPipe } from '@angular/common';
import { ChangeDetectionStrategy, Component, Injector, Input, ViewChild, ViewContainerRef, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { NgDocDemoDisplayerComponent } from '@ng-doc/app/components/demo-displayer';
import { formatHtml } from '@ng-doc/app/helpers';
import { getPlaygroundDemoToken } from '@ng-doc/app/providers/playground-demo';
import { stringify } from '@ng-doc/core';
import { buildPlaygroundDemoPipeTemplate, buildPlaygroundDemoTemplate, } from '@ng-doc/core/helpers/build-playground-demo-template';
import { objectKeys } from '@ng-doc/core/helpers/object-keys';
import { NgDocLetDirective, NgDocSmoothResizeComponent } from '@ng-doc/ui-kit';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { from, of, Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
let NgDocPlaygroundDemoComponent = class NgDocPlaygroundDemoComponent {
    constructor(injector) {
        this.injector = injector;
        this.id = '';
        this.pipeName = '';
        this.selector = '';
        this.recreateDemo = false;
        this.expanded = false;
        this.code = of('');
        this.unsubscribe$ = new Subject();
    }
    ngOnChanges({ form, id }) {
        if (form || id) {
            this.unsubscribe$.next();
            const demoInjector = getPlaygroundDemoToken(this.id);
            if (demoInjector) {
                const demos = this.injector.get(demoInjector, []);
                this.playgroundDemo = demos.find((demo) => demo.selector === this.selector || demo.selector === this.pipeName);
            }
            this.updateDemo();
            this.form?.valueChanges
                .pipe(takeUntil(this.unsubscribe$), untilDestroyed(this), startWith(this.form?.value))
                .subscribe((data) => this.updateDemo(data));
        }
    }
    updateDemo(data) {
        if (this.recreateDemo || !this.demoRef) {
            this.createDemo();
        }
        if (data) {
            this.demoRef?.setInput('properties', data.properties ?? {});
            this.demoRef?.setInput('content', data.content ?? {});
            this.demoRef?.setInput('actionData', this.configuration?.data ?? {});
            if (this.recreateDemo) {
                this.demoRef?.instance.onReattached.subscribe(() => {
                    this.demoRef?.changeDetectorRef.detectChanges();
                });
            }
        }
        this.updateCodeView();
    }
    createDemo() {
        if (this.playgroundDemo) {
            this.demoRef?.destroy();
            this.demoRef = this.demoOutlet?.createComponent(this.playgroundDemo);
            this.demoRef?.changeDetectorRef.markForCheck();
        }
    }
    updateCodeView() {
        const template = this.pipeName
            ? buildPlaygroundDemoPipeTemplate(this.configuration?.template ?? '', this.pipeName, this.getActiveContent(), this.getPipeActiveInputs())
            : buildPlaygroundDemoTemplate(this.configuration?.template ?? '', this.selector, this.getActiveContent(), this.getActiveInputs());
        this.code = from(formatHtml(template));
    }
    getActiveContent() {
        const formData = this.form?.controls.content.value ?? {};
        return objectKeys(formData).reduce((result, key) => {
            result[key] = formData[key] ? this.configuration?.content?.[key].template ?? '' : '';
            return result;
        }, {});
    }
    getActiveInputs() {
        const formData = this.form?.controls.properties.value ?? {};
        return objectKeys(formData).reduce((result, key) => {
            const inputName = this.properties?.[key]?.inputName ?? key;
            const value = formData[key];
            const property = this.demoRef?.instance?.defaultValues[key];
            if (property !== value) {
                result[inputName] = stringify(value).replace(/"/g, `'`);
            }
            return result;
        }, {});
    }
    getPipeActiveInputs() {
        const formData = this.form?.controls.properties.value ?? {};
        let changedInputIndex = -1;
        return objectKeys(formData)
            .map((key, i) => {
            const value = formData[key];
            const defaultValue = this.demoRef?.instance?.defaultValues[key];
            if (defaultValue !== value) {
                changedInputIndex = i;
            }
            return key;
        })
            .slice(0, changedInputIndex + 1)
            .reduce((result, key) => {
            result[key] = stringify(formData[key]).replace(/"/g, `'`);
            return result;
        }, {});
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocPlaygroundDemoComponent, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocPlaygroundDemoComponent, isStandalone: true, selector: "ng-doc-playground-demo", inputs: { id: "id", pipeName: "pipeName", selector: "selector", configuration: "configuration", properties: "properties", recreateDemo: "recreateDemo", form: "form", expanded: "expanded" }, viewQueries: [{ propertyName: "demoOutlet", first: true, predicate: ["demoOutlet"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: "<ng-doc-smooth-resize *ngDocLet=\"code | async as codeContent\" [trigger]=\"codeContent\">\n\t<ng-doc-demo-displayer\n\t\t[code]=\"codeContent ?? ''\"\n\t\t[border]=\"false\"\n\t\t[expanded]=\"expanded\"\n\t\tlanguage=\"html\">\n\t\t<ng-container #demoOutlet></ng-container>\n\t</ng-doc-demo-displayer>\n</ng-doc-smooth-resize>\n", styles: [":host{display:block;border:var(--ng-doc-demo-displayer-border);border-radius:var(--ng-doc-demo-displayer-border-radius);overflow:hidden}:host:not(:last-child){border-bottom:0;border-bottom-left-radius:0;border-bottom-right-radius:0}:host:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}\n"], dependencies: [{ kind: "component", type: NgDocDemoDisplayerComponent, selector: "ng-doc-demo-displayer", inputs: ["codeContent", "code", "language", "container", "border", "expanded"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "component", type: NgDocSmoothResizeComponent, selector: "ng-doc-smooth-resize", inputs: ["trigger", "animateOpacity"] }, { kind: "directive", type: NgDocLetDirective, selector: "[ngDocLet]", inputs: ["ngDocLet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
};
NgDocPlaygroundDemoComponent = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [Injector])
], NgDocPlaygroundDemoComponent);
export { NgDocPlaygroundDemoComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocPlaygroundDemoComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-playground-demo', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgDocDemoDisplayerComponent, AsyncPipe, NgDocSmoothResizeComponent, NgDocLetDirective], template: "<ng-doc-smooth-resize *ngDocLet=\"code | async as codeContent\" [trigger]=\"codeContent\">\n\t<ng-doc-demo-displayer\n\t\t[code]=\"codeContent ?? ''\"\n\t\t[border]=\"false\"\n\t\t[expanded]=\"expanded\"\n\t\tlanguage=\"html\">\n\t\t<ng-container #demoOutlet></ng-container>\n\t</ng-doc-demo-displayer>\n</ng-doc-smooth-resize>\n", styles: [":host{display:block;border:var(--ng-doc-demo-displayer-border);border-radius:var(--ng-doc-demo-displayer-border-radius);overflow:hidden}:host:not(:last-child){border-bottom:0;border-bottom-left-radius:0;border-bottom-right-radius:0}:host:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}\n"] }]
        }], ctorParameters: () => [{ type: i0.Injector }], propDecorators: { id: [{
                type: Input
            }], pipeName: [{
                type: Input
            }], selector: [{
                type: Input
            }], configuration: [{
                type: Input
            }], properties: [{
                type: Input
            }], recreateDemo: [{
                type: Input
            }], form: [{
                type: Input
            }], expanded: [{
                type: Input
            }], demoOutlet: [{
                type: ViewChild,
                args: ['demoOutlet', { static: true, read: ViewContainerRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,