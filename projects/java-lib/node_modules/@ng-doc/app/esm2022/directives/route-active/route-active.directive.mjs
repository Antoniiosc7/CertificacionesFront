import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { asArray } from '@ng-doc/core/helpers/as-array';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
let NgDocRouteActiveDirective = class NgDocRouteActiveDirective {
    constructor(elementRef, router, renderer) {
        this.elementRef = elementRef;
        this.router = router;
        this.renderer = renderer;
        this.link = '';
        this.activeClass = [];
        this.matchOptions = {
            fragment: 'exact',
            paths: 'subset',
            queryParams: 'exact',
            matrixParams: 'exact',
        };
        this.router.events
            .pipe(filter((event) => event instanceof NavigationEnd), map(() => this.router.isActive(this.link, this.matchOptions)), distinctUntilChanged(), untilDestroyed(this))
            .subscribe((isActive) => {
            isActive
                ? asArray(this.activeClass).forEach((cls) => this.renderer.addClass(this.elementRef.nativeElement, cls))
                : asArray(this.activeClass).forEach((cls) => this.renderer.removeClass(this.elementRef.nativeElement, cls));
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocRouteActiveDirective, deps: [{ token: i0.ElementRef }, { token: i1.Router }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocRouteActiveDirective, isStandalone: true, selector: "[ngDocRouteActive]", inputs: { link: ["ngDocRouteActive", "link"], activeClass: "activeClass", matchOptions: "matchOptions" }, ngImport: i0 }); }
};
NgDocRouteActiveDirective = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [ElementRef,
        Router,
        Renderer2])
], NgDocRouteActiveDirective);
export { NgDocRouteActiveDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocRouteActiveDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngDocRouteActive]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Router }, { type: i0.Renderer2 }], propDecorators: { link: [{
                type: Input,
                args: ['ngDocRouteActive']
            }], activeClass: [{
                type: Input
            }], matchOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUtYWN0aXZlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYXBwL2RpcmVjdGl2ZXMvcm91dGUtYWN0aXZlL3JvdXRlLWFjdGl2ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUErQixhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDckYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBTzVELElBQU0seUJBQXlCLEdBQS9CLE1BQU0seUJBQXlCO0lBZXJDLFlBQ2tCLFVBQW1DLEVBQ25DLE1BQWMsRUFDZCxRQUFtQjtRQUZuQixlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUNuQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQWhCckMsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUdsQixnQkFBVyxHQUFzQixFQUFFLENBQUM7UUFHcEMsaUJBQVksR0FBeUI7WUFDcEMsUUFBUSxFQUFFLE9BQU87WUFDakIsS0FBSyxFQUFFLFFBQVE7WUFDZixXQUFXLEVBQUUsT0FBTztZQUNwQixZQUFZLEVBQUUsT0FBTztTQUNyQixDQUFDO1FBT0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNO2FBQ2hCLElBQUksQ0FDSixNQUFNLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUFDLEtBQUssWUFBWSxhQUFhLENBQUMsRUFDeEQsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQzdELG9CQUFvQixFQUFFLEVBQ3RCLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FDcEI7YUFDQSxTQUFTLENBQUMsQ0FBQyxRQUFpQixFQUFFLEVBQUU7WUFDaEMsUUFBUTtnQkFDUCxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FDekQ7Z0JBQ0gsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FDbEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQzVELENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OEdBcENXLHlCQUF5QjtrR0FBekIseUJBQXlCOztBQUF6Qix5QkFBeUI7SUFEckMsWUFBWSxFQUFFO3FDQWlCZ0IsVUFBVTtRQUNkLE1BQU07UUFDSixTQUFTO0dBbEJ6Qix5QkFBeUIsQ0FxQ3JDOzsyRkFyQ1kseUJBQXlCO2tCQUxyQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFVBQVUsRUFBRSxJQUFJO2lCQUNoQjs0SEFJQSxJQUFJO3NCQURILEtBQUs7dUJBQUMsa0JBQWtCO2dCQUl6QixXQUFXO3NCQURWLEtBQUs7Z0JBSU4sWUFBWTtzQkFEWCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFdmVudCwgSXNBY3RpdmVNYXRjaE9wdGlvbnMsIE5hdmlnYXRpb25FbmQsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBhc0FycmF5IH0gZnJvbSAnQG5nLWRvYy9jb3JlL2hlbHBlcnMvYXMtYXJyYXknO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tuZ0RvY1JvdXRlQWN0aXZlXScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG59KVxuQFVudGlsRGVzdHJveSgpXG5leHBvcnQgY2xhc3MgTmdEb2NSb3V0ZUFjdGl2ZURpcmVjdGl2ZSB7XG5cdEBJbnB1dCgnbmdEb2NSb3V0ZUFjdGl2ZScpXG5cdGxpbms6IHN0cmluZyA9ICcnO1xuXG5cdEBJbnB1dCgpXG5cdGFjdGl2ZUNsYXNzOiBzdHJpbmcgfCBzdHJpbmdbXSA9IFtdO1xuXG5cdEBJbnB1dCgpXG5cdG1hdGNoT3B0aW9uczogSXNBY3RpdmVNYXRjaE9wdGlvbnMgPSB7XG5cdFx0ZnJhZ21lbnQ6ICdleGFjdCcsXG5cdFx0cGF0aHM6ICdzdWJzZXQnLFxuXHRcdHF1ZXJ5UGFyYW1zOiAnZXhhY3QnLFxuXHRcdG1hdHJpeFBhcmFtczogJ2V4YWN0Jyxcblx0fTtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgcm91dGVyOiBSb3V0ZXIsXG5cdFx0cHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjogUmVuZGVyZXIyLFxuXHQpIHtcblx0XHR0aGlzLnJvdXRlci5ldmVudHNcblx0XHRcdC5waXBlKFxuXHRcdFx0XHRmaWx0ZXIoKGV2ZW50OiBFdmVudCkgPT4gZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSxcblx0XHRcdFx0bWFwKCgpID0+IHRoaXMucm91dGVyLmlzQWN0aXZlKHRoaXMubGluaywgdGhpcy5tYXRjaE9wdGlvbnMpKSxcblx0XHRcdFx0ZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcblx0XHRcdFx0dW50aWxEZXN0cm95ZWQodGhpcyksXG5cdFx0XHQpXG5cdFx0XHQuc3Vic2NyaWJlKChpc0FjdGl2ZTogYm9vbGVhbikgPT4ge1xuXHRcdFx0XHRpc0FjdGl2ZVxuXHRcdFx0XHRcdD8gYXNBcnJheSh0aGlzLmFjdGl2ZUNsYXNzKS5mb3JFYWNoKChjbHM6IHN0cmluZykgPT5cblx0XHRcdFx0XHRcdFx0dGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY2xzKSxcblx0XHRcdFx0XHQgIClcblx0XHRcdFx0XHQ6IGFzQXJyYXkodGhpcy5hY3RpdmVDbGFzcykuZm9yRWFjaCgoY2xzOiBzdHJpbmcpID0+XG5cdFx0XHRcdFx0XHRcdHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGNscyksXG5cdFx0XHRcdFx0ICApO1xuXHRcdFx0fSk7XG5cdH1cbn1cbiJdfQ==