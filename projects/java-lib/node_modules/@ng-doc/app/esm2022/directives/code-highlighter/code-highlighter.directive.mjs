import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
import highlight from 'highlight.js/lib/core';
import xml from 'highlight.js/lib/languages/xml';
import * as i0 from "@angular/core";
highlight.registerLanguage('html', xml);
highlight.registerLanguage('xml', xml);
export class NgDocCodeHighlighterDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.code = '';
        this.html = '';
        this.language = 'typescript';
        this.highlightJsClass = true;
    }
    ngOnChanges() {
        if (this.code) {
            const result = highlight.highlight(this.code, { language: this.language });
            this.elementRef.nativeElement.innerHTML = result.value ?? this.html;
        }
        else {
            this.elementRef.nativeElement.innerHTML = this.html;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocCodeHighlighterDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocCodeHighlighterDirective, isStandalone: true, selector: "code[ngDocCodeHighlighter]", inputs: { code: ["ngDocCodeHighlighter", "code"], html: "html", language: "language" }, host: { properties: { "class.hljs": "this.highlightJsClass" } }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocCodeHighlighterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'code[ngDocCodeHighlighter]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { code: [{
                type: Input,
                args: ['ngDocCodeHighlighter']
            }], html: [{
                type: Input
            }], language: [{
                type: Input
            }], highlightJsClass: [{
                type: HostBinding,
                args: ['class.hljs']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1oaWdobGlnaHRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FwcC9kaXJlY3RpdmVzL2NvZGUtaGlnaGxpZ2h0ZXIvY29kZS1oaWdobGlnaHRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUVyRixPQUFPLFNBQVMsTUFBTSx1QkFBdUIsQ0FBQztBQUM5QyxPQUFPLEdBQUcsTUFBTSxnQ0FBZ0MsQ0FBQzs7QUFFakQsU0FBUyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN4QyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBTXZDLE1BQU0sT0FBTyw2QkFBNkI7SUFhekMsWUFBNkIsVUFBbUM7UUFBbkMsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFYaEUsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUdsQixTQUFJLEdBQVcsRUFBRSxDQUFDO1FBR2xCLGFBQVEsR0FBVyxZQUFZLENBQUM7UUFHdEIscUJBQWdCLEdBQVksSUFBSSxDQUFDO0lBRXdCLENBQUM7SUFFcEUsV0FBVztRQUNWLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2YsTUFBTSxNQUFNLEdBQW9CLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUU1RixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3JFLENBQUM7YUFBTSxDQUFDO1lBQ1AsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckQsQ0FBQztJQUNGLENBQUM7OEdBdkJXLDZCQUE2QjtrR0FBN0IsNkJBQTZCOzsyRkFBN0IsNkJBQTZCO2tCQUp6QyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLFVBQVUsRUFBRSxJQUFJO2lCQUNoQjsrRUFHQSxJQUFJO3NCQURILEtBQUs7dUJBQUMsc0JBQXNCO2dCQUk3QixJQUFJO3NCQURILEtBQUs7Z0JBSU4sUUFBUTtzQkFEUCxLQUFLO2dCQUlJLGdCQUFnQjtzQkFEekIsV0FBVzt1QkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSGlnaGxpZ2h0UmVzdWx0IH0gZnJvbSAnaGlnaGxpZ2h0LmpzJztcbmltcG9ydCBoaWdobGlnaHQgZnJvbSAnaGlnaGxpZ2h0LmpzL2xpYi9jb3JlJztcbmltcG9ydCB4bWwgZnJvbSAnaGlnaGxpZ2h0LmpzL2xpYi9sYW5ndWFnZXMveG1sJztcblxuaGlnaGxpZ2h0LnJlZ2lzdGVyTGFuZ3VhZ2UoJ2h0bWwnLCB4bWwpO1xuaGlnaGxpZ2h0LnJlZ2lzdGVyTGFuZ3VhZ2UoJ3htbCcsIHhtbCk7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ2NvZGVbbmdEb2NDb2RlSGlnaGxpZ2h0ZXJdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgTmdEb2NDb2RlSGlnaGxpZ2h0ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXHRASW5wdXQoJ25nRG9jQ29kZUhpZ2hsaWdodGVyJylcblx0Y29kZTogc3RyaW5nID0gJyc7XG5cblx0QElucHV0KClcblx0aHRtbDogc3RyaW5nID0gJyc7XG5cblx0QElucHV0KClcblx0bGFuZ3VhZ2U6IHN0cmluZyA9ICd0eXBlc2NyaXB0JztcblxuXHRASG9zdEJpbmRpbmcoJ2NsYXNzLmhsanMnKVxuXHRwcm90ZWN0ZWQgaGlnaGxpZ2h0SnNDbGFzczogYm9vbGVhbiA9IHRydWU7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pikge31cblxuXHRuZ09uQ2hhbmdlcygpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5jb2RlKSB7XG5cdFx0XHRjb25zdCByZXN1bHQ6IEhpZ2hsaWdodFJlc3VsdCA9IGhpZ2hsaWdodC5oaWdobGlnaHQodGhpcy5jb2RlLCB7IGxhbmd1YWdlOiB0aGlzLmxhbmd1YWdlIH0pO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSByZXN1bHQudmFsdWUgPz8gdGhpcy5odG1sO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLmh0bWw7XG5cdFx0fVxuXHR9XG59XG4iXX0=