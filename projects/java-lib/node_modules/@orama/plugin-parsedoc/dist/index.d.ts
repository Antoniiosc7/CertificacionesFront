/// <reference types="node" />
import { Document, Orama } from '@orama/orama';
import { Properties } from 'hast';
export type MergeStrategy = 'merge' | 'split' | 'both';
export declare const defaultHtmlSchema: {
    readonly type: "string";
    readonly content: "string";
    readonly path: "string";
};
export interface DefaultSchemaElement extends Document {
    type: string;
    content: string;
    path: string;
    properties?: Properties;
}
interface PopulateFromGlobOptions {
    transformFn?: TransformFn;
    mergeStrategy?: MergeStrategy;
}
type PopulateOptions = PopulateFromGlobOptions & {
    basePath?: string;
};
type FileType = 'html' | 'md';
export declare const populateFromGlob: (db: Orama, pattern: string, options?: PopulateFromGlobOptions) => Promise<void>;
export declare const populate: (db: Orama, data: Buffer | string, fileType: FileType, options?: PopulateOptions) => Promise<string[]>;
export interface NodeContent {
    tag: string;
    raw: string;
    content: string;
    properties?: Properties;
}
export type TransformFn = (node: NodeContent) => NodeContent;
export {};
