{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Document, Language, Orama, Result, Results, Schema, search, SearchParams } from '@orama/orama'\n\nexport interface Position {\n  start: number\n  length: number\n}\n\nexport type OramaWithHighlight = Orama & {\n  data: { positions: Record<string, Record<string, Record<string, Position[]>>> }\n}\n\nexport type SearchResultWithHighlight = Results & {\n  hits: (Result & { positions: Position[] })[]\n}\n\nexport async function afterInsert(orama: Orama | OramaWithHighlight, id: string): Promise<void> {\n  if (!('positions' in orama.data)) {\n    Object.assign(orama.data, { positions: {} })\n  }\n\n  await recursivePositionInsertion(\n    orama as OramaWithHighlight,\n    (await orama.documentsStore.get(orama.data.docs, id))!,\n    id\n  )\n}\n\nconst wordRegEx = /[\\p{L}0-9_'-]+/gimu\n\nasync function recursivePositionInsertion(\n  orama: OramaWithHighlight,\n  doc: Document,\n  id: string,\n  prefix = '',\n  schema: Schema = orama.schema\n): Promise<void> {\n  orama.data.positions[id] = Object.create(null)\n  for (const key of Object.keys(doc)) {\n    const isNested = typeof doc[key] === 'object'\n    const isSchemaNested = typeof schema[key] === 'object'\n    const propName = `${prefix}${key}`\n    if (isNested && key in schema && isSchemaNested) {\n      recursivePositionInsertion(orama, doc[key] as Document, id, propName + '.', schema[key] as Schema)\n    }\n    if (!(typeof doc[key] === 'string' && key in schema && !isSchemaNested)) {\n      continue\n    }\n    orama.data.positions[id][propName] = Object.create(null)\n    const text = doc[key] as string\n    let regExResult\n    while ((regExResult = wordRegEx.exec(text)) !== null) {\n      const word = regExResult[0].toLowerCase()\n      const key = `${orama.tokenizer.language}:${word}`\n      let token: string\n      if (orama.tokenizer.normalizationCache.has(key)) {\n        token = orama.tokenizer.normalizationCache.get(key)!\n        /* c8 ignore next 4 */\n      } else {\n        ;[token] = await orama.tokenizer.tokenize(word)\n        orama.tokenizer.normalizationCache.set(key, token)\n      }\n      if (!Array.isArray(orama.data.positions[id][propName][token])) {\n        orama.data.positions[id][propName][token] = []\n      }\n      const start = regExResult.index\n      const length = regExResult[0].length\n      orama.data.positions[id][propName][token].push({ start, length })\n    }\n  }\n}\n\nexport async function searchWithHighlight(\n  orama: OramaWithHighlight,\n  params: SearchParams,\n  language?: Language\n): Promise<SearchResultWithHighlight> {\n  const result = await search(orama, params, language)\n  const queryTokens: string[] = await orama.tokenizer.tokenize(params.term ?? '', language)\n  const hits = result.hits.map(hit =>\n    Object.assign(hit, {\n      positions: Object.fromEntries(\n        Object.entries(orama.data.positions[hit.id]).map(([propName, tokens]) => [\n          propName,\n          Object.fromEntries(\n            Object.entries(tokens).filter(([token]) => queryTokens.find(queryToken => token.startsWith(queryToken)))\n          )\n        ])\n      )\n    })\n  )\n\n  result.hits = hits\n\n  // @ts-ignore\n  return result\n}\n"],"names":["search","afterInsert","orama","id","data","Object","assign","positions","recursivePositionInsertion","documentsStore","get","docs","wordRegEx","doc","prefix","schema","create","key","keys","isNested","isSchemaNested","propName","text","regExResult","exec","word","toLowerCase","tokenizer","language","token","normalizationCache","has","tokenize","set","Array","isArray","start","index","length","push","searchWithHighlight","params","result","queryTokens","term","hits","map","hit","fromEntries","entries","tokens","filter","find","queryToken","startsWith"],"mappings":"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"}