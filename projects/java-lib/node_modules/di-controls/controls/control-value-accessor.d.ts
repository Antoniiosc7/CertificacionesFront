import { ChangeDetectorRef, ElementRef, Renderer2, Signal, WritableSignal } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * Base implementation of ControlValueAccessor
 */
export declare abstract class DIControlValueAccessor<T> implements ControlValueAccessor {
    protected readonly incomingUpdate?: ((value: T | null) => void) | undefined;
    protected readonly model: Signal<T | null>;
    protected readonly ngControl: NgControl | null;
    protected readonly elementRef: ElementRef<HTMLElement>;
    protected readonly changeDetectorRef: ChangeDetectorRef;
    protected readonly renderer: Renderer2;
    protected readonly disabledValue: WritableSignal<boolean>;
    protected touch: () => void;
    protected change: (value: T | null) => void;
    protected constructor(incomingUpdate?: ((value: T | null) => void) | undefined);
    /**
     * Returns true if the control is not empty.
     */
    get hasValue(): boolean;
    /**
     * Returns true if the control is disabled.
     */
    get disabled(): boolean;
    set disabled(isDisabled: boolean);
    /**
     * Method is called by the forms API.
     *
     * @param fn - callback function to register on value change
     * @internal
     */
    registerOnChange(fn: (value: T | null) => void): void;
    /**
     * Method is called by the forms API.
     *
     * @param fn - callback function to register on touch
     * @internal
     */
    registerOnTouched(fn: () => void): void;
    /**
     * Method is called by the forms API to write to the view when programmatic changes from model to view are requested.
     *
     * @param obj - new value
     * @internal
     */
    writeValue(obj: T | null): void;
    /**
     * Updates the model. Use this method to update model from your Control
     *
     * @param value - new value
     */
    updateModel(value: T | null): void;
    /**
     * Method is called by the forms API to write to the view when programmatic changes from model to view are requested.
     *
     * @param isDisabled - new value
     * @internal
     */
    setDisabledState(isDisabled: boolean): void;
    private update;
    static ɵfac: i0.ɵɵFactoryDeclaration<DIControlValueAccessor<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DIControlValueAccessor<any>, never, never, { "disabled": { "alias": "disabled"; "required": false; }; }, {}, never, never, false, never>;
}
