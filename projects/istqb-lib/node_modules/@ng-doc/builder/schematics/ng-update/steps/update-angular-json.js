"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateAngularJson = updateAngularJson;
const workspace_1 = require("@schematics/angular/utility/workspace");
const utils_1 = require("../../utils");
/**
 *
 */
function updateAngularJson() {
    return (0, workspace_1.updateWorkspace)((workspace) => {
        var _a, _b;
        const project = (0, utils_1.getProject)(workspace);
        if (!project) {
            return;
        }
        const buildTarget = project.targets.get('build');
        if (buildTarget) {
            buildTarget.builder = '@ng-doc/builder:application';
            if (buildTarget.options) {
                buildTarget.options['browser'] = buildTarget.options['main'];
                delete buildTarget.options['main'];
                if (buildTarget.options['polyfills']) {
                    buildTarget.options['polyfills'] = [buildTarget.options['polyfills']];
                }
            }
            Object.keys((_a = buildTarget.configurations) !== null && _a !== void 0 ? _a : {}).forEach((key) => {
                if (buildTarget.configurations) {
                    const configuration = buildTarget.configurations[key];
                    if (configuration) {
                        if ('buildOptimizer' in configuration) {
                            delete configuration['buildOptimizer'];
                        }
                        if ('vendorChunk' in configuration) {
                            delete configuration['vendorChunk'];
                        }
                    }
                }
            });
        }
        for (const target of project.targets.values()) {
            Object.keys((_b = target.configurations) !== null && _b !== void 0 ? _b : {}).forEach((key) => {
                if (target.configurations) {
                    const configuration = target.configurations[key];
                    if (configuration) {
                        if ('browserTarget' in configuration) {
                            configuration['buildTarget'] = configuration['browserTarget'];
                            delete configuration['browserTarget'];
                        }
                    }
                }
            });
            if (target.options) {
                if ('browserTarget' in target.options) {
                    target.options['buildTarget'] = target.options['browserTarget'];
                    delete target.options['browserTarget'];
                }
                if ('assets' in target.options) {
                    const assets = target.options['assets'];
                    target.options['assets'] = assets.map((asset) => {
                        if (asset &&
                            typeof asset === 'object' &&
                            'input' in asset &&
                            asset.input.startsWith('.ng-doc')) {
                            return Object.assign(Object.assign({}, asset), { input: asset.input.replace('.ng-doc', 'ng-doc') });
                        }
                        return asset;
                    });
                }
            }
        }
    });
}
//# sourceMappingURL=update-angular-json.js.map