"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = generate;
const strings_1 = require("@angular-devkit/core/src/utils/strings");
const schematics_1 = require("@angular-devkit/schematics");
const path_1 = require("path");
const variables_1 = require("../../engine/variables");
const posix_1 = require("../../helpers/posix");
const utils_1 = require("../utils");
const extract_default_export_name_1 = require("../utils/extract-default-export-name");
const demoTemplates = ['ng-doc.module.ts.template'];
/**
 * Generates a NgDocPage
 * @param {NgDocBuildPageSchema} options - The options to generate the page
 * @returns {Rule} Angular Schematic Rule
 */
function generate(options) {
    return (host) => {
        var _a, _b, _c;
        options.title = (0, utils_1.getTitle)(options.title);
        const pageName = (_a = options.name) !== null && _a !== void 0 ? _a : (0, strings_1.classify)(options.title + 'Page');
        (0, utils_1.varNameValidation)(pageName);
        const execPath = (_b = options === null || options === void 0 ? void 0 : options.path) !== null && _b !== void 0 ? _b : '';
        const pageFolder = (0, strings_1.dasherize)((_c = options.name) !== null && _c !== void 0 ? _c : '').replace(/-page$/, '') || (0, strings_1.dasherize)(options.title);
        const path = (0, path_1.join)(execPath, `/${pageFolder}`);
        const closestCategoryFile = (options.category && (0, utils_1.findClosestFile)(host, execPath, variables_1.CATEGORY_NAME)) || null;
        const categoryConstantName = (options.category &&
            closestCategoryFile &&
            (0, extract_default_export_name_1.extractDefaultExportName)(host, closestCategoryFile)) ||
            null;
        const categoryImportPath = (closestCategoryFile && (0, posix_1.posix)((0, path_1.relative)(path, closestCategoryFile)).replace(/.ts$/, '')) ||
            null;
        return (0, schematics_1.chain)([
            (0, schematics_1.mergeWith)((0, schematics_1.apply)((0, schematics_1.url)('./files'), [
                (0, schematics_1.filter)((path) => (demoTemplates.includes((0, path_1.basename)(path)) && options.module) ||
                    !demoTemplates.includes((0, path_1.basename)(path))),
                (0, schematics_1.applyTemplates)(Object.assign(Object.assign({}, options), { categoryName: categoryConstantName, importPath: categoryImportPath, pageName, keyword: options.keyword })),
                (0, schematics_1.move)(path),
                (0, schematics_1.forEach)((fileEntry) => {
                    if (host.exists(fileEntry.path)) {
                        host.overwrite(fileEntry.path, fileEntry.content);
                    }
                    return fileEntry;
                }),
            ]), schematics_1.MergeStrategy.Overwrite),
        ]);
    };
}
//# sourceMappingURL=index.js.map