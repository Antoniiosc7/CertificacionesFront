"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgDocWatcher = void 0;
const tslib_1 = require("tslib");
const chokidar = tslib_1.__importStar(require("chokidar"));
const minimatch_1 = require("minimatch");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const helpers_1 = require("../helpers");
const operators_2 = require("../operators");
/**
 *
 * @param source$
 * @param ready$
 * @param patterns
 */
function bufferAndFilter(source$, patterns) {
    return source$.pipe((0, operators_2.bufferDebounce)(10), (0, operators_1.map)((paths) => paths.filter((path) => patterns.some((p) => (0, minimatch_1.minimatch)(path, (0, helpers_1.miniPattern)(p))))), (0, operators_1.filter)((paths) => paths.length > 0));
}
class NgDocWatcher {
    constructor(files) {
        this.change$ = new rxjs_1.Subject();
        this.add$ = new rxjs_1.Subject();
        this.unlink$ = new rxjs_1.Subject();
        this.ready$ = new rxjs_1.ReplaySubject(1);
        this.watcher = chokidar.watch(files !== null && files !== void 0 ? files : [], {
            /*  `useFsEvents` causes problems on Mac when chokidar doesn't fire `unlink` event if the file has been moved */
            useFsEvents: false,
        });
        this.watcher
            .on('add', (path) => this.add$.next(path))
            .on('change', (path) => this.change$.next(path))
            .on('unlink', (path) => this.unlink$.next(path))
            .on('ready', () => this.ready$.next());
    }
    watch(paths) {
        this.watcher.add(paths);
        return this;
    }
    onAdd(...filterPaths) {
        return bufferAndFilter(this.add$, filterPaths);
    }
    onChange(...filterPaths) {
        return bufferAndFilter(this.change$, filterPaths);
    }
    onUnlink(...filterPaths) {
        return bufferAndFilter(this.unlink$, filterPaths);
    }
    onReady() {
        return this.ready$.asObservable();
    }
    close() {
        this.watcher.close();
    }
}
exports.NgDocWatcher = NgDocWatcher;
//# sourceMappingURL=watcher.js.map