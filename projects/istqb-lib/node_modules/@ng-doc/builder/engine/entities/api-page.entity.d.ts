import { Observable } from 'rxjs';
import { SourceFile } from 'ts-morph';
import { NgDocBuilderContext, NgDocBuildResult, NgDocEntityKeyword } from '../../interfaces';
import { NgDocSupportedDeclarations } from '../../types';
import { NgDocEntityStore } from '../entity-store';
import { NgDocEntity } from './abstractions/entity';
import { NgDocRouteEntity } from './abstractions/route.entity';
import { NgDocApiScopeEntity } from './api-scope.entity';
import { NgDocCache } from './cache';
export declare class NgDocApiPageEntity extends NgDocRouteEntity<never> {
    readonly store: NgDocEntityStore;
    readonly cache: NgDocCache;
    readonly context: NgDocBuilderContext;
    readonly sourceFile: SourceFile;
    parent: NgDocApiScopeEntity;
    readonly declarationName: string;
    readonly index: number;
    declaration?: NgDocSupportedDeclarations;
    readonly physical: boolean;
    readonly id: string;
    folderName: string;
    constructor(store: NgDocEntityStore, cache: NgDocCache, context: NgDocBuilderContext, sourceFile: SourceFile, parent: NgDocApiScopeEntity, declarationName: string, index: number);
    get isRoot(): boolean;
    get route(): string;
    protected refreshImpl(): Observable<void>;
    get title(): string;
    get editSourceFileUrl(): string | undefined;
    get viewSourceFileUrl(): string | undefined;
    get folderPath(): string;
    get buildCandidates(): NgDocEntity[];
    get keywords(): NgDocEntityKeyword[];
    compile(): Observable<void>;
    protected loadImpl(): Observable<void>;
    build(): Observable<NgDocBuildResult<string, this>>;
    private updateDeclaration;
}
