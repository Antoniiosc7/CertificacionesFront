"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgDocApiScopeEntity = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@ng-doc/core");
const rxjs_1 = require("rxjs");
const helpers_1 = require("../../helpers");
const nunjucks_1 = require("../nunjucks");
const route_entity_1 = require("./abstractions/route.entity");
const decorators_1 = require("./cache/decorators");
let NgDocApiScopeEntity = (() => {
    let _classDecorators = [(0, decorators_1.CachedEntity)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = route_entity_1.NgDocRouteEntity;
    var NgDocApiScopeEntity = _classThis = class extends _classSuper {
        constructor(store, cache, context, sourceFile, parent, target) {
            super(store, cache, context, sourceFile);
            this.store = store;
            this.cache = cache;
            this.context = context;
            this.sourceFile = sourceFile;
            this.parent = parent;
            this.target = target;
            this.physical = false;
            this.id = (0, helpers_1.uniqueName)(`${this.sourceFilePath}#${this.target.route}`);
        }
        get rootFiles() {
            return [];
        }
        get isRoot() {
            // always false, api scopes are not rooted
            return false;
        }
        get route() {
            return this.target.route;
        }
        get keywords() {
            return [];
        }
        get folderName() {
            return this.route;
        }
        get cachedFilePaths() {
            return this.parent.rootFiles;
        }
        /**
         * Returns full url from the root
         * @type {string}
         */
        get url() {
            return `${this.parent ? this.parent.url + '/' : ''}${this.route}`;
        }
        get pages() {
            return (0, core_1.asArray)(this.children.values()).filter(helpers_1.isPageEntity);
        }
        get title() {
            return this.target.name;
        }
        get order() {
            return this.target.order;
        }
        get buildCandidates() {
            return this.childEntities;
        }
        refreshImpl() {
            // Emitting source file is not necessary for this type of entity
            return (0, rxjs_1.of)(void 0);
        }
        compile() {
            return (0, rxjs_1.of)(void 0);
        }
        loadImpl() {
            return (0, rxjs_1.of)(void 0);
        }
        build() {
            if (this.target) {
                const result = (0, nunjucks_1.renderTemplate)('./api-scope.ts.nunj', {
                    context: {
                        scope: this,
                        outFolder: this.folderPath,
                    },
                });
                return (0, rxjs_1.of)({
                    result,
                    entity: this,
                    toBuilderOutput: (content) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        return ({
                            content,
                            filePath: this.modulePath,
                        });
                    }),
                });
            }
            throw new Error(`The entity "${this.id}" is not loaded.`);
        }
        destroy() {
            this.children.forEach((child) => child.destroy());
            super.destroy();
        }
    };
    tslib_1.__setFunctionName(_classThis, "NgDocApiScopeEntity");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        NgDocApiScopeEntity = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        tslib_1.__runInitializers(_classThis, _classExtraInitializers);
    })();
    return NgDocApiScopeEntity = _classThis;
})();
exports.NgDocApiScopeEntity = NgDocApiScopeEntity;
//# sourceMappingURL=api-scope.entity.js.map