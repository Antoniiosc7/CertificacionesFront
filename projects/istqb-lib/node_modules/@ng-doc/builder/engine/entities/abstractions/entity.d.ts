import { logging } from '@angular-devkit/core';
import { NgDocPageIndex } from '@ng-doc/core';
import { Observable } from 'rxjs';
import { ObservableSet } from '../../../classes';
import { NgDocBuilderContext, NgDocBuildResult } from '../../../interfaces';
import { NgDocEntityStore } from '../../entity-store';
import { NgDocCache } from '../cache';
/**
 * Base entity class that all entities should extend.
 */
export declare abstract class NgDocEntity {
    readonly store: NgDocEntityStore;
    readonly cache: NgDocCache;
    readonly context: NgDocBuilderContext;
    /**
     * The key by which the entity will be stored in the store
     */
    abstract readonly id: string;
    /** Indicates when entity was destroyed */
    destroyed: boolean;
    /** Search indexes for the current entity */
    indexes: NgDocPageIndex[];
    /**
     * List of keywords that were linked to the entity
     */
    usedKeywords: Set<string>;
    /**
     * List of potential keywords that are used by the entity but not linked yet
     * (they will be sat by Keywords Processor, and used to indicate when this entity should be re-build if one of them appears)
     */
    potentialKeywords: Set<string>;
    /**
     * Collection of all file dependencies of the current entity.
     * This property is using to watch for changes in this dependencies list and rebuild current buildable.
     */
    readonly dependencies: ObservableSet<string>;
    /**
     * Indicates if this entity has physical file in file system
     * If this entity was generated by another Entity, this property should be `false`
     *
     * NgDoc destroys all child elements of non-physical entities when they are destroyed
     */
    readonly physical: boolean;
    /**
     * List of errors that were occurred during the build process
     */
    errors: Error[];
    /**
     * List of warnings that were occurred during the build process
     */
    warnings: Error[];
    private destroy$;
    /**
     * Indicates when it's root entity and should be used for rooted components.
     */
    abstract readonly isRoot: boolean;
    /**
     * Files that are watched for changes to rebuild entity or remove it
     */
    abstract readonly rootFiles: string[];
    /**
     * Should return the parent of the current entity
     */
    abstract readonly parent?: NgDocEntity;
    /**
     * Should return the list of the dependencies that have to be built if current entity was changed.
     */
    abstract readonly buildCandidates: NgDocEntity[];
    constructor(store: NgDocEntityStore, cache: NgDocCache, context: NgDocBuilderContext);
    /** Indicates when current entity could be built */
    protected get canBeBuilt(): boolean;
    /**
     * Recursively returns parents for the current entity
     * @type {Array<NgDocEntity>}
     */
    get parentEntities(): NgDocEntity[];
    /**
     * The children of the entity.
     * Contains all children of the current entity.
     */
    get children(): NgDocEntity[];
    /**
     * Returns children that are ready to build or already built
     */
    get builtChildren(): NgDocEntity[];
    /**
     * Recursively returns children for the current entity
     * @type {Array<NgDocEntity>}
     */
    get childEntities(): NgDocEntity[];
    /**
     * Returns `true` if current entity has children
     * @type {boolean}
     */
    get hasChildren(): boolean;
    /**
     * Should return if this entity is ready to build
     * @type {boolean}
     */
    get isReadyForBuild(): boolean;
    get logger(): logging.LoggerApi;
    get cachedFilePaths(): string[];
    /**
     * Method called by NgDocBuilder when one or more dependencies have changed
     */
    dependenciesChanged(): void;
    childrenGenerator(): Observable<NgDocEntity[]>;
    beforeBuild(): void;
    /**
     * Build all artifacts that need for application.
     * This is the last method in the build process, should return output that should be emitted to the file system
     */
    abstract build(): Observable<NgDocBuildResult<any, any>>;
    updateCache(): void;
    removeArtifacts(): void;
    /**
     * Destroys current entity and clear all references
     * @type {void}
     */
    destroy(): void;
    onDestroy(): Observable<void>;
}
