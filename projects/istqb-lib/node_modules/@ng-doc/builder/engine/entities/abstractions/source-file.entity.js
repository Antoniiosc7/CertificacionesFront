"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgDocSourceFileEntity = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const helpers_1 = require("../../../helpers");
const variables_1 = require("../../variables");
const entity_1 = require("./entity");
class NgDocSourceFileEntity extends entity_1.NgDocEntity {
    constructor(store, cache, context, sourceFile) {
        super(store, cache, context);
        this.store = store;
        this.cache = cache;
        this.context = context;
        this.sourceFile = sourceFile;
        /**
         * The key by which the entity will be stored in the store
         */
        this.id = this.sourceFilePath;
    }
    /**
     * Files that are watched for changes to rebuild entity or remove it
     */
    get rootFiles() {
        return [this.sourceFile.getFilePath()];
    }
    get sourceFilePath() {
        return path_1.default.relative(this.context.context.workspaceRoot, this.sourceFile.getFilePath());
    }
    /**
     * Returns relative path to a sourceFileFolder of the source file
     * @type {string}
     */
    get sourceFileFolder() {
        return path_1.default.relative(this.context.context.workspaceRoot, path_1.default.dirname(this.sourceFilePath));
    }
    get importPath() {
        return (0, helpers_1.posix)(this.sourceFilePath.replace(/.ts$/, ''));
    }
    /**
     * Returns import paths that can be used to import the current source file
     */
    get pathToCompiledFile() {
        const relativePath = path_1.default.relative(this.context.context.workspaceRoot, this.sourceFile.getFilePath());
        return path_1.default.join(variables_1.CACHE_PATH, relativePath.replace(/\.ts$/, '.mjs'));
    }
    /**
     * Runs when the source file was updated, can be used refresh source file in the typescript project
     */
    refreshImpl() {
        [this.sourceFile, ...this.sourceFile.getReferencedSourceFiles()].forEach((sourceFile) => sourceFile.refreshFromFileSystemSync());
        return (0, rxjs_1.of)(void 0);
    }
    refresh() {
        // Reset warnings and errors because it's the first step of the build process
        this.warnings = [];
        this.errors = [];
        return this.refreshImpl().pipe((0, operators_1.tap)({
            error: (e) => this.errors.push(e),
        }));
    }
    destroy() {
        super.destroy();
    }
}
exports.NgDocSourceFileEntity = NgDocSourceFileEntity;
//# sourceMappingURL=source-file.entity.js.map