import { NgDocApiScope } from '@ng-doc/core';
import { Observable } from 'rxjs';
import { SourceFile } from 'ts-morph';
import { NgDocBuilderContext, NgDocBuildResult, NgDocEntityKeyword } from '../../interfaces';
import { NgDocEntityStore } from '../entity-store';
import { NgDocEntity } from './abstractions/entity';
import { NgDocRouteEntity } from './abstractions/route.entity';
import { NgDocApiEntity } from './api.entity';
import { NgDocCache } from './cache';
import { NgDocPageEntity } from './page.entity';
export declare class NgDocApiScopeEntity extends NgDocRouteEntity<NgDocApiScope> {
    readonly store: NgDocEntityStore;
    readonly cache: NgDocCache;
    readonly context: NgDocBuilderContext;
    readonly sourceFile: SourceFile;
    parent: NgDocApiEntity;
    target: NgDocApiScope;
    readonly physical: boolean;
    id: string;
    constructor(store: NgDocEntityStore, cache: NgDocCache, context: NgDocBuilderContext, sourceFile: SourceFile, parent: NgDocApiEntity, target: NgDocApiScope);
    get rootFiles(): string[];
    get isRoot(): boolean;
    get route(): string;
    get keywords(): NgDocEntityKeyword[];
    get folderName(): string;
    get cachedFilePaths(): string[];
    /**
     * Returns full url from the root
     * @type {string}
     */
    get url(): string;
    get pages(): NgDocPageEntity[];
    get title(): string;
    get order(): number | undefined;
    get buildCandidates(): NgDocEntity[];
    refreshImpl(): Observable<void>;
    compile(): Observable<void>;
    loadImpl(): Observable<void>;
    build(): Observable<NgDocBuildResult<string>>;
    destroy(): void;
}
