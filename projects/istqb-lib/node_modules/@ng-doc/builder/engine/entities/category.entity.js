"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgDocCategoryEntity = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@ng-doc/core");
const path = tslib_1.__importStar(require("path"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const helpers_1 = require("../../helpers");
const nunjucks_1 = require("../nunjucks");
const navigation_entity_1 = require("./abstractions/navigation.entity");
const decorators_1 = require("./cache/decorators");
let NgDocCategoryEntity = (() => {
    let _classDecorators = [(0, decorators_1.CachedEntity)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = navigation_entity_1.NgDocNavigationEntity;
    var NgDocCategoryEntity = _classThis = class extends _classSuper {
        get route() {
            var _a, _b;
            const folderName = path.basename(path.dirname(this.sourceFile.getFilePath()));
            return (_b = (_a = this.target) === null || _a === void 0 ? void 0 : _a.route) !== null && _b !== void 0 ? _b : folderName;
        }
        /**
         * Returns full url from the root
         * @type {string}
         */
        get url() {
            return `${this.parent ? this.parent.url + '/' : ''}${this.route}`;
        }
        get canBeBuilt() {
            var _a, _b;
            return (0, core_1.isPresent)(this.target)
                ? !this.target.onlyForTags ||
                    (0, core_1.asArray)(this.target.onlyForTags).includes((_b = (_a = this.context.context.target) === null || _a === void 0 ? void 0 : _a.configuration) !== null && _b !== void 0 ? _b : '')
                : true;
        }
        get isRoot() {
            var _a;
            return !((_a = this.target) === null || _a === void 0 ? void 0 : _a.category);
        }
        get order() {
            var _a;
            return (_a = this.target) === null || _a === void 0 ? void 0 : _a.order;
        }
        get pages() {
            return (0, core_1.asArray)(this.children.values()).filter(helpers_1.isPageEntity);
        }
        get categories() {
            return (0, core_1.asArray)(this.children.values()).filter(helpers_1.isCategoryEntity);
        }
        get keywords() {
            return [];
        }
        get title() {
            var _a, _b;
            return (_b = (_a = this.target) === null || _a === void 0 ? void 0 : _a.title) !== null && _b !== void 0 ? _b : '';
        }
        get buildCandidates() {
            return this.childEntities;
        }
        get expandable() {
            var _a, _b;
            return (_b = (_a = this.target) === null || _a === void 0 ? void 0 : _a.expandable) !== null && _b !== void 0 ? _b : true;
        }
        get expanded() {
            var _a, _b;
            return (_b = (_a = this.target) === null || _a === void 0 ? void 0 : _a.expanded) !== null && _b !== void 0 ? _b : false;
        }
        setParentDynamically() {
            super.setParentDynamically();
            this.parent = this.getParentFromCategory();
        }
        loadImpl() {
            return super.loadImpl().pipe((0, operators_1.tap)(() => {
                if (!this.title) {
                    throw new Error(`Failed to load category. Make sure that you have a "title" property.`);
                }
            }));
        }
        build() {
            const result = (0, nunjucks_1.renderTemplate)('./category.ts.nunj', {
                context: {
                    category: this,
                    outFolder: path.dirname(this.modulePath),
                },
            });
            return (0, rxjs_1.of)({
                result,
                entity: this,
                toBuilderOutput: (content) => tslib_1.__awaiter(this, void 0, void 0, function* () { return ({ content, filePath: this.modulePath }); }),
            });
        }
    };
    tslib_1.__setFunctionName(_classThis, "NgDocCategoryEntity");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        NgDocCategoryEntity = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        tslib_1.__runInitializers(_classThis, _classExtraInitializers);
    })();
    return NgDocCategoryEntity = _classThis;
})();
exports.NgDocCategoryEntity = NgDocCategoryEntity;
//# sourceMappingURL=category.entity.js.map