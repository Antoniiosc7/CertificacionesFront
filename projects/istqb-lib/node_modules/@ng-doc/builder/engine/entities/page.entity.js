"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgDocPageEntity = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@ng-doc/core");
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const helpers_1 = require("../../helpers");
const actions_1 = require("../actions");
const nunjucks_1 = require("../nunjucks");
const navigation_entity_1 = require("./abstractions/navigation.entity");
const decorators_1 = require("./cache/decorators");
const page_demo_entity_1 = require("./page-demo.entity");
const page_playground_entity_1 = require("./page-playground.entity");
const plugins_1 = require("./plugins");
let NgDocPageEntity = (() => {
    let _classDecorators = [(0, decorators_1.CachedEntity)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = navigation_entity_1.NgDocNavigationEntity;
    let _instanceExtraInitializers = [];
    let _get_mdPath_decorators;
    var NgDocPageEntity = _classThis = class extends _classSuper {
        constructor() {
            super(...arguments);
            this.parent = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        }
        get route() {
            var _a, _b, _c, _d;
            const folderName = path.basename(path.dirname(this.sourceFile.getFilePath()));
            return ((_d = ((0, core_1.isRoute)((_a = this.target) === null || _a === void 0 ? void 0 : _a.route) ? (_b = this.target) === null || _b === void 0 ? void 0 : _b.route.path : (_c = this.target) === null || _c === void 0 ? void 0 : _c.route)) !== null && _d !== void 0 ? _d : folderName);
        }
        get isRoot() {
            var _a;
            return !((_a = this.target) === null || _a === void 0 ? void 0 : _a.category);
        }
        get title() {
            var _a, _b;
            return (_b = (_a = this.target) === null || _a === void 0 ? void 0 : _a.title) !== null && _b !== void 0 ? _b : '';
        }
        get buildCandidates() {
            return this.parentEntities;
        }
        get editSourceFileUrl() {
            if (this.context.config.repoConfig) {
                return (0, helpers_1.editFileInRepoUrl)(this.context.config.repoConfig, this.mdPath, this.route.toLowerCase());
            }
            return undefined;
        }
        get canBeBuilt() {
            var _a, _b;
            return (0, core_1.isPresent)(this.target)
                ? !this.target.onlyForTags ||
                    (0, core_1.asArray)(this.target.onlyForTags).includes((_b = (_a = this.context.context.target) === null || _a === void 0 ? void 0 : _a.configuration) !== null && _b !== void 0 ? _b : '')
                : true;
        }
        get order() {
            var _a;
            return (_a = this.target) === null || _a === void 0 ? void 0 : _a.order;
        }
        get keywords() {
            var _a;
            const rootKeywords = [...(0, core_1.asArray)((_a = this.target) === null || _a === void 0 ? void 0 : _a.keyword)].map((key) => ({
                key: `*${key}`,
                title: this.title,
                path: this.fullRoute,
            }));
            return [
                ...rootKeywords,
                ...rootKeywords
                    .map((keyword) => this.anchors.map((anchor) => (0, helpers_1.buildEntityKeyword)(keyword.key, keyword.title, keyword.path, anchor)))
                    .flat(),
            ];
        }
        /**
         * Returns full url from the root
         * @type {string}
         */
        get url() {
            return `${this.parent ? this.parent.url + '/' : ''}${this.route}`;
        }
        get mdPath() {
            var _a, _b;
            return path.join(this.sourceFileFolder, (_b = (_a = this.target) === null || _a === void 0 ? void 0 : _a.mdFile) !== null && _b !== void 0 ? _b : '');
        }
        get mdFolder() {
            return path.dirname(this.mdPath);
        }
        get hasImports() {
            var _a;
            return !!((_a = this.objectExpression) === null || _a === void 0 ? void 0 : _a.getProperty('imports'));
        }
        setParentDynamically() {
            super.setParentDynamically();
            this.parent = this.getParentFromCategory();
        }
        dependenciesChanged() {
            super.dependenciesChanged();
        }
        childrenGenerator() {
            return (0, rxjs_1.of)([
                new page_demo_entity_1.NgDocPageDemoEntity(this.store, this.cache, this.context, this),
                new page_playground_entity_1.NgDocPagePlaygroundEntity(this.store, this.cache, this.context, this),
            ]);
        }
        get playgroundEntity() {
            return this.children.find((child) => child instanceof page_playground_entity_1.NgDocPagePlaygroundEntity);
        }
        loadImpl() {
            return super.loadImpl().pipe((0, operators_1.map)(() => {
                var _a;
                if (!(0, core_1.isPresent)((_a = this.target) === null || _a === void 0 ? void 0 : _a.mdFile) || !fs.existsSync(this.mdPath)) {
                    throw new Error(`Failed to load page. Make sure that you define "mdFile" property correctly and .md file exists.`);
                }
                if (!this.title) {
                    throw new Error(`Failed to load page. Make sure that you have a "title" property.`);
                }
            }), (0, operators_1.tap)({
                error: (e) => this.errors.push(e),
            }));
        }
        build() {
            const result = (0, nunjucks_1.renderTemplate)(this.target.mdFile, {
                scope: this.sourceFileFolder,
                context: {
                    NgDocPage: this.target,
                    NgDocActions: new actions_1.NgDocActions(this),
                },
                dependenciesStore: this.dependencies,
                filters: false,
            });
            return (0, rxjs_1.of)({
                result,
                entity: this,
                toBuilderOutput: (content) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    return ({
                        content: (0, nunjucks_1.renderTemplate)('./page.ts.nunj', {
                            context: {
                                page: this,
                                pageContent: content,
                                outFolder: path.dirname(this.modulePath),
                            },
                        }),
                        filePath: this.modulePath,
                    });
                }),
                postBuildPlugins: [(0, plugins_1.markdownToHtmlPlugin)(), (0, plugins_1.processHtmlPlugin)()],
                postProcessPlugins: [(0, plugins_1.postProcessHtmlPlugin)(), (0, plugins_1.fillIndexesPlugin)()],
            });
        }
        refreshDependencies() {
            var _a;
            (_a = this.objectExpression) === null || _a === void 0 ? void 0 : _a.getSourceFile().getReferencedSourceFiles().forEach((sourceFile) => {
                sourceFile.refreshFromFileSystemSync();
            });
        }
    };
    tslib_1.__setFunctionName(_classThis, "NgDocPageEntity");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        _get_mdPath_decorators = [(0, decorators_1.CachedFilesGetter)()];
        tslib_1.__esDecorate(_classThis, null, _get_mdPath_decorators, { kind: "getter", name: "mdPath", static: false, private: false, access: { has: obj => "mdPath" in obj, get: obj => obj.mdPath }, metadata: _metadata }, null, _instanceExtraInitializers);
        tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        NgDocPageEntity = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        tslib_1.__runInitializers(_classThis, _classExtraInitializers);
    })();
    return NgDocPageEntity = _classThis;
})();
exports.NgDocPageEntity = NgDocPageEntity;
//# sourceMappingURL=page.entity.js.map