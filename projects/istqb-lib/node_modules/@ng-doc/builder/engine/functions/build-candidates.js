"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCandidates = buildCandidates;
const core_1 = require("@ng-doc/core");
const helpers_1 = require("../../helpers");
/**
 * Returns list of entities that should be rebuilt based on the provided list (including themselves).
 * List is creating based on relationships between entities and used keywords.
 * @param entityStore
 * @param entities - List of source entities
 * @returns List of entities that should be rebuilt (including source entities)
 */
function buildCandidates(entityStore, entities) {
    /*
     * If there are no entities to build, return empty array.
     * This is needed because `candidatesByKeywords` may return outdated entities if there are no entities to build
     * then the message about outdated keywords will be shown.
     */
    if (!entities.length) {
        return [];
    }
    const entitiesFromStore = entityStore.asArray();
    // Get all candidates from entities and their build candidates
    const candidates = (0, core_1.unique)(entities.map((buildable) => [buildable, ...buildable.buildCandidates]).flat());
    // Get all keywords from candidates
    const candidatesKeywords = (0, core_1.unique)(candidates
        .filter(helpers_1.isRouteEntity)
        .map((candidate) => candidate.keywords)
        .flat()
        .map((keyword) => keyword.key));
    const candidatesByKeywords = entitiesFromStore.filter((entity) => 
    // Check if entity is route and has keywords that are used by candidates
    candidatesKeywords.some((keyword) => entity.potentialKeywords.has(keyword) || entity.usedKeywords.has(keyword)) ||
        // Check if one of the used keywords is outdated
        (0, core_1.asArray)(entity.usedKeywords).some((keyword) => !entityStore.getByKeyword(keyword)));
    return (0, core_1.unique)(candidates, candidatesByKeywords).sort(prioritySort);
}
// Sort entities by parent-child relationship, children should be first, parents should be last
/**
 *
 * @param a
 * @param b
 */
function prioritySort(a, b) {
    return b.parentEntities.length - a.parentEntities.length;
}
//# sourceMappingURL=build-candidates.js.map