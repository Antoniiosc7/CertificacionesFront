"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processHtml = processHtml;
exports.postProcessHtml = postProcessHtml;
const tslib_1 = require("tslib");
const core_1 = require("@ng-doc/core");
const entity_type_1 = require("./entity-type");
const import_esm_1 = require("./import-esm");
/**
 * Processes html content for the current entity
 * @param entity - The current entity
 * @param html - The html content to process
 */
function processHtml(html, entity) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const utils = yield (0, import_esm_1.importEsm)('@ng-doc/utils');
        return utils.htmlProcessor(html, {
            headings: (_a = entity === null || entity === void 0 ? void 0 : entity.context.config.guide) === null || _a === void 0 ? void 0 : _a.anchorHeadings,
            route: (0, entity_type_1.isRouteEntity)(entity) ? entity.fullRoute : undefined,
            raiseError: (_b = entity === null || entity === void 0 ? void 0 : entity.warnings.push.bind(entity.warnings)) !== null && _b !== void 0 ? _b : core_1.EMPTY_FUNCTION,
            addAnchor: (anchor) => (0, entity_type_1.isRouteEntity)(entity) ? entity.anchors.push(anchor) : undefined,
        });
    });
}
/**
 * Post-Processes html content for the current entity
 * @param entity - The current entity
 * @param html - The html content to process
 */
function postProcessHtml(html, entity) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        const utils = yield (0, import_esm_1.importEsm)('@ng-doc/utils');
        return utils.htmlPostProcessor(html, {
            raiseError: (_a = entity === null || entity === void 0 ? void 0 : entity.warnings.push.bind(entity.warnings)) !== null && _a !== void 0 ? _a : core_1.EMPTY_FUNCTION,
            addUsedKeyword: entity === null || entity === void 0 ? void 0 : entity.usedKeywords.add.bind(entity.usedKeywords),
            addPotentialKeyword: entity === null || entity === void 0 ? void 0 : entity.potentialKeywords.add.bind(entity.potentialKeywords),
            getKeyword: entity === null || entity === void 0 ? void 0 : entity.store.getByKeyword.bind(entity.store),
        });
    });
}
//# sourceMappingURL=process-html.js.map