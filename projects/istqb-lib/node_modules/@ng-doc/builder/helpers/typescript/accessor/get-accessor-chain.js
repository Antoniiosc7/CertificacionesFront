"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccessorChain = getAccessorChain;
const ts_morph_1 = require("ts-morph");
const class_1 = require("../class");
const for_all_interfaces_1 = require("../interface/for-all-interfaces");
const get_interface_accessors_1 = require("./get-interface-accessors");
/**
 *
 * @param accessor
 */
function getAccessorChain(accessor) {
    const parent = accessor.getParent();
    const accessors = [];
    const name = accessor.getName();
    if (ts_morph_1.Node.isClassDeclaration(parent)) {
        (0, class_1.forAllClasses)(parent, (cls) => {
            if (ts_morph_1.Node.isGetAccessorDeclaration(accessor)) {
                const getter = cls.getGetAccessor(name);
                if (getter) {
                    accessors.push(getter);
                }
            }
            if (ts_morph_1.Node.isSetAccessorDeclaration(accessor)) {
                const setter = cls.getSetAccessor(name);
                if (setter) {
                    accessors.push(setter);
                }
            }
        });
        // TODO: Add interfaces
    }
    if (ts_morph_1.Node.isInterfaceDeclaration(parent)) {
        (0, for_all_interfaces_1.forAllInterfaces)(parent, (int) => {
            (0, get_interface_accessors_1.getInterfaceAccessors)(int)
                .filter((acc) => acc.getName() === name)
                .forEach((acc) => {
                if (ts_morph_1.Node.isGetAccessorDeclaration(accessor) && ts_morph_1.Node.isGetAccessorDeclaration(acc)) {
                    accessors.push(acc);
                }
                if (ts_morph_1.Node.isSetAccessorDeclaration(accessor) && ts_morph_1.Node.isSetAccessorDeclaration(acc)) {
                    accessors.push(acc);
                }
            });
        });
    }
    return accessors;
}
//# sourceMappingURL=get-accessor-chain.js.map