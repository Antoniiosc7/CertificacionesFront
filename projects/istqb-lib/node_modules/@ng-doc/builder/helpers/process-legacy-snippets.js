"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processLegacySnippets = processLegacySnippets;
const escape_regexp_1 = require("@ng-doc/core/helpers/escape-regexp");
const HTMLSnippetStart = /^.*(<!--\s*NgDocHTMLSnippetStart(\(.+\))?\s*-->).*$/gm;
const StylesSnippetStart = /^.*(\/\*\s*NgDocStyleSnippetStart(\(.+\))?\s*\*\/).*$/gm;
const TypeScriptSnippetStart = /^.*(\/\*\s*NgDocCodeSnippetStart(\(.+\))?\s*\*\/).*$/gm;
const HTMLSnippetEnd = (group = '', escape = true) => new RegExp(`^.*(<!--\\s*NgDocHTMLSnippetEnd(\\(${escape ? (0, escape_regexp_1.escapeRegexp)(group) : group}\\))?\\s*-->).*$`, 'gm');
const StylesSnippetEnd = (group = '', escape = true) => new RegExp(`^.*(\\/\\*\\s*NgDocStyleSnippetEnd(\\(${escape ? (0, escape_regexp_1.escapeRegexp)(group) : group}\\))?\\s*\\*\\/).*$`, 'gm');
const TypeScriptSnippetEnd = (group = '', escape = true) => new RegExp(`^.*(\\/\\*\\s*NgDocCodeSnippetEnd(\\(${escape ? (0, escape_regexp_1.escapeRegexp)(group) : group}\\))?\\s*\\*\\/).*$`, 'gm');
/**
 *    Finds and return all the snippets in the given string.
 * @deprecated - Use `processSnippets` instead
 * @param content - Content
 * @returns - Array of snippets
 */
function processLegacySnippets(content) {
    return [
        ...findSnippet(content, 'HTML', HTMLSnippetStart, HTMLSnippetEnd),
        ...findSnippet(content, 'styles', StylesSnippetStart, StylesSnippetEnd),
        ...findSnippet(content, 'TypeScript', TypeScriptSnippetStart, TypeScriptSnippetEnd),
    ];
}
/**
 * Finds the snippets in the given content.
 * @param content - Content
 * @param type - Snippet type
 * @param snippetStart - Snippet start
 * @param snippetEnd - Snippet end
 */
function findSnippet(content, type, snippetStart, snippetEnd) {
    var _a;
    const snippets = [];
    const startRegexp = new RegExp(snippetStart);
    let matchStart;
    // eslint-disable-next-line no-cond-assign
    while ((matchStart = startRegexp.exec(content))) {
        const group = (_a = matchStart[2]) === null || _a === void 0 ? void 0 : _a.slice(1, matchStart[2].length - 1);
        const matchEnd = snippetEnd(group).exec(content);
        if (matchEnd) {
            const snippetCode = content
                .slice(matchStart.index + matchStart[0].length, matchEnd.index)
                .trim();
            if (snippetCode) {
                snippets.push({
                    code: removeSnippetsInCode(snippetCode),
                    title: group,
                    lang: type,
                });
            }
        }
    }
    return snippets;
}
/**
 * Removes the snippets from the given code.
 * @param code - Code
 */
function removeSnippetsInCode(code) {
    return code
        .replace(HTMLSnippetStart, '')
        .replace(StylesSnippetStart, '')
        .replace(TypeScriptSnippetStart, '')
        .replace(HTMLSnippetEnd('.*', false), '')
        .replace(StylesSnippetEnd('.*', false), '')
        .replace(TypeScriptSnippetEnd('.*', false), '');
}
//# sourceMappingURL=process-legacy-snippets.js.map