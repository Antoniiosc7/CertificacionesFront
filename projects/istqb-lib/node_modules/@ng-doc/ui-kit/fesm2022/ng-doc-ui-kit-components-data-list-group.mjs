import { __decorate, __metadata } from 'tslib';
import { NgIf, NgFor } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { NgDocDataListComponent } from '@ng-doc/ui-kit/components/data-list';
import { NgDocListComponent } from '@ng-doc/ui-kit/components/list';
import { NgDocOptionComponent } from '@ng-doc/ui-kit/components/option';
import { NgDocOptionGroupComponent, NgDocOptionGroupHeaderDirective } from '@ng-doc/ui-kit/components/option-group';
import { NgDocTextComponent } from '@ng-doc/ui-kit/components/text';
import { NG_DOC_DEFAULT_STRINGIFY } from '@ng-doc/ui-kit/constants';
import { ngDocMakePure } from '@ng-doc/ui-kit/decorators';
import * as i1 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

class NgDocDataListGroupComponent extends NgDocDataListComponent {
    constructor() {
        super(...arguments);
        this.groupContent = ({ $implicit, }) => NG_DOC_DEFAULT_STRINGIFY($implicit);
        this.groups = new Map();
        this.groupItems = [];
    }
    getGroupContext($implicit) {
        return { $implicit };
    }
    ngOnChanges({ items, itemGroupFn }) {
        if (items || itemGroupFn) {
            this.groups = new Map();
            this.items?.forEach((item) => {
                if (this.itemGroupFn) {
                    const itemGroup = this.itemGroupFn(item);
                    const itemsList = this.groups.get(itemGroup) || [];
                    itemsList.push(item);
                    this.groups.set(this.itemGroupFn(item), itemsList);
                }
            });
            this.groupItems = Array.from(this.groups.keys());
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocDataListGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocDataListGroupComponent, isStandalone: true, selector: "ng-doc-data-list-group", inputs: { itemGroupFn: "itemGroupFn", groupContent: "groupContent" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<ng-doc-list>\n\t<ng-container *ngIf=\"items && items.length; else emptyTemplate\">\n\t\t<ng-doc-option-group *ngFor=\"let group of groupItems\">\n\t\t\t<span\n\t\t\t\t*polymorpheusOutlet=\"groupContent as groupText; context: getGroupContext(group)\"\n\t\t\t\tngDocOptionGroupHeader>\n\t\t\t\t{{ groupText }}\n\t\t\t</span>\n\t\t\t<ng-doc-option\n\t\t\t\t*ngFor=\"let item of groups.get(group); trackBy: trackByFn\"\n\t\t\t\t[value]=\"defineValueFn(item)\"\n\t\t\t\t[disabled]=\"itemDisabledFn(item)\">\n\t\t\t\t<ng-container *polymorpheusOutlet=\"itemContent as text; context: getContext(item)\">\n\t\t\t\t\t{{ text }}\n\t\t\t\t</ng-container>\n\t\t\t</ng-doc-option>\n\t\t</ng-doc-option-group>\n\t</ng-container>\n\n\t<ng-template #emptyTemplate>\n\t\t<div class=\"ng-doc-empty-message\" ng-doc-text>\n\t\t\t<ng-container *ngIf=\"emptyContent\">\n\t\t\t\t<ng-container *polymorpheusOutlet=\"emptyContent as text\"> {{ text }} </ng-container>\n\t\t\t</ng-container>\n\t\t</div>\n\t</ng-template>\n</ng-doc-list>\n", styles: [":host{display:block;max-height:var(--ng-doc-list-size)}ng-doc-option-group:not(:last-child){margin-bottom:calc(var(--ng-doc-base-gutter) * 2)}.ng-doc-empty-message{padding:var(--ng-doc-base-gutter) calc(var(--ng-doc-base-gutter) * 2);--ng-doc-font-size: 13px;--ng-doc-line-height: 22px}\n"], dependencies: [{ kind: "component", type: NgDocListComponent, selector: "ng-doc-list" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: NgDocOptionGroupComponent, selector: "ng-doc-option-group" }, { kind: "ngmodule", type: PolymorpheusModule }, { kind: "directive", type: i1.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: NgDocOptionGroupHeaderDirective, selector: "[ngDocOptionGroupHeader]" }, { kind: "component", type: NgDocOptionComponent, selector: "ng-doc-option" }, { kind: "component", type: NgDocTextComponent, selector: "[ng-doc-text]", inputs: ["size", "color", "align", "absoluteContent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    ngDocMakePure,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], NgDocDataListGroupComponent.prototype, "getGroupContext", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocDataListGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-data-list-group', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        NgDocListComponent,
                        NgIf,
                        NgFor,
                        NgDocOptionGroupComponent,
                        PolymorpheusModule,
                        NgDocOptionGroupHeaderDirective,
                        NgDocOptionComponent,
                        NgDocTextComponent,
                    ], template: "<ng-doc-list>\n\t<ng-container *ngIf=\"items && items.length; else emptyTemplate\">\n\t\t<ng-doc-option-group *ngFor=\"let group of groupItems\">\n\t\t\t<span\n\t\t\t\t*polymorpheusOutlet=\"groupContent as groupText; context: getGroupContext(group)\"\n\t\t\t\tngDocOptionGroupHeader>\n\t\t\t\t{{ groupText }}\n\t\t\t</span>\n\t\t\t<ng-doc-option\n\t\t\t\t*ngFor=\"let item of groups.get(group); trackBy: trackByFn\"\n\t\t\t\t[value]=\"defineValueFn(item)\"\n\t\t\t\t[disabled]=\"itemDisabledFn(item)\">\n\t\t\t\t<ng-container *polymorpheusOutlet=\"itemContent as text; context: getContext(item)\">\n\t\t\t\t\t{{ text }}\n\t\t\t\t</ng-container>\n\t\t\t</ng-doc-option>\n\t\t</ng-doc-option-group>\n\t</ng-container>\n\n\t<ng-template #emptyTemplate>\n\t\t<div class=\"ng-doc-empty-message\" ng-doc-text>\n\t\t\t<ng-container *ngIf=\"emptyContent\">\n\t\t\t\t<ng-container *polymorpheusOutlet=\"emptyContent as text\"> {{ text }} </ng-container>\n\t\t\t</ng-container>\n\t\t</div>\n\t</ng-template>\n</ng-doc-list>\n", styles: [":host{display:block;max-height:var(--ng-doc-list-size)}ng-doc-option-group:not(:last-child){margin-bottom:calc(var(--ng-doc-base-gutter) * 2)}.ng-doc-empty-message{padding:var(--ng-doc-base-gutter) calc(var(--ng-doc-base-gutter) * 2);--ng-doc-font-size: 13px;--ng-doc-line-height: 22px}\n"] }]
        }], propDecorators: { itemGroupFn: [{
                type: Input
            }], groupContent: [{
                type: Input
            }], getGroupContext: [] } });

/**
 * Generated bundle index. Do not edit.
 */

export { NgDocDataListGroupComponent };
//# sourceMappingURL=ng-doc-ui-kit-components-data-list-group.mjs.map
