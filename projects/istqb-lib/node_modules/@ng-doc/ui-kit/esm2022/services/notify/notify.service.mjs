import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { notificationCloseAnimation, notificationOpenAnimation } from '@ng-doc/ui-kit/animations';
import { NgDocOverlayContainerComponent } from '@ng-doc/ui-kit/components/overlay-container';
import { NgDocOverlayService } from '@ng-doc/ui-kit/services/overlay';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { Subject, timer } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ng-doc/ui-kit/services/overlay";
let NgDocNotifyService = class NgDocNotifyService {
    constructor(overlayService) {
        this.overlayService = overlayService;
        this.notify$ = new Subject();
        this.notify$
            .pipe(tap(() => this.overlayRef?.close()), tap((content) => this.openOverlay(content)), switchMap(() => timer(2000)), untilDestroyed(this))
            .subscribe(() => this.overlayRef?.close());
    }
    notify(content) {
        this.notify$.next(content);
    }
    openOverlay(content) {
        this.overlayRef = this.overlayService.open(content, {
            overlayContainer: NgDocOverlayContainerComponent,
            panelClass: 'ng-doc-notify',
            positionStrategy: this.overlayService
                .globalPositionStrategy()
                .bottom('10px')
                .centerHorizontally(),
            openAnimation: notificationOpenAnimation,
            closeAnimation: notificationCloseAnimation,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocNotifyService, deps: [{ token: i1.NgDocOverlayService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocNotifyService, providedIn: 'root' }); }
};
NgDocNotifyService = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [NgDocOverlayService])
], NgDocNotifyService);
export { NgDocNotifyService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocNotifyService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.NgDocOverlayService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9zZXJ2aWNlcy9ub3RpZnkvbm90aWZ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLDBCQUEwQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbEcsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDN0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFdEUsT0FBTyxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFNekMsSUFBTSxrQkFBa0IsR0FBeEIsTUFBTSxrQkFBa0I7SUFJOUIsWUFBNkIsY0FBbUM7UUFBbkMsbUJBQWMsR0FBZCxjQUFjLENBQXFCO1FBRi9DLFlBQU8sR0FBMEIsSUFBSSxPQUFPLEVBQWdCLENBQUM7UUFHN0UsSUFBSSxDQUFDLE9BQU87YUFDVixJQUFJLENBQ0osR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFDbkMsR0FBRyxDQUFDLENBQUMsT0FBcUIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUN6RCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQzVCLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FDcEI7YUFDQSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBcUI7UUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVPLFdBQVcsQ0FBQyxPQUFxQjtRQUN4QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNuRCxnQkFBZ0IsRUFBRSw4QkFBOEI7WUFDaEQsVUFBVSxFQUFFLGVBQWU7WUFDM0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGNBQWM7aUJBQ25DLHNCQUFzQixFQUFFO2lCQUN4QixNQUFNLENBQUMsTUFBTSxDQUFDO2lCQUNkLGtCQUFrQixFQUFFO1lBQ3RCLGFBQWEsRUFBRSx5QkFBeUI7WUFDeEMsY0FBYyxFQUFFLDBCQUEwQjtTQUMxQyxDQUFDLENBQUM7SUFDSixDQUFDOzhHQTlCVyxrQkFBa0I7a0hBQWxCLGtCQUFrQixjQUhsQixNQUFNOztBQUdOLGtCQUFrQjtJQUQ5QixZQUFZLEVBQUU7cUNBSytCLG1CQUFtQjtHQUpwRCxrQkFBa0IsQ0ErQjlCOzsyRkEvQlksa0JBQWtCO2tCQUo5QixVQUFVO21CQUFDO29CQUNYLFVBQVUsRUFBRSxNQUFNO2lCQUNsQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG5vdGlmaWNhdGlvbkNsb3NlQW5pbWF0aW9uLCBub3RpZmljYXRpb25PcGVuQW5pbWF0aW9uIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBOZ0RvY092ZXJsYXlSZWYgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9jbGFzc2VzJztcbmltcG9ydCB7IE5nRG9jT3ZlcmxheUNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L2NvbXBvbmVudHMvb3ZlcmxheS1jb250YWluZXInO1xuaW1wb3J0IHsgTmdEb2NPdmVybGF5U2VydmljZSB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L3NlcnZpY2VzL292ZXJsYXknO1xuaW1wb3J0IHsgTmdEb2NDb250ZW50IH0gZnJvbSAnQG5nLWRvYy91aS1raXQvdHlwZXMnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBTdWJqZWN0LCB0aW1lciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcblx0cHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbkBVbnRpbERlc3Ryb3koKVxuZXhwb3J0IGNsYXNzIE5nRG9jTm90aWZ5U2VydmljZSB7XG5cdHByaXZhdGUgb3ZlcmxheVJlZj86IE5nRG9jT3ZlcmxheVJlZjtcblx0cHJpdmF0ZSByZWFkb25seSBub3RpZnkkOiBTdWJqZWN0PE5nRG9jQ29udGVudD4gPSBuZXcgU3ViamVjdDxOZ0RvY0NvbnRlbnQ+KCk7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBvdmVybGF5U2VydmljZTogTmdEb2NPdmVybGF5U2VydmljZSkge1xuXHRcdHRoaXMubm90aWZ5JFxuXHRcdFx0LnBpcGUoXG5cdFx0XHRcdHRhcCgoKSA9PiB0aGlzLm92ZXJsYXlSZWY/LmNsb3NlKCkpLFxuXHRcdFx0XHR0YXAoKGNvbnRlbnQ6IE5nRG9jQ29udGVudCkgPT4gdGhpcy5vcGVuT3ZlcmxheShjb250ZW50KSksXG5cdFx0XHRcdHN3aXRjaE1hcCgoKSA9PiB0aW1lcigyMDAwKSksXG5cdFx0XHRcdHVudGlsRGVzdHJveWVkKHRoaXMpLFxuXHRcdFx0KVxuXHRcdFx0LnN1YnNjcmliZSgoKSA9PiB0aGlzLm92ZXJsYXlSZWY/LmNsb3NlKCkpO1xuXHR9XG5cblx0bm90aWZ5KGNvbnRlbnQ6IE5nRG9jQ29udGVudCk6IHZvaWQge1xuXHRcdHRoaXMubm90aWZ5JC5uZXh0KGNvbnRlbnQpO1xuXHR9XG5cblx0cHJpdmF0ZSBvcGVuT3ZlcmxheShjb250ZW50OiBOZ0RvY0NvbnRlbnQpOiB2b2lkIHtcblx0XHR0aGlzLm92ZXJsYXlSZWYgPSB0aGlzLm92ZXJsYXlTZXJ2aWNlLm9wZW4oY29udGVudCwge1xuXHRcdFx0b3ZlcmxheUNvbnRhaW5lcjogTmdEb2NPdmVybGF5Q29udGFpbmVyQ29tcG9uZW50LFxuXHRcdFx0cGFuZWxDbGFzczogJ25nLWRvYy1ub3RpZnknLFxuXHRcdFx0cG9zaXRpb25TdHJhdGVneTogdGhpcy5vdmVybGF5U2VydmljZVxuXHRcdFx0XHQuZ2xvYmFsUG9zaXRpb25TdHJhdGVneSgpXG5cdFx0XHRcdC5ib3R0b20oJzEwcHgnKVxuXHRcdFx0XHQuY2VudGVySG9yaXpvbnRhbGx5KCksXG5cdFx0XHRvcGVuQW5pbWF0aW9uOiBub3RpZmljYXRpb25PcGVuQW5pbWF0aW9uLFxuXHRcdFx0Y2xvc2VBbmltYXRpb246IG5vdGlmaWNhdGlvbkNsb3NlQW5pbWF0aW9uLFxuXHRcdH0pO1xuXHR9XG59XG4iXX0=