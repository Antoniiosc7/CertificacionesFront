import { inject, Injectable } from '@angular/core';
import { asArray } from '@ng-doc/core';
import { NgDocOverlayContainerComponent } from '@ng-doc/ui-kit/components/overlay-container';
import { NgDocOverlayService } from '@ng-doc/ui-kit/services/overlay';
import * as i0 from "@angular/core";
export class NgDocDialogService {
    constructor() {
        this.overlayService = inject(NgDocOverlayService);
    }
    open(content, config) {
        return this.overlayService.open(content, {
            overlayContainer: NgDocOverlayContainerComponent,
            positionStrategy: this.overlayService
                .globalPositionStrategy()
                .centerHorizontally()
                .centerVertically(),
            scrollStrategy: this.overlayService.scrollStrategy().block(),
            ...config,
            panelClass: ['ng-doc-dialog', ...asArray(config?.panelClass)],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocDialogService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocDialogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocDialogService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9zZXJ2aWNlcy9kaWFsb2cvZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV2QyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUM3RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7QUFRdEUsTUFBTSxPQUFPLGtCQUFrQjtJQUgvQjtRQUlXLG1CQUFjLEdBQXdCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBYzVFO0lBWkEsSUFBSSxDQUFjLE9BQXFCLEVBQUUsTUFBMEI7UUFDbEUsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDeEMsZ0JBQWdCLEVBQUUsOEJBQThCO1lBQ2hELGdCQUFnQixFQUFFLElBQUksQ0FBQyxjQUFjO2lCQUNuQyxzQkFBc0IsRUFBRTtpQkFDeEIsa0JBQWtCLEVBQUU7aUJBQ3BCLGdCQUFnQixFQUFFO1lBQ3BCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRTtZQUM1RCxHQUFHLE1BQU07WUFDVCxVQUFVLEVBQUUsQ0FBQyxlQUFlLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzdELENBQUMsQ0FBQztJQUNKLENBQUM7OEdBZFcsa0JBQWtCO2tIQUFsQixrQkFBa0IsY0FGbEIsTUFBTTs7MkZBRU4sa0JBQWtCO2tCQUg5QixVQUFVO21CQUFDO29CQUNYLFVBQVUsRUFBRSxNQUFNO2lCQUNsQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYXNBcnJheSB9IGZyb20gJ0BuZy1kb2MvY29yZSc7XG5pbXBvcnQgeyBOZ0RvY092ZXJsYXlSZWYgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9jbGFzc2VzJztcbmltcG9ydCB7IE5nRG9jT3ZlcmxheUNvbnRhaW5lckNvbXBvbmVudCB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L2NvbXBvbmVudHMvb3ZlcmxheS1jb250YWluZXInO1xuaW1wb3J0IHsgTmdEb2NPdmVybGF5U2VydmljZSB9IGZyb20gJ0BuZy1kb2MvdWkta2l0L3NlcnZpY2VzL292ZXJsYXknO1xuaW1wb3J0IHsgTmdEb2NDb250ZW50IH0gZnJvbSAnQG5nLWRvYy91aS1raXQvdHlwZXMnO1xuXG5pbXBvcnQgeyBOZ0RvY0RpYWxvZ0NvbmZpZyB9IGZyb20gJy4vZGlhbG9nLmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKHtcblx0cHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0RvY0RpYWxvZ1NlcnZpY2Uge1xuXHRwcm90ZWN0ZWQgb3ZlcmxheVNlcnZpY2U6IE5nRG9jT3ZlcmxheVNlcnZpY2UgPSBpbmplY3QoTmdEb2NPdmVybGF5U2VydmljZSk7XG5cblx0b3BlbjxSID0gdW5rbm93bj4oY29udGVudDogTmdEb2NDb250ZW50LCBjb25maWc/OiBOZ0RvY0RpYWxvZ0NvbmZpZyk6IE5nRG9jT3ZlcmxheVJlZjxSPiB7XG5cdFx0cmV0dXJuIHRoaXMub3ZlcmxheVNlcnZpY2Uub3Blbihjb250ZW50LCB7XG5cdFx0XHRvdmVybGF5Q29udGFpbmVyOiBOZ0RvY092ZXJsYXlDb250YWluZXJDb21wb25lbnQsXG5cdFx0XHRwb3NpdGlvblN0cmF0ZWd5OiB0aGlzLm92ZXJsYXlTZXJ2aWNlXG5cdFx0XHRcdC5nbG9iYWxQb3NpdGlvblN0cmF0ZWd5KClcblx0XHRcdFx0LmNlbnRlckhvcml6b250YWxseSgpXG5cdFx0XHRcdC5jZW50ZXJWZXJ0aWNhbGx5KCksXG5cdFx0XHRzY3JvbGxTdHJhdGVneTogdGhpcy5vdmVybGF5U2VydmljZS5zY3JvbGxTdHJhdGVneSgpLmJsb2NrKCksXG5cdFx0XHQuLi5jb25maWcsXG5cdFx0XHRwYW5lbENsYXNzOiBbJ25nLWRvYy1kaWFsb2cnLCAuLi5hc0FycmF5KGNvbmZpZz8ucGFuZWxDbGFzcyldLFxuXHRcdH0pO1xuXHR9XG59XG4iXX0=