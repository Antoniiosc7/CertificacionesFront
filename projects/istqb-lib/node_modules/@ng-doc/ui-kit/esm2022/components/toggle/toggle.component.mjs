import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, inject, ViewChild, } from '@angular/core';
import { NgDocPositionUtils } from '@ng-doc/ui-kit/utils';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { DICompareHost, DIStateControl, injectHostControl } from 'di-controls';
import { fromEvent } from 'rxjs';
import { filter, last, map, pairwise, startWith, switchMap, takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
let NgDocToggleComponent = class NgDocToggleComponent extends DIStateControl {
    constructor() {
        super({
            host: injectHostControl({ optional: true }),
            compareHost: inject(DICompareHost, { optional: true }),
            onIncomingUpdate: () => {
                this.setState(!!this.checked());
            },
        });
        this.dragging = false;
        this.maxPixelValue = 0;
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.wrapper && this.circle) {
            this.maxPixelValue =
                this.wrapper.nativeElement.offsetWidth - this.circle.nativeElement.offsetWidth - 6;
            fromEvent(this.circle.nativeElement, 'mousedown')
                .pipe(filter(() => !this.disabled), switchMap(() => {
                const transition = this.circle?.nativeElement.style.transition ?? '';
                this.renderer.setStyle(this.circle?.nativeElement, 'transition', '');
                this.setDragging(true);
                return fromEvent(document.body, 'mousemove').pipe(pairwise(), map(([newEvent, oldEvent]) => [newEvent, oldEvent]), map(([newEvent, oldEvent]) => oldEvent.clientX - newEvent.clientX), filter((deltaX) => deltaX !== 0), tap((deltaX) => this.changeCirclePosition(deltaX)), startWith(null), takeUntil(fromEvent(document.body, 'mouseup').pipe(tap(() => this.setDragging(false)))), last(), tap(() => this.circle &&
                    this.renderer.setStyle(this.circle.nativeElement, 'transition', transition)));
            }), untilDestroyed(this))
                .subscribe((deltaX) => {
                deltaX === null ? this.toggle() : this.detectByCoordinates();
            });
        }
    }
    updateModel(value) {
        super.updateModel(value);
        this.setState(!!this.checked);
    }
    setState(isSelected) {
        isSelected
            ? this.circle &&
                this.renderer.setStyle(this.circle.nativeElement, 'transform', `translateX(${this.maxPixelValue}px)`)
            : this.circle &&
                this.renderer.setStyle(this.circle.nativeElement, 'transform', `translateX(0)`);
    }
    setDragging(value) {
        this.dragging = value;
        this.changeDetectorRef.markForCheck();
    }
    detectByCoordinates() {
        if (!this.disabled && this.wrapper && this.circle) {
            const wrapperMiddle = NgDocPositionUtils.getElementPosition(this.wrapper.nativeElement).x +
                this.wrapper.nativeElement.offsetWidth / 2;
            const circleCenterLeft = NgDocPositionUtils.getElementPosition(this.circle.nativeElement).x +
                this.circle.nativeElement.offsetWidth / 2;
            circleCenterLeft > wrapperMiddle ? this.check() : this.uncheck();
            this.setState(!!this.checked);
        }
    }
    changeCirclePosition(delta) {
        if (this.wrapper && this.circle) {
            const wrapperLeft = NgDocPositionUtils.getElementPosition(this.wrapper.nativeElement).x;
            const circleLeft = NgDocPositionUtils.getElementPosition(this.circle.nativeElement).x;
            const newPosition = Math.max(Math.min(circleLeft - wrapperLeft - 3 + delta, this.maxPixelValue), 0);
            this.renderer.setStyle(this.circle.nativeElement, 'transform', `translateX(${newPosition}px)`);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocToggleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocToggleComponent, isStandalone: true, selector: "ng-doc-toggle", host: { properties: { "attr.data-ng-doc-dragging": "this.dragging" } }, viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true, static: true }, { propertyName: "circle", first: true, predicate: ["circle"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"ng-doc-toggle-wrapper\" (click)=\"toggle()\" #wrapper>\n\t<div class=\"ng-doc-toggle-circle\" #circle></div>\n</div>\n", styles: [":host .ng-doc-toggle-wrapper{position:relative;display:inline-block;width:40px;height:22px;border-radius:24px;background-color:var(--ng-doc-base-3);cursor:pointer;transition:background-color var(--ng-doc-transition)}:host .ng-doc-toggle-wrapper .ng-doc-toggle-circle{position:absolute;left:3px;top:3px;height:calc(var(--ng-doc-base-gutter) * 2);width:calc(var(--ng-doc-base-gutter) * 2);border-radius:50%;background-color:var(--ng-doc-base-0);-webkit-user-select:none;user-select:none;transition:transform var(--ng-doc-transition);box-shadow:0 2px 1px -1px #0003,0 1px 1px #00000024,0 1px 3px #0000001f}:host[data-checked=true] .ng-doc-toggle-wrapper{background-color:var(--ng-doc-primary)}:host[data-ng-doc-dragging=true]{cursor:grabbing}:host[data-ng-doc-dragging=true] .ng-doc-toggle-wrapper{pointer-events:none}:host[data-disabled=true] .ng-doc-toggle-wrapper{background-color:var(--ng-doc-base-2);cursor:unset}:host[data-disabled=true][data-checked=true] .ng-doc-toggle-wrapper{background-color:var(--ng-doc-base-3)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
};
NgDocToggleComponent = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [])
], NgDocToggleComponent);
export { NgDocToggleComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-toggle', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, template: "<div class=\"ng-doc-toggle-wrapper\" (click)=\"toggle()\" #wrapper>\n\t<div class=\"ng-doc-toggle-circle\" #circle></div>\n</div>\n", styles: [":host .ng-doc-toggle-wrapper{position:relative;display:inline-block;width:40px;height:22px;border-radius:24px;background-color:var(--ng-doc-base-3);cursor:pointer;transition:background-color var(--ng-doc-transition)}:host .ng-doc-toggle-wrapper .ng-doc-toggle-circle{position:absolute;left:3px;top:3px;height:calc(var(--ng-doc-base-gutter) * 2);width:calc(var(--ng-doc-base-gutter) * 2);border-radius:50%;background-color:var(--ng-doc-base-0);-webkit-user-select:none;user-select:none;transition:transform var(--ng-doc-transition);box-shadow:0 2px 1px -1px #0003,0 1px 1px #00000024,0 1px 3px #0000001f}:host[data-checked=true] .ng-doc-toggle-wrapper{background-color:var(--ng-doc-primary)}:host[data-ng-doc-dragging=true]{cursor:grabbing}:host[data-ng-doc-dragging=true] .ng-doc-toggle-wrapper{pointer-events:none}:host[data-disabled=true] .ng-doc-toggle-wrapper{background-color:var(--ng-doc-base-2);cursor:unset}:host[data-disabled=true][data-checked=true] .ng-doc-toggle-wrapper{background-color:var(--ng-doc-base-3)}\n"] }]
        }], ctorParameters: () => [], propDecorators: { wrapper: [{
                type: ViewChild,
                args: ['wrapper', { static: true }]
            }], circle: [{
                type: ViewChild,
                args: ['circle', { static: true }]
            }], dragging: [{
                type: HostBinding,
                args: ['attr.data-ng-doc-dragging']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkta2l0L2NvbXBvbmVudHMvdG9nZ2xlL3RvZ2dsZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9jb21wb25lbnRzL3RvZ2dsZS90b2dnbGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTix1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxFQUVOLFNBQVMsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFVNUYsSUFBTSxvQkFBb0IsR0FBMUIsTUFBTSxvQkFDWixTQUFRLGNBQWlCO0lBY3pCO1FBQ0MsS0FBSyxDQUFDO1lBQ0wsSUFBSSxFQUFFLGlCQUFpQixDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO1lBQzNDLFdBQVcsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO1lBQ3RELGdCQUFnQixFQUFFLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDakMsQ0FBQztTQUNELENBQUMsQ0FBQztRQVhKLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFFbEIsa0JBQWEsR0FBVyxDQUFDLENBQUM7SUFVbEMsQ0FBQztJQUVRLFFBQVE7UUFDaEIsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDakMsSUFBSSxDQUFDLGFBQWE7Z0JBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQ3BGLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUM7aUJBQy9DLElBQUksQ0FDSixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzVCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsTUFBTSxVQUFVLEdBQVcsSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7Z0JBQzdFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDckUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFdkIsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ2hELFFBQVEsRUFBRSxFQUNWLEdBQUcsQ0FDRixDQUFDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBaUIsRUFBRSxFQUFFLENBQ3hDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBNkIsQ0FDakQsRUFDRCxHQUFHLENBQ0YsQ0FBQyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQTJCLEVBQUUsRUFBRSxDQUNsRCxRQUFRLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQ3BDLEVBQ0QsTUFBTSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQ3hDLEdBQUcsQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQzFELFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixTQUFTLENBQ1IsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDNUUsRUFDRCxJQUFJLEVBQUUsRUFDTixHQUFHLENBQ0YsR0FBRyxFQUFFLENBQ0osSUFBSSxDQUFDLE1BQU07b0JBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUM1RSxDQUNELENBQUM7WUFDSCxDQUFDLENBQUMsRUFDRixjQUFjLENBQUMsSUFBSSxDQUFDLENBQ3BCO2lCQUNBLFNBQVMsQ0FBQyxDQUFDLE1BQXFCLEVBQUUsRUFBRTtnQkFDcEMsTUFBTSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUM5RCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDRixDQUFDO0lBRVEsV0FBVyxDQUFDLEtBQXlCO1FBQzdDLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFUyxRQUFRLENBQUMsVUFBbUI7UUFDckMsVUFBVTtZQUNULENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtnQkFDWCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQ3pCLFdBQVcsRUFDWCxjQUFjLElBQUksQ0FBQyxhQUFhLEtBQUssQ0FDcEM7WUFDSCxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07Z0JBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFTyxXQUFXLENBQUMsS0FBYztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVPLG1CQUFtQjtRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNuRCxNQUFNLGFBQWEsR0FDbEIsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUNuRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sZ0JBQWdCLEdBQ3JCLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztnQkFDbEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztZQUMzQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQixDQUFDO0lBQ0YsQ0FBQztJQUVPLG9CQUFvQixDQUFDLEtBQWE7UUFDekMsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNqQyxNQUFNLFdBQVcsR0FBVyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FDaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQzFCLENBQUMsQ0FBQyxDQUFDO1lBQ0osTUFBTSxVQUFVLEdBQVcsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUYsTUFBTSxXQUFXLEdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsV0FBVyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUNsRSxDQUFDLENBQ0QsQ0FBQztZQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFDekIsV0FBVyxFQUNYLGNBQWMsV0FBVyxLQUFLLENBQzlCLENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQzs4R0F6SFcsb0JBQW9CO2tHQUFwQixvQkFBb0IsMlhDeEJqQyxxSUFHQTs7QURxQmEsb0JBQW9CO0lBRGhDLFlBQVksRUFBRTs7R0FDRixvQkFBb0IsQ0EwSGhDOzsyRkExSFksb0JBQW9CO2tCQVJoQyxTQUFTOytCQUNDLGVBQWUsbUJBR1IsdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJO3dEQVFSLE9BQU87c0JBRGQsU0FBUzt1QkFBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQUk5QixNQUFNO3NCQURiLFNBQVM7dUJBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFJckMsUUFBUTtzQkFEUCxXQUFXO3VCQUFDLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuXHRDb21wb25lbnQsXG5cdEVsZW1lbnRSZWYsXG5cdEhvc3RCaW5kaW5nLFxuXHRpbmplY3QsXG5cdE9uSW5pdCxcblx0Vmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTmdEb2NQb3NpdGlvblV0aWxzIH0gZnJvbSAnQG5nLWRvYy91aS1raXQvdXRpbHMnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBESUNvbXBhcmVIb3N0LCBESVN0YXRlQ29udHJvbCwgaW5qZWN0SG9zdENvbnRyb2wgfSBmcm9tICdkaS1jb250cm9scyc7XG5pbXBvcnQgeyBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbGFzdCwgbWFwLCBwYWlyd2lzZSwgc3RhcnRXaXRoLCBzd2l0Y2hNYXAsIHRha2VVbnRpbCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICduZy1kb2MtdG9nZ2xlJyxcblx0dGVtcGxhdGVVcmw6ICcuL3RvZ2dsZS5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL3RvZ2dsZS5jb21wb25lbnQuc2NzcyddLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5AVW50aWxEZXN0cm95KClcbmV4cG9ydCBjbGFzcyBOZ0RvY1RvZ2dsZUNvbXBvbmVudDxUPlxuXHRleHRlbmRzIERJU3RhdGVDb250cm9sPFQ+XG5cdGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3Nvclxue1xuXHRAVmlld0NoaWxkKCd3cmFwcGVyJywgeyBzdGF0aWM6IHRydWUgfSlcblx0cHJpdmF0ZSB3cmFwcGVyPzogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XG5cblx0QFZpZXdDaGlsZCgnY2lyY2xlJywgeyBzdGF0aWM6IHRydWUgfSlcblx0cHJpdmF0ZSBjaXJjbGU/OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcblxuXHRASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1uZy1kb2MtZHJhZ2dpbmcnKVxuXHRkcmFnZ2luZzogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdHByaXZhdGUgbWF4UGl4ZWxWYWx1ZTogbnVtYmVyID0gMDtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRob3N0OiBpbmplY3RIb3N0Q29udHJvbCh7IG9wdGlvbmFsOiB0cnVlIH0pLFxuXHRcdFx0Y29tcGFyZUhvc3Q6IGluamVjdChESUNvbXBhcmVIb3N0LCB7IG9wdGlvbmFsOiB0cnVlIH0pLFxuXHRcdFx0b25JbmNvbWluZ1VwZGF0ZTogKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKCEhdGhpcy5jaGVja2VkKCkpO1xuXHRcdFx0fSxcblx0XHR9KTtcblx0fVxuXG5cdG92ZXJyaWRlIG5nT25Jbml0KCk6IHZvaWQge1xuXHRcdHN1cGVyLm5nT25Jbml0KCk7XG5cdFx0aWYgKHRoaXMud3JhcHBlciAmJiB0aGlzLmNpcmNsZSkge1xuXHRcdFx0dGhpcy5tYXhQaXhlbFZhbHVlID1cblx0XHRcdFx0dGhpcy53cmFwcGVyLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggLSB0aGlzLmNpcmNsZS5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIC0gNjtcblx0XHRcdGZyb21FdmVudCh0aGlzLmNpcmNsZS5uYXRpdmVFbGVtZW50LCAnbW91c2Vkb3duJylcblx0XHRcdFx0LnBpcGUoXG5cdFx0XHRcdFx0ZmlsdGVyKCgpID0+ICF0aGlzLmRpc2FibGVkKSxcblx0XHRcdFx0XHRzd2l0Y2hNYXAoKCkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgdHJhbnNpdGlvbjogc3RyaW5nID0gdGhpcy5jaXJjbGU/Lm5hdGl2ZUVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA/PyAnJztcblx0XHRcdFx0XHRcdHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5jaXJjbGU/Lm5hdGl2ZUVsZW1lbnQsICd0cmFuc2l0aW9uJywgJycpO1xuXHRcdFx0XHRcdFx0dGhpcy5zZXREcmFnZ2luZyh0cnVlKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIGZyb21FdmVudChkb2N1bWVudC5ib2R5LCAnbW91c2Vtb3ZlJykucGlwZShcblx0XHRcdFx0XHRcdFx0cGFpcndpc2UoKSxcblx0XHRcdFx0XHRcdFx0bWFwKFxuXHRcdFx0XHRcdFx0XHRcdChbbmV3RXZlbnQsIG9sZEV2ZW50XTogW0V2ZW50LCBFdmVudF0pID0+XG5cdFx0XHRcdFx0XHRcdFx0XHRbbmV3RXZlbnQsIG9sZEV2ZW50XSBhcyBbTW91c2VFdmVudCwgTW91c2VFdmVudF0sXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdG1hcChcblx0XHRcdFx0XHRcdFx0XHQoW25ld0V2ZW50LCBvbGRFdmVudF06IFtNb3VzZUV2ZW50LCBNb3VzZUV2ZW50XSkgPT5cblx0XHRcdFx0XHRcdFx0XHRcdG9sZEV2ZW50LmNsaWVudFggLSBuZXdFdmVudC5jbGllbnRYLFxuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRmaWx0ZXIoKGRlbHRhWDogbnVtYmVyKSA9PiBkZWx0YVggIT09IDApLFxuXHRcdFx0XHRcdFx0XHR0YXAoKGRlbHRhWDogbnVtYmVyKSA9PiB0aGlzLmNoYW5nZUNpcmNsZVBvc2l0aW9uKGRlbHRhWCkpLFxuXHRcdFx0XHRcdFx0XHRzdGFydFdpdGgobnVsbCksXG5cdFx0XHRcdFx0XHRcdHRha2VVbnRpbChcblx0XHRcdFx0XHRcdFx0XHRmcm9tRXZlbnQoZG9jdW1lbnQuYm9keSwgJ21vdXNldXAnKS5waXBlKHRhcCgoKSA9PiB0aGlzLnNldERyYWdnaW5nKGZhbHNlKSkpLFxuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRsYXN0KCksXG5cdFx0XHRcdFx0XHRcdHRhcChcblx0XHRcdFx0XHRcdFx0XHQoKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5jaXJjbGUgJiZcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5jaXJjbGUubmF0aXZlRWxlbWVudCwgJ3RyYW5zaXRpb24nLCB0cmFuc2l0aW9uKSxcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0dW50aWxEZXN0cm95ZWQodGhpcyksXG5cdFx0XHRcdClcblx0XHRcdFx0LnN1YnNjcmliZSgoZGVsdGFYOiBudW1iZXIgfCBudWxsKSA9PiB7XG5cdFx0XHRcdFx0ZGVsdGFYID09PSBudWxsID8gdGhpcy50b2dnbGUoKSA6IHRoaXMuZGV0ZWN0QnlDb29yZGluYXRlcygpO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRvdmVycmlkZSB1cGRhdGVNb2RlbCh2YWx1ZTogYm9vbGVhbiB8IFQgfCBudWxsKTogdm9pZCB7XG5cdFx0c3VwZXIudXBkYXRlTW9kZWwodmFsdWUpO1xuXHRcdHRoaXMuc2V0U3RhdGUoISF0aGlzLmNoZWNrZWQpO1xuXHR9XG5cblx0cHJvdGVjdGVkIHNldFN0YXRlKGlzU2VsZWN0ZWQ6IGJvb2xlYW4pOiB2b2lkIHtcblx0XHRpc1NlbGVjdGVkXG5cdFx0XHQ/IHRoaXMuY2lyY2xlICYmXG5cdFx0XHQgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG5cdFx0XHRcdFx0dGhpcy5jaXJjbGUubmF0aXZlRWxlbWVudCxcblx0XHRcdFx0XHQndHJhbnNmb3JtJyxcblx0XHRcdFx0XHRgdHJhbnNsYXRlWCgke3RoaXMubWF4UGl4ZWxWYWx1ZX1weClgLFxuXHRcdFx0ICApXG5cdFx0XHQ6IHRoaXMuY2lyY2xlICYmXG5cdFx0XHQgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5jaXJjbGUubmF0aXZlRWxlbWVudCwgJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGVYKDApYCk7XG5cdH1cblxuXHRwcml2YXRlIHNldERyYWdnaW5nKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG5cdFx0dGhpcy5kcmFnZ2luZyA9IHZhbHVlO1xuXHRcdHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG5cdH1cblxuXHRwcml2YXRlIGRldGVjdEJ5Q29vcmRpbmF0ZXMoKTogdm9pZCB7XG5cdFx0aWYgKCF0aGlzLmRpc2FibGVkICYmIHRoaXMud3JhcHBlciAmJiB0aGlzLmNpcmNsZSkge1xuXHRcdFx0Y29uc3Qgd3JhcHBlck1pZGRsZTogbnVtYmVyID1cblx0XHRcdFx0TmdEb2NQb3NpdGlvblV0aWxzLmdldEVsZW1lbnRQb3NpdGlvbih0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudCkueCArXG5cdFx0XHRcdHRoaXMud3JhcHBlci5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIC8gMjtcblx0XHRcdGNvbnN0IGNpcmNsZUNlbnRlckxlZnQ6IG51bWJlciA9XG5cdFx0XHRcdE5nRG9jUG9zaXRpb25VdGlscy5nZXRFbGVtZW50UG9zaXRpb24odGhpcy5jaXJjbGUubmF0aXZlRWxlbWVudCkueCArXG5cdFx0XHRcdHRoaXMuY2lyY2xlLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggLyAyO1xuXHRcdFx0Y2lyY2xlQ2VudGVyTGVmdCA+IHdyYXBwZXJNaWRkbGUgPyB0aGlzLmNoZWNrKCkgOiB0aGlzLnVuY2hlY2soKTtcblx0XHRcdHRoaXMuc2V0U3RhdGUoISF0aGlzLmNoZWNrZWQpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgY2hhbmdlQ2lyY2xlUG9zaXRpb24oZGVsdGE6IG51bWJlcik6IHZvaWQge1xuXHRcdGlmICh0aGlzLndyYXBwZXIgJiYgdGhpcy5jaXJjbGUpIHtcblx0XHRcdGNvbnN0IHdyYXBwZXJMZWZ0OiBudW1iZXIgPSBOZ0RvY1Bvc2l0aW9uVXRpbHMuZ2V0RWxlbWVudFBvc2l0aW9uKFxuXHRcdFx0XHR0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudCxcblx0XHRcdCkueDtcblx0XHRcdGNvbnN0IGNpcmNsZUxlZnQ6IG51bWJlciA9IE5nRG9jUG9zaXRpb25VdGlscy5nZXRFbGVtZW50UG9zaXRpb24odGhpcy5jaXJjbGUubmF0aXZlRWxlbWVudCkueDtcblx0XHRcdGNvbnN0IG5ld1Bvc2l0aW9uOiBudW1iZXIgPSBNYXRoLm1heChcblx0XHRcdFx0TWF0aC5taW4oY2lyY2xlTGVmdCAtIHdyYXBwZXJMZWZ0IC0gMyArIGRlbHRhLCB0aGlzLm1heFBpeGVsVmFsdWUpLFxuXHRcdFx0XHQwLFxuXHRcdFx0KTtcblx0XHRcdHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG5cdFx0XHRcdHRoaXMuY2lyY2xlLm5hdGl2ZUVsZW1lbnQsXG5cdFx0XHRcdCd0cmFuc2Zvcm0nLFxuXHRcdFx0XHRgdHJhbnNsYXRlWCgke25ld1Bvc2l0aW9ufXB4KWAsXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxufVxuIiwiPGRpdiBjbGFzcz1cIm5nLWRvYy10b2dnbGUtd3JhcHBlclwiIChjbGljayk9XCJ0b2dnbGUoKVwiICN3cmFwcGVyPlxuXHQ8ZGl2IGNsYXNzPVwibmctZG9jLXRvZ2dsZS1jaXJjbGVcIiAjY2lyY2xlPjwvZGl2PlxuPC9kaXY+XG4iXX0=