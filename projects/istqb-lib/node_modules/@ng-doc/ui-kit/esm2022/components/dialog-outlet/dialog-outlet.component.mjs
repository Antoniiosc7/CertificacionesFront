import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, inject, Input, TemplateRef, ViewChild, } from '@angular/core';
import { ActivatedRoute, Router, RouterOutlet } from '@angular/router';
import { NgDocDialogService } from '@ng-doc/ui-kit/services/dialog';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { merge, NEVER, Subject, switchMap } from 'rxjs';
import { map, startWith, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
let DialogOutletComponent = class DialogOutletComponent {
    constructor() {
        this.router = inject(Router);
        this.route = inject(ActivatedRoute);
        this.dialogService = inject(NgDocDialogService);
    }
    ngAfterContentInit() {
        if (this.routerOutlet) {
            const dialogRef = new Subject();
            dialogRef
                .pipe(switchMap((dialogRef) => dialogRef.beforeClose().pipe(takeUntil(this.routerOutlet?.deactivateEvents ?? NEVER))), untilDestroyed(this))
                .subscribe(() => {
                const url = this.route.pathFromRoot
                    .map((r) => r.snapshot.url)
                    .filter((f) => !!f[0])
                    .map(([f]) => f.path)
                    .join('/');
                this.router.navigateByUrl(url);
            });
            merge(this.routerOutlet.activateEvents.pipe(map(() => true)), this.routerOutlet.deactivateEvents.pipe(map(() => false)))
                .pipe(startWith(this.routerOutlet.isActivated), untilDestroyed(this))
                .subscribe((activated) => {
                if (activated) {
                    this.dialogRef = this.dialogService.open(this.outletContent, this.config);
                    dialogRef.next(this.dialogRef);
                }
                else {
                    this.dialogRef?.close();
                }
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: DialogOutletComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: DialogOutletComponent, isStandalone: true, selector: "ng-doc-dialog-outlet", inputs: { config: "config" }, queries: [{ propertyName: "routerOutlet", first: true, predicate: RouterOutlet, descendants: true }], viewQueries: [{ propertyName: "outletContent", first: true, predicate: ["outletContent"], descendants: true, static: true }], ngImport: i0, template: `
		<ng-template #outletContent>
			<ng-content></ng-content>
		</ng-template>
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
};
DialogOutletComponent = __decorate([
    UntilDestroy()
], DialogOutletComponent);
export { DialogOutletComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: DialogOutletComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ng-doc-dialog-outlet',
                    standalone: true,
                    template: `
		<ng-template #outletContent>
			<ng-content></ng-content>
		</ng-template>
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { config: [{
                type: Input
            }], outletContent: [{
                type: ViewChild,
                args: ['outletContent', { static: true }]
            }], routerOutlet: [{
                type: ContentChild,
                args: [RouterOutlet]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLW91dGxldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWtpdC9jb21wb25lbnRzL2RpYWxvZy1vdXRsZXQvZGlhbG9nLW91dGxldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFTix1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxTQUFTLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFdkUsT0FBTyxFQUFxQixrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4RCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFhcEQsSUFBTSxxQkFBcUIsR0FBM0IsTUFBTSxxQkFBcUI7SUFBM0I7UUFZYSxXQUFNLEdBQVcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLFVBQUssR0FBbUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLGtCQUFhLEdBQXVCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBdUNsRjtJQXJDQSxrQkFBa0I7UUFDakIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDdkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxPQUFPLEVBQW1CLENBQUM7WUFFakQsU0FBUztpQkFDUCxJQUFJLENBQ0osU0FBUyxDQUFDLENBQUMsU0FBMEIsRUFBRSxFQUFFLENBQ3hDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLElBQUksS0FBSyxDQUFDLENBQUMsQ0FDckYsRUFDRCxjQUFjLENBQUMsSUFBSSxDQUFDLENBQ3BCO2lCQUNBLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2YsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZO3FCQUNqQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO3FCQUMxQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7cUJBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFFWixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxDQUFDLENBQUMsQ0FBQztZQUVKLEtBQUssQ0FDSixJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3RELElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUN6RDtpQkFDQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNwRSxTQUFTLENBQUMsQ0FBQyxTQUFrQixFQUFFLEVBQUU7Z0JBQ2pDLElBQUksU0FBUyxFQUFFLENBQUM7b0JBQ2YsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFFMUUsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2hDLENBQUM7cUJBQU0sQ0FBQztvQkFDUCxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUN6QixDQUFDO1lBQ0YsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0YsQ0FBQzs4R0FwRFcscUJBQXFCO2tHQUFyQixxQkFBcUIsd0pBT25CLFlBQVksOEtBZmhCOzs7O0VBSVQ7O0FBSVcscUJBQXFCO0lBRGpDLFlBQVksRUFBRTtHQUNGLHFCQUFxQixDQXFEakM7OzJGQXJEWSxxQkFBcUI7a0JBWGpDLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRTs7OztFQUlUO29CQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUMvQzs4QkFJQSxNQUFNO3NCQURMLEtBQUs7Z0JBSU4sYUFBYTtzQkFEWixTQUFTO3VCQUFDLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBSTVDLFlBQVk7c0JBRFgsWUFBWTt1QkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QWZ0ZXJDb250ZW50SW5pdCxcblx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG5cdENvbXBvbmVudCxcblx0Q29udGVudENoaWxkLFxuXHRpbmplY3QsXG5cdElucHV0LFxuXHRUZW1wbGF0ZVJlZixcblx0Vmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIsIFJvdXRlck91dGxldCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBOZ0RvY092ZXJsYXlSZWYgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9jbGFzc2VzL292ZXJsYXktcmVmJztcbmltcG9ydCB7IE5nRG9jRGlhbG9nQ29uZmlnLCBOZ0RvY0RpYWxvZ1NlcnZpY2UgfSBmcm9tICdAbmctZG9jL3VpLWtpdC9zZXJ2aWNlcy9kaWFsb2cnO1xuaW1wb3J0IHsgVW50aWxEZXN0cm95LCB1bnRpbERlc3Ryb3llZCB9IGZyb20gJ0BuZ25lYXQvdW50aWwtZGVzdHJveSc7XG5pbXBvcnQgeyBtZXJnZSwgTkVWRVIsIFN1YmplY3QsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzdGFydFdpdGgsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnbmctZG9jLWRpYWxvZy1vdXRsZXQnLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxuZy10ZW1wbGF0ZSAjb3V0bGV0Q29udGVudD5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L25nLXRlbXBsYXRlPlxuXHRgLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5AVW50aWxEZXN0cm95KClcbmV4cG9ydCBjbGFzcyBEaWFsb2dPdXRsZXRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcblx0QElucHV0KClcblx0Y29uZmlnPzogTmdEb2NEaWFsb2dDb25maWc7XG5cblx0QFZpZXdDaGlsZCgnb3V0bGV0Q29udGVudCcsIHsgc3RhdGljOiB0cnVlIH0pXG5cdG91dGxldENvbnRlbnQhOiBUZW1wbGF0ZVJlZjxuZXZlcj47XG5cblx0QENvbnRlbnRDaGlsZChSb3V0ZXJPdXRsZXQpXG5cdHJvdXRlck91dGxldD86IFJvdXRlck91dGxldDtcblxuXHRkaWFsb2dSZWY/OiBOZ0RvY092ZXJsYXlSZWY7XG5cblx0cHJvdGVjdGVkIHJlYWRvbmx5IHJvdXRlcjogUm91dGVyID0gaW5qZWN0KFJvdXRlcik7XG5cdHByb3RlY3RlZCByZWFkb25seSByb3V0ZTogQWN0aXZhdGVkUm91dGUgPSBpbmplY3QoQWN0aXZhdGVkUm91dGUpO1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgZGlhbG9nU2VydmljZTogTmdEb2NEaWFsb2dTZXJ2aWNlID0gaW5qZWN0KE5nRG9jRGlhbG9nU2VydmljZSk7XG5cblx0bmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLnJvdXRlck91dGxldCkge1xuXHRcdFx0Y29uc3QgZGlhbG9nUmVmID0gbmV3IFN1YmplY3Q8TmdEb2NPdmVybGF5UmVmPigpO1xuXG5cdFx0XHRkaWFsb2dSZWZcblx0XHRcdFx0LnBpcGUoXG5cdFx0XHRcdFx0c3dpdGNoTWFwKChkaWFsb2dSZWY6IE5nRG9jT3ZlcmxheVJlZikgPT5cblx0XHRcdFx0XHRcdGRpYWxvZ1JlZi5iZWZvcmVDbG9zZSgpLnBpcGUodGFrZVVudGlsKHRoaXMucm91dGVyT3V0bGV0Py5kZWFjdGl2YXRlRXZlbnRzID8/IE5FVkVSKSksXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHR1bnRpbERlc3Ryb3llZCh0aGlzKSxcblx0XHRcdFx0KVxuXHRcdFx0XHQuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRcdFx0XHRjb25zdCB1cmwgPSB0aGlzLnJvdXRlLnBhdGhGcm9tUm9vdFxuXHRcdFx0XHRcdFx0Lm1hcCgocikgPT4gci5zbmFwc2hvdC51cmwpXG5cdFx0XHRcdFx0XHQuZmlsdGVyKChmKSA9PiAhIWZbMF0pXG5cdFx0XHRcdFx0XHQubWFwKChbZl0pID0+IGYucGF0aClcblx0XHRcdFx0XHRcdC5qb2luKCcvJyk7XG5cblx0XHRcdFx0XHR0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKHVybCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRtZXJnZShcblx0XHRcdFx0dGhpcy5yb3V0ZXJPdXRsZXQuYWN0aXZhdGVFdmVudHMucGlwZShtYXAoKCkgPT4gdHJ1ZSkpLFxuXHRcdFx0XHR0aGlzLnJvdXRlck91dGxldC5kZWFjdGl2YXRlRXZlbnRzLnBpcGUobWFwKCgpID0+IGZhbHNlKSksXG5cdFx0XHQpXG5cdFx0XHRcdC5waXBlKHN0YXJ0V2l0aCh0aGlzLnJvdXRlck91dGxldC5pc0FjdGl2YXRlZCksIHVudGlsRGVzdHJveWVkKHRoaXMpKVxuXHRcdFx0XHQuc3Vic2NyaWJlKChhY3RpdmF0ZWQ6IGJvb2xlYW4pID0+IHtcblx0XHRcdFx0XHRpZiAoYWN0aXZhdGVkKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nU2VydmljZS5vcGVuKHRoaXMub3V0bGV0Q29udGVudCwgdGhpcy5jb25maWcpO1xuXG5cdFx0XHRcdFx0XHRkaWFsb2dSZWYubmV4dCh0aGlzLmRpYWxvZ1JlZik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMuZGlhbG9nUmVmPy5jbG9zZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0fVxuXHR9XG59XG4iXX0=