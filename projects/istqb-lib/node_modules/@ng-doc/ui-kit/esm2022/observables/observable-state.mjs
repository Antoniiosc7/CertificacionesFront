import { of } from 'rxjs';
import { catchError, map, startWith, switchMap, tap } from 'rxjs/operators';
/**
 *
 * @param retry
 */
export function observableState(retry) {
    return (source) => {
        let state = {
            result: null,
            error: null,
            pending: false,
        };
        return (retry ? retry.pipe(startWith(null)) : of(null)).pipe(switchMap(() => source.pipe(
        // Map result of observable
        map((result) => ({ result, pending: false })), 
        // Map error of observable
        catchError((error) => of({ result: null, error, pending: false })), 
        // Start from pending state and clear error
        startWith({ error: null, pending: true }), 
        // Merge the current state with new state
        tap((updatedState) => (state = { ...state, ...updatedState })), map(() => state))));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YWJsZS1zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWkta2l0L29ic2VydmFibGVzL29ic2VydmFibGUtc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBVTVFOzs7R0FHRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQzlCLEtBQTJCO0lBRTNCLE9BQU8sQ0FBQyxNQUFxQixFQUFFLEVBQUU7UUFDaEMsSUFBSSxLQUFLLEdBQTBCO1lBQ2xDLE1BQU0sRUFBRSxJQUFJO1lBQ1osS0FBSyxFQUFFLElBQUk7WUFDWCxPQUFPLEVBQUUsS0FBSztTQUNkLENBQUM7UUFFRixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQzNELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FDZCxNQUFNLENBQUMsSUFBSTtRQUNWLDJCQUEyQjtRQUMzQixHQUFHLENBQUMsQ0FBQyxNQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDaEQsMEJBQTBCO1FBQzFCLFVBQVUsQ0FBQyxDQUFDLEtBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDckUsMkNBQTJDO1FBQzNDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3pDLHlDQUF5QztRQUN6QyxHQUFHLENBQ0YsQ0FBQyxZQUE0QyxFQUFFLEVBQUUsQ0FDaEQsQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLEtBQUssRUFBRSxHQUFHLFlBQVksRUFBRSxDQUFDLENBQ3hDLEVBQ0QsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUNoQixDQUNELENBQ0QsQ0FBQztJQUNILENBQUMsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE9ic2VydmFibGUsIE9wZXJhdG9yRnVuY3Rpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHN0YXJ0V2l0aCwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCB0eXBlIFN0YXRlZE9ic2VydmFibGU8VCwgRSA9IEVycm9yPiA9IE9ic2VydmFibGU8T2JzZXJ2YWJsZVN0YXRlPFQsIEU+PjtcblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlU3RhdGU8VCwgRSA9IEVycm9yPiB7XG5cdHJlc3VsdDogVCB8IG51bGw7XG5cdGVycm9yOiBFIHwgbnVsbDtcblx0cGVuZGluZzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHJldHJ5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZhYmxlU3RhdGU8VCwgRSA9IEVycm9yPihcblx0cmV0cnk/OiBPYnNlcnZhYmxlPHVua25vd24+LFxuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBPYnNlcnZhYmxlU3RhdGU8VCwgRT4+IHtcblx0cmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8VD4pID0+IHtcblx0XHRsZXQgc3RhdGU6IE9ic2VydmFibGVTdGF0ZTxULCBFPiA9IHtcblx0XHRcdHJlc3VsdDogbnVsbCxcblx0XHRcdGVycm9yOiBudWxsLFxuXHRcdFx0cGVuZGluZzogZmFsc2UsXG5cdFx0fTtcblxuXHRcdHJldHVybiAocmV0cnkgPyByZXRyeS5waXBlKHN0YXJ0V2l0aChudWxsKSkgOiBvZihudWxsKSkucGlwZShcblx0XHRcdHN3aXRjaE1hcCgoKSA9PlxuXHRcdFx0XHRzb3VyY2UucGlwZShcblx0XHRcdFx0XHQvLyBNYXAgcmVzdWx0IG9mIG9ic2VydmFibGVcblx0XHRcdFx0XHRtYXAoKHJlc3VsdDogVCkgPT4gKHsgcmVzdWx0LCBwZW5kaW5nOiBmYWxzZSB9KSksXG5cdFx0XHRcdFx0Ly8gTWFwIGVycm9yIG9mIG9ic2VydmFibGVcblx0XHRcdFx0XHRjYXRjaEVycm9yKChlcnJvcjogRSkgPT4gb2YoeyByZXN1bHQ6IG51bGwsIGVycm9yLCBwZW5kaW5nOiBmYWxzZSB9KSksXG5cdFx0XHRcdFx0Ly8gU3RhcnQgZnJvbSBwZW5kaW5nIHN0YXRlIGFuZCBjbGVhciBlcnJvclxuXHRcdFx0XHRcdHN0YXJ0V2l0aCh7IGVycm9yOiBudWxsLCBwZW5kaW5nOiB0cnVlIH0pLFxuXHRcdFx0XHRcdC8vIE1lcmdlIHRoZSBjdXJyZW50IHN0YXRlIHdpdGggbmV3IHN0YXRlXG5cdFx0XHRcdFx0dGFwKFxuXHRcdFx0XHRcdFx0KHVwZGF0ZWRTdGF0ZTogUGFydGlhbDxPYnNlcnZhYmxlU3RhdGU8VCwgRT4+KSA9PlxuXHRcdFx0XHRcdFx0XHQoc3RhdGUgPSB7IC4uLnN0YXRlLCAuLi51cGRhdGVkU3RhdGUgfSksXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRtYXAoKCkgPT4gc3RhdGUpLFxuXHRcdFx0XHQpLFxuXHRcdFx0KSxcblx0XHQpO1xuXHR9O1xufVxuIl19