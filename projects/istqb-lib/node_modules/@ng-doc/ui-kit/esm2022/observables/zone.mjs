import { Observable, pipe, } from 'rxjs';
class NgDocZoneDetachSourceOperator {
    constructor(ngZone) {
        this.ngZone = ngZone;
    }
    call(observer, source) {
        return this.ngZone.runOutsideAngular(() => source.subscribe(observer));
    }
}
/**
 *
 * @param ngZone
 */
function zoneDetachSource(ngZone) {
    return (source) => source.lift(new NgDocZoneDetachSourceOperator(ngZone));
}
/**
 *
 * @param ngZone
 */
function zoneDetach(ngZone) {
    return (source) => new Observable((subscriber) => source.subscribe({
        next: (value) => ngZone.runOutsideAngular(() => subscriber.next(value)),
        error: (error) => ngZone.runOutsideAngular(() => subscriber.error(error)),
        complete: () => ngZone.runOutsideAngular(() => subscriber.complete()),
    }));
}
/**
 *
 * @param ngZone
 */
export function ngDocZoneAttach(ngZone) {
    return (source) => new Observable((subscriber) => source.subscribe({
        next: (value) => ngZone.run(() => subscriber.next(value)),
        error: (error) => ngZone.run(() => subscriber.error(error)),
        complete: () => ngZone.run(() => subscriber.complete()),
    }));
}
/**
 *
 * @param ngZone
 */
export function ngDocZoneDetach(ngZone) {
    return pipe(zoneDetach(ngZone), zoneDetachSource(ngZone));
}
/**
 *
 * @param ngZone
 */
export function ngDocZoneOptimize(ngZone) {
    return pipe(zoneDetach(ngZone), zoneDetachSource(ngZone), ngDocZoneAttach(ngZone));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWkta2l0L29ic2VydmFibGVzL3pvbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUVOLFVBQVUsRUFHVixJQUFJLEdBR0osTUFBTSxNQUFNLENBQUM7QUFFZCxNQUFNLDZCQUE2QjtJQUNsQyxZQUE2QixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFL0MsSUFBSSxDQUFDLFFBQXFCLEVBQUUsTUFBcUI7UUFDaEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0NBQ0Q7QUFFRDs7O0dBR0c7QUFDSCxTQUFTLGdCQUFnQixDQUFJLE1BQWM7SUFDMUMsT0FBTyxDQUFDLE1BQXFCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSw2QkFBNkIsQ0FBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzdGLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFTLFVBQVUsQ0FBSSxNQUFjO0lBQ3BDLE9BQU8sQ0FBQyxNQUFxQixFQUFFLEVBQUUsQ0FDaEMsSUFBSSxVQUFVLENBQUMsQ0FBQyxVQUF5QixFQUFFLEVBQUUsQ0FDNUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNoQixJQUFJLEVBQUUsQ0FBQyxLQUFRLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFFLEtBQUssRUFBRSxDQUFDLEtBQWMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEYsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDckUsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBSSxNQUFjO0lBQ2hELE9BQU8sQ0FBQyxNQUFxQixFQUFFLEVBQUUsQ0FDaEMsSUFBSSxVQUFVLENBQUMsQ0FBQyxVQUF5QixFQUFFLEVBQUUsQ0FDNUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNoQixJQUFJLEVBQUUsQ0FBQyxLQUFRLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxLQUFLLEVBQUUsQ0FBQyxLQUFjLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDdkQsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBSSxNQUFjO0lBQ2hELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUksTUFBYztJQUNsRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDcEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcblx0TW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uLFxuXHRPYnNlcnZhYmxlLFxuXHRPYnNlcnZlcixcblx0T3BlcmF0b3IsXG5cdHBpcGUsXG5cdFN1YnNjcmliZXIsXG5cdFRlYXJkb3duTG9naWMsXG59IGZyb20gJ3J4anMnO1xuXG5jbGFzcyBOZ0RvY1pvbmVEZXRhY2hTb3VyY2VPcGVyYXRvcjxUPiBpbXBsZW1lbnRzIE9wZXJhdG9yPFQsIFQ+IHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBuZ1pvbmU6IE5nWm9uZSkge31cblxuXHRjYWxsKG9ic2VydmVyOiBPYnNlcnZlcjxUPiwgc291cmNlOiBPYnNlcnZhYmxlPFQ+KTogVGVhcmRvd25Mb2dpYyB7XG5cdFx0cmV0dXJuIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHNvdXJjZS5zdWJzY3JpYmUob2JzZXJ2ZXIpKTtcblx0fVxufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gbmdab25lXG4gKi9cbmZ1bmN0aW9uIHpvbmVEZXRhY2hTb3VyY2U8VD4obmdab25lOiBOZ1pvbmUpOiBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb248VD4ge1xuXHRyZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxUPikgPT4gc291cmNlLmxpZnQobmV3IE5nRG9jWm9uZURldGFjaFNvdXJjZU9wZXJhdG9yPFQ+KG5nWm9uZSkpO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gbmdab25lXG4gKi9cbmZ1bmN0aW9uIHpvbmVEZXRhY2g8VD4obmdab25lOiBOZ1pvbmUpOiBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb248VD4ge1xuXHRyZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxUPikgPT5cblx0XHRuZXcgT2JzZXJ2YWJsZSgoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPikgPT5cblx0XHRcdHNvdXJjZS5zdWJzY3JpYmUoe1xuXHRcdFx0XHRuZXh0OiAodmFsdWU6IFQpID0+IG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBzdWJzY3JpYmVyLm5leHQodmFsdWUpKSxcblx0XHRcdFx0ZXJyb3I6IChlcnJvcjogdW5rbm93bikgPT4gbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHN1YnNjcmliZXIuZXJyb3IoZXJyb3IpKSxcblx0XHRcdFx0Y29tcGxldGU6ICgpID0+IG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBzdWJzY3JpYmVyLmNvbXBsZXRlKCkpLFxuXHRcdFx0fSksXG5cdFx0KTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIG5nWm9uZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbmdEb2Nab25lQXR0YWNoPFQ+KG5nWm9uZTogTmdab25lKTogTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFQ+IHtcblx0cmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8VD4pID0+XG5cdFx0bmV3IE9ic2VydmFibGUoKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pID0+XG5cdFx0XHRzb3VyY2Uuc3Vic2NyaWJlKHtcblx0XHRcdFx0bmV4dDogKHZhbHVlOiBUKSA9PiBuZ1pvbmUucnVuKCgpID0+IHN1YnNjcmliZXIubmV4dCh2YWx1ZSkpLFxuXHRcdFx0XHRlcnJvcjogKGVycm9yOiB1bmtub3duKSA9PiBuZ1pvbmUucnVuKCgpID0+IHN1YnNjcmliZXIuZXJyb3IoZXJyb3IpKSxcblx0XHRcdFx0Y29tcGxldGU6ICgpID0+IG5nWm9uZS5ydW4oKCkgPT4gc3Vic2NyaWJlci5jb21wbGV0ZSgpKSxcblx0XHRcdH0pLFxuXHRcdCk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBuZ1pvbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5nRG9jWm9uZURldGFjaDxUPihuZ1pvbmU6IE5nWm9uZSk6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPiB7XG5cdHJldHVybiBwaXBlKHpvbmVEZXRhY2gobmdab25lKSwgem9uZURldGFjaFNvdXJjZShuZ1pvbmUpKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIG5nWm9uZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbmdEb2Nab25lT3B0aW1pemU8VD4obmdab25lOiBOZ1pvbmUpOiBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb248VD4ge1xuXHRyZXR1cm4gcGlwZSh6b25lRGV0YWNoKG5nWm9uZSksIHpvbmVEZXRhY2hTb3VyY2Uobmdab25lKSwgbmdEb2Nab25lQXR0YWNoKG5nWm9uZSkpO1xufVxuIl19