import { Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2, } from '@angular/core';
import * as i0 from "@angular/core";
export class NgDocCheckedChangeDirective {
    set ngDocChecked(checked) {
        this.updateProperty('checked', checked || false);
        this.updateProperty('indeterminate', checked === null);
    }
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.ngDocCheckedChange = new EventEmitter();
        this.updateProperty('checked', false);
    }
    onChange({ checked }) {
        this.updateProperty('indeterminate', false);
        this.ngDocCheckedChange.emit(checked);
    }
    updateProperty(property, value) {
        this.renderer.setProperty(this.element.nativeElement, property, value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocCheckedChangeDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.1.0", type: NgDocCheckedChangeDirective, isStandalone: true, selector: "input[ngDocChecked], input[ngDocCheckedChange]", inputs: { ngDocChecked: "ngDocChecked" }, outputs: { ngDocCheckedChange: "ngDocCheckedChange" }, host: { listeners: { "change": "onChange($event.target)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocCheckedChangeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[ngDocChecked], input[ngDocCheckedChange]',
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }], propDecorators: { ngDocChecked: [{
                type: Input
            }], ngDocCheckedChange: [{
                type: Output
            }], onChange: [{
                type: HostListener,
                args: ['change', ['$event.target']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tlZC1jaGFuZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1raXQvZGlyZWN0aXZlcy9jaGVja2VkLWNoYW5nZS9jaGVja2VkLWNoYW5nZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsR0FDVCxNQUFNLGVBQWUsQ0FBQzs7QUFNdkIsTUFBTSxPQUFPLDJCQUEyQjtJQUN2QyxJQUNJLFlBQVksQ0FBQyxPQUF1QjtRQUN2QyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLElBQUksS0FBSyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFLRCxZQUNrQixPQUFxQyxFQUNyQyxRQUFtQjtRQURuQixZQUFPLEdBQVAsT0FBTyxDQUE4QjtRQUNyQyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSjVCLHVCQUFrQixHQUEwQixJQUFJLFlBQVksRUFBVyxDQUFDO1FBTWhGLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFHRCxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQW9CO1FBQ3JDLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVPLGNBQWMsQ0FBQyxRQUFxQyxFQUFFLEtBQWM7UUFDM0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hFLENBQUM7OEdBekJXLDJCQUEyQjtrR0FBM0IsMkJBQTJCOzsyRkFBM0IsMkJBQTJCO2tCQUp2QyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxnREFBZ0Q7b0JBQzFELFVBQVUsRUFBRSxJQUFJO2lCQUNoQjt1R0FHSSxZQUFZO3NCQURmLEtBQUs7Z0JBT0csa0JBQWtCO3NCQUQxQixNQUFNO2dCQVdQLFFBQVE7c0JBRFAsWUFBWTt1QkFBQyxRQUFRLEVBQUUsQ0FBQyxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHREaXJlY3RpdmUsXG5cdEVsZW1lbnRSZWYsXG5cdEV2ZW50RW1pdHRlcixcblx0SG9zdExpc3RlbmVyLFxuXHRJbnB1dCxcblx0T3V0cHV0LFxuXHRSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdpbnB1dFtuZ0RvY0NoZWNrZWRdLCBpbnB1dFtuZ0RvY0NoZWNrZWRDaGFuZ2VdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgTmdEb2NDaGVja2VkQ2hhbmdlRGlyZWN0aXZlIHtcblx0QElucHV0KClcblx0c2V0IG5nRG9jQ2hlY2tlZChjaGVja2VkOiBudWxsIHwgYm9vbGVhbikge1xuXHRcdHRoaXMudXBkYXRlUHJvcGVydHkoJ2NoZWNrZWQnLCBjaGVja2VkIHx8IGZhbHNlKTtcblx0XHR0aGlzLnVwZGF0ZVByb3BlcnR5KCdpbmRldGVybWluYXRlJywgY2hlY2tlZCA9PT0gbnVsbCk7XG5cdH1cblxuXHRAT3V0cHV0KClcblx0cmVhZG9ubHkgbmdEb2NDaGVja2VkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+LFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMixcblx0KSB7XG5cdFx0dGhpcy51cGRhdGVQcm9wZXJ0eSgnY2hlY2tlZCcsIGZhbHNlKTtcblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoJ2NoYW5nZScsIFsnJGV2ZW50LnRhcmdldCddKVxuXHRvbkNoYW5nZSh7IGNoZWNrZWQgfTogSFRNTElucHV0RWxlbWVudCk6IHZvaWQge1xuXHRcdHRoaXMudXBkYXRlUHJvcGVydHkoJ2luZGV0ZXJtaW5hdGUnLCBmYWxzZSk7XG5cdFx0dGhpcy5uZ0RvY0NoZWNrZWRDaGFuZ2UuZW1pdChjaGVja2VkKTtcblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlUHJvcGVydHkocHJvcGVydHk6ICdjaGVja2VkJyB8ICdpbmRldGVybWluYXRlJywgdmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcblx0XHR0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCBwcm9wZXJ0eSwgdmFsdWUpO1xuXHR9XG59XG4iXX0=