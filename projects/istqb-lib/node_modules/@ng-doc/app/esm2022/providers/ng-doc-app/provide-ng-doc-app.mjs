import { ViewportScroller } from '@angular/common';
import { APP_INITIALIZER, Optional } from '@angular/core';
import { NG_DOC_NIGHT_THEME, NG_DOC_STORE_THEME_KEY } from '@ng-doc/app/constants';
import { NgDocStoreService, NgDocThemeService } from '@ng-doc/app/services';
import { NG_DOC_DEFAULT_THEME_ID, NG_DOC_THEME } from '@ng-doc/app/tokens';
import { asArray, isBrowser } from '@ng-doc/core';
import { provideNgDocUiKitConfig } from '@ng-doc/ui-kit';
/**
 * Provides the NgDoc application configuration.
 * @param config - The optional application configuration.
 */
export function provideNgDocApp(config) {
    return [
        /* --- Themes --- */
        { provide: NG_DOC_THEME, useValue: NG_DOC_NIGHT_THEME, multi: true },
        ...asArray(config?.themes).map((theme) => ({
            provide: NG_DOC_THEME,
            useValue: theme,
            multi: true,
        })),
        ...asArray(config?.defaultThemeId).map((themeId) => ({
            provide: NG_DOC_DEFAULT_THEME_ID,
            useValue: themeId,
        })),
        /* --- Theme Initializer--- */
        {
            provide: APP_INITIALIZER,
            useFactory: (themeService, store, defaultThemeId) => {
                return async () => {
                    const savedThemeId = isBrowser ? store.get(NG_DOC_STORE_THEME_KEY) : null;
                    if ((defaultThemeId === 'auto' && !savedThemeId) ||
                        savedThemeId === NgDocThemeService.autoThemeId) {
                        return themeService.enableAutoTheme(undefined, NG_DOC_NIGHT_THEME);
                    }
                    else if (isBrowser) {
                        return themeService.set(savedThemeId ?? defaultThemeId, false);
                    }
                };
            },
            multi: true,
            deps: [NgDocThemeService, NgDocStoreService, [new Optional(), NG_DOC_DEFAULT_THEME_ID]],
        },
        /* --- Viewport Scroller --- */
        {
            provide: APP_INITIALIZER,
            multi: true,
            deps: [ViewportScroller],
            useFactory: (viewportScroller) => {
                return () => viewportScroller.setOffset([0, 64]);
            },
        },
        /* --- UiKit --- */
        ...provideNgDocUiKitConfig(config?.uiKit),
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS1uZy1kb2MtYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hcHAvcHJvdmlkZXJzL25nLWRvYy1hcHAvcHJvdmlkZS1uZy1kb2MtYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRW5GLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzVFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNsRCxPQUFPLEVBQWlCLHVCQUF1QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUF1QnhFOzs7R0FHRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBK0I7SUFDOUQsT0FBTztRQUNOLG9CQUFvQjtRQUNwQixFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDcEUsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdEQsT0FBTyxFQUFFLFlBQVk7WUFDckIsUUFBUSxFQUFFLEtBQUs7WUFDZixLQUFLLEVBQUUsSUFBSTtTQUNYLENBQUMsQ0FBQztRQUNILEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDNUQsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxRQUFRLEVBQUUsT0FBTztTQUNqQixDQUFDLENBQUM7UUFFSCw4QkFBOEI7UUFDOUI7WUFDQyxPQUFPLEVBQUUsZUFBZTtZQUN4QixVQUFVLEVBQUUsQ0FDWCxZQUErQixFQUMvQixLQUF3QixFQUN4QixjQUErQixFQUM5QixFQUFFO2dCQUNILE9BQU8sS0FBSyxJQUFJLEVBQUU7b0JBQ2pCLE1BQU0sWUFBWSxHQUFrQixTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUV6RixJQUNDLENBQUMsY0FBYyxLQUFLLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQzt3QkFDNUMsWUFBWSxLQUFLLGlCQUFpQixDQUFDLFdBQVcsRUFDN0MsQ0FBQzt3QkFDRixPQUFPLFlBQVksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLENBQUM7b0JBQ3BFLENBQUM7eUJBQU0sSUFBSSxTQUFTLEVBQUUsQ0FBQzt3QkFDdEIsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ2hFLENBQUM7Z0JBQ0YsQ0FBQyxDQUFDO1lBQ0gsQ0FBQztZQUNELEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLHVCQUF1QixDQUFDLENBQUM7U0FDdkY7UUFFRCwrQkFBK0I7UUFDL0I7WUFDQyxPQUFPLEVBQUUsZUFBZTtZQUN4QixLQUFLLEVBQUUsSUFBSTtZQUNYLElBQUksRUFBRSxDQUFDLGdCQUFnQixDQUFDO1lBQ3hCLFVBQVUsRUFBRSxDQUFDLGdCQUFrQyxFQUFFLEVBQUU7Z0JBQ2xELE9BQU8sR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEQsQ0FBQztTQUNEO1FBRUQsbUJBQW1CO1FBQ25CLEdBQUcsdUJBQXVCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQztLQUN6QyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdwb3J0U2Nyb2xsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSLCBPcHRpb25hbCwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX0RPQ19OSUdIVF9USEVNRSwgTkdfRE9DX1NUT1JFX1RIRU1FX0tFWSB9IGZyb20gJ0BuZy1kb2MvYXBwL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBOZ0RvY1RoZW1lIH0gZnJvbSAnQG5nLWRvYy9hcHAvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBOZ0RvY1N0b3JlU2VydmljZSwgTmdEb2NUaGVtZVNlcnZpY2UgfSBmcm9tICdAbmctZG9jL2FwcC9zZXJ2aWNlcyc7XG5pbXBvcnQgeyBOR19ET0NfREVGQVVMVF9USEVNRV9JRCwgTkdfRE9DX1RIRU1FIH0gZnJvbSAnQG5nLWRvYy9hcHAvdG9rZW5zJztcbmltcG9ydCB7IGFzQXJyYXksIGlzQnJvd3NlciB9IGZyb20gJ0BuZy1kb2MvY29yZSc7XG5pbXBvcnQgeyBOZ0RvY1VpQ29uZmlnLCBwcm92aWRlTmdEb2NVaUtpdENvbmZpZyB9IGZyb20gJ0BuZy1kb2MvdWkta2l0JztcblxuLyoqXG4gKiBOZ0RvYyBhcHBsaWNhdGlvbiBjb25maWcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmdEb2NBcHBsaWNhdGlvbkNvbmZpZyB7XG5cdC8qKlxuXHQgKiBMaXN0IG9mIHRoZW1lcyB0aGF0IHdpbGwgYmUgcmVnaXN0ZXJlZCBpbiB0aGUgYXBwbGljYXRpb24gYW5kIGNhbiBiZSB1c2VkIHZpYSBgTmdEb2NUaGVtZVNlcnZpY2VgLlxuXHQgKi9cblx0dGhlbWVzPzogTmdEb2NUaGVtZVtdO1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IHRoZW1lIGlkLlxuXHQgKiBZb3UgY2FuIHVzZSBgYXV0b2AgdG8gYXV0b21hdGljYWxseSBzZWxlY3QgdGhlIHRoZW1lIGJhc2VkIG9uIHRoZSB1c2VyJ3Mgb3BlcmF0aW5nIHN5c3RlbSBzZXR0aW5ncy5cblx0ICovXG5cdGRlZmF1bHRUaGVtZUlkPzogc3RyaW5nIHwgJ2F1dG8nO1xuXG5cdC8qKlxuXHQgKiBVSSBLaXQgY29uZmlndXJhdGlvbi5cblx0ICovXG5cdHVpS2l0PzogTmdEb2NVaUNvbmZpZztcbn1cblxuLyoqXG4gKiBQcm92aWRlcyB0aGUgTmdEb2MgYXBwbGljYXRpb24gY29uZmlndXJhdGlvbi5cbiAqIEBwYXJhbSBjb25maWcgLSBUaGUgb3B0aW9uYWwgYXBwbGljYXRpb24gY29uZmlndXJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVOZ0RvY0FwcChjb25maWc/OiBOZ0RvY0FwcGxpY2F0aW9uQ29uZmlnKTogUHJvdmlkZXJbXSB7XG5cdHJldHVybiBbXG5cdFx0LyogLS0tIFRoZW1lcyAtLS0gKi9cblx0XHR7IHByb3ZpZGU6IE5HX0RPQ19USEVNRSwgdXNlVmFsdWU6IE5HX0RPQ19OSUdIVF9USEVNRSwgbXVsdGk6IHRydWUgfSxcblx0XHQuLi5hc0FycmF5KGNvbmZpZz8udGhlbWVzKS5tYXAoKHRoZW1lOiBOZ0RvY1RoZW1lKSA9PiAoe1xuXHRcdFx0cHJvdmlkZTogTkdfRE9DX1RIRU1FLFxuXHRcdFx0dXNlVmFsdWU6IHRoZW1lLFxuXHRcdFx0bXVsdGk6IHRydWUsXG5cdFx0fSkpLFxuXHRcdC4uLmFzQXJyYXkoY29uZmlnPy5kZWZhdWx0VGhlbWVJZCkubWFwKCh0aGVtZUlkOiBzdHJpbmcpID0+ICh7XG5cdFx0XHRwcm92aWRlOiBOR19ET0NfREVGQVVMVF9USEVNRV9JRCxcblx0XHRcdHVzZVZhbHVlOiB0aGVtZUlkLFxuXHRcdH0pKSxcblxuXHRcdC8qIC0tLSBUaGVtZSBJbml0aWFsaXplci0tLSAqL1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcblx0XHRcdHVzZUZhY3Rvcnk6IChcblx0XHRcdFx0dGhlbWVTZXJ2aWNlOiBOZ0RvY1RoZW1lU2VydmljZSxcblx0XHRcdFx0c3RvcmU6IE5nRG9jU3RvcmVTZXJ2aWNlLFxuXHRcdFx0XHRkZWZhdWx0VGhlbWVJZDogc3RyaW5nIHwgJ2F1dG8nLFxuXHRcdFx0KSA9PiB7XG5cdFx0XHRcdHJldHVybiBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3Qgc2F2ZWRUaGVtZUlkOiBzdHJpbmcgfCBudWxsID0gaXNCcm93c2VyID8gc3RvcmUuZ2V0KE5HX0RPQ19TVE9SRV9USEVNRV9LRVkpIDogbnVsbDtcblxuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdChkZWZhdWx0VGhlbWVJZCA9PT0gJ2F1dG8nICYmICFzYXZlZFRoZW1lSWQpIHx8XG5cdFx0XHRcdFx0XHRzYXZlZFRoZW1lSWQgPT09IE5nRG9jVGhlbWVTZXJ2aWNlLmF1dG9UaGVtZUlkXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhlbWVTZXJ2aWNlLmVuYWJsZUF1dG9UaGVtZSh1bmRlZmluZWQsIE5HX0RPQ19OSUdIVF9USEVNRSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChpc0Jyb3dzZXIpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGVtZVNlcnZpY2Uuc2V0KHNhdmVkVGhlbWVJZCA/PyBkZWZhdWx0VGhlbWVJZCwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFx0XHRtdWx0aTogdHJ1ZSxcblx0XHRcdGRlcHM6IFtOZ0RvY1RoZW1lU2VydmljZSwgTmdEb2NTdG9yZVNlcnZpY2UsIFtuZXcgT3B0aW9uYWwoKSwgTkdfRE9DX0RFRkFVTFRfVEhFTUVfSURdXSxcblx0XHR9LFxuXG5cdFx0LyogLS0tIFZpZXdwb3J0IFNjcm9sbGVyIC0tLSAqL1xuXHRcdHtcblx0XHRcdHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdFx0ZGVwczogW1ZpZXdwb3J0U2Nyb2xsZXJdLFxuXHRcdFx0dXNlRmFjdG9yeTogKHZpZXdwb3J0U2Nyb2xsZXI6IFZpZXdwb3J0U2Nyb2xsZXIpID0+IHtcblx0XHRcdFx0cmV0dXJuICgpID0+IHZpZXdwb3J0U2Nyb2xsZXIuc2V0T2Zmc2V0KFswLCA2NF0pO1xuXHRcdFx0fSxcblx0XHR9LFxuXG5cdFx0LyogLS0tIFVpS2l0IC0tLSAqL1xuXHRcdC4uLnByb3ZpZGVOZ0RvY1VpS2l0Q29uZmlnKGNvbmZpZz8udWlLaXQpLFxuXHRdO1xufVxuIl19