import { __decorate, __metadata } from "tslib";
import { DOCUMENT, NgFor } from '@angular/common';
import { afterNextRender, AfterRenderPhase, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, inject, Input, NgZone, QueryList, Renderer2, signal, ViewChild, ViewChildren, } from '@angular/core';
import { Router, Scroll } from '@angular/router';
import { isPresent } from '@ng-doc/core/helpers/is-present';
import { NgDocMediaQueryDirective, ngDocZoneOptimize } from '@ng-doc/ui-kit';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { fromEvent, merge } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, startWith } from 'rxjs/operators';
import { NgDocTocElementComponent } from './toc-element/toc-element.component';
import * as i0 from "@angular/core";
let NgDocTocComponent = class NgDocTocComponent {
    constructor() {
        this.tableOfContent = [];
        this.elements = new QueryList();
        this.activeItem = signal(undefined);
        this.document = inject(DOCUMENT);
        this.ngZone = inject(NgZone);
        this.changeDetectorRef = inject(ChangeDetectorRef);
        this.renderer = inject(Renderer2);
        this.router = inject(Router);
        afterNextRender(() => {
            const scrollSelection = fromEvent(this.document, 'scroll').pipe(filter(() => !!this.tableOfContent.length), map((event) => event.target.scrollingElement), startWith(this.document.scrollingElement), map((target) => {
                const percentage = (target.scrollTop * 100) / (target.scrollHeight - target.offsetHeight);
                const selectionLine = target.scrollTop + (target.offsetHeight * percentage) / 100;
                if (!this.tableOfContent.length) {
                    return null;
                }
                return this.tableOfContent.reduce((pTarget, cTarget) => {
                    const pTop = pTarget.element.getBoundingClientRect().top + target.scrollTop;
                    const cTop = cTarget.element.getBoundingClientRect().top + target.scrollTop;
                    return Math.abs(cTop - selectionLine) < Math.abs(pTop - selectionLine)
                        ? cTarget
                        : pTarget;
                });
            }), filter(isPresent));
            const routerSelection = this.router.events.pipe(map((event) => {
                if (event instanceof Scroll) {
                    const item = this.tableOfContent.find((item) => item.path.includes(event.routerEvent.url));
                    if (item) {
                        return item;
                    }
                }
                return null;
            }), filter(isPresent), debounceTime(20));
            const elementsChanges = this.elements.changes.pipe(map(() => this.activeItem()), filter(isPresent));
            merge(merge(scrollSelection, routerSelection).pipe(distinctUntilChanged()), elementsChanges)
                .pipe(debounceTime(0), ngDocZoneOptimize(this.ngZone), untilDestroyed(this))
                .subscribe(this.select.bind(this));
        }, { phase: AfterRenderPhase.Write });
    }
    ngOnInit() {
        this.activeItem.set(this.tableOfContent[0]);
    }
    /**
     * Selects the item in the table of content.
     * @param item - Item to select.
     */
    select(item) {
        const index = this.tableOfContent.indexOf(item);
        if (this.selection) {
            const element = this.elements.toArray()[index]?.elementRef.nativeElement;
            if (element) {
                this.renderer.setStyle(this.selection.nativeElement, 'top', `${element.offsetTop}px`);
                this.renderer.setStyle(this.selection.nativeElement, 'height', `${element.offsetHeight}px`);
                element.scrollIntoView({ block: 'nearest' });
            }
        }
        this.activeItem.set(item);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocTocComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.1.0", type: NgDocTocComponent, isStandalone: true, selector: "ng-doc-toc", inputs: { tableOfContent: "tableOfContent" }, viewQueries: [{ propertyName: "selection", first: true, predicate: ["selection"], descendants: true, read: ElementRef }, { propertyName: "elements", predicate: NgDocTocElementComponent, descendants: true }], ngImport: i0, template: "<div class=\"ng-doc-toc-wrapper\">\n\t<div class=\"ng-doc-toc-container\">\n\t\t<div class=\"ng-doc-toc-selection\" #selection></div>\n\t\t<ul class=\"ng-doc-toc\">\n\t\t\t@for (item of tableOfContent; track item) {\n\t\t\t\t<li\n\t\t\t\t\tng-doc-toc-element\n\t\t\t\t\t[path]=\"item.path\"\n\t\t\t\t\t[hash]=\"item.hash\"\n\t\t\t\t\t[level]=\"item.level\"\n\t\t\t\t\t[selected]=\"item === activeItem()\">\n\t\t\t\t\t{{ item.title }}\n\t\t\t\t</li>\n\t\t\t}\n\t\t</ul>\n\t</div>\n</div>\n", styles: [":host .ng-doc-toc-wrapper{position:relative;width:var(--ng-doc-toc-width)}:host .ng-doc-toc-wrapper .ng-doc-toc-container{position:fixed;overflow-y:auto;height:calc(100% - var(--ng-doc-navbar-height) - var(--ng-doc-base-gutter) * 5);width:var(--ng-doc-toc-width)}:host .ng-doc-toc-wrapper .ng-doc-toc-selection{position:absolute;transform:translate(-50%);width:calc(var(--ng-doc-base-gutter) / 2);border-radius:calc(var(--ng-doc-base-gutter) / 2);background-color:var(--ng-doc-primary);left:calc(var(--ng-doc-toc-margin) + 1px);transition:var(--ng-doc-transition)}:host .ng-doc-toc-wrapper .ng-doc-toc{list-style:none;margin:0 0 0 var(--ng-doc-toc-margin);border-left:1px solid var(--ng-doc-base-3);padding:0 0 0 var(--ng-doc-base-gutter)}@media (max-width: 1200px){:host .ng-doc-toc-wrapper{display:none}}\n"], dependencies: [{ kind: "component", type: NgDocTocElementComponent, selector: "li[ng-doc-toc-element]", inputs: ["path", "hash", "selected", "level"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
};
NgDocTocComponent = __decorate([
    UntilDestroy(),
    __metadata("design:paramtypes", [])
], NgDocTocComponent);
export { NgDocTocComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocTocComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-toc', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgFor, NgDocTocElementComponent, NgDocMediaQueryDirective], template: "<div class=\"ng-doc-toc-wrapper\">\n\t<div class=\"ng-doc-toc-container\">\n\t\t<div class=\"ng-doc-toc-selection\" #selection></div>\n\t\t<ul class=\"ng-doc-toc\">\n\t\t\t@for (item of tableOfContent; track item) {\n\t\t\t\t<li\n\t\t\t\t\tng-doc-toc-element\n\t\t\t\t\t[path]=\"item.path\"\n\t\t\t\t\t[hash]=\"item.hash\"\n\t\t\t\t\t[level]=\"item.level\"\n\t\t\t\t\t[selected]=\"item === activeItem()\">\n\t\t\t\t\t{{ item.title }}\n\t\t\t\t</li>\n\t\t\t}\n\t\t</ul>\n\t</div>\n</div>\n", styles: [":host .ng-doc-toc-wrapper{position:relative;width:var(--ng-doc-toc-width)}:host .ng-doc-toc-wrapper .ng-doc-toc-container{position:fixed;overflow-y:auto;height:calc(100% - var(--ng-doc-navbar-height) - var(--ng-doc-base-gutter) * 5);width:var(--ng-doc-toc-width)}:host .ng-doc-toc-wrapper .ng-doc-toc-selection{position:absolute;transform:translate(-50%);width:calc(var(--ng-doc-base-gutter) / 2);border-radius:calc(var(--ng-doc-base-gutter) / 2);background-color:var(--ng-doc-primary);left:calc(var(--ng-doc-toc-margin) + 1px);transition:var(--ng-doc-transition)}:host .ng-doc-toc-wrapper .ng-doc-toc{list-style:none;margin:0 0 0 var(--ng-doc-toc-margin);border-left:1px solid var(--ng-doc-base-3);padding:0 0 0 var(--ng-doc-base-gutter)}@media (max-width: 1200px){:host .ng-doc-toc-wrapper{display:none}}\n"] }]
        }], ctorParameters: () => [], propDecorators: { tableOfContent: [{
                type: Input
            }], selection: [{
                type: ViewChild,
                args: ['selection', { read: ElementRef }]
            }], elements: [{
                type: ViewChildren,
                args: [NgDocTocElementComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,