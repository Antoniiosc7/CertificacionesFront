import { NgFor, NgIf, NgTemplateOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { NgDocKindIconComponent } from '@ng-doc/app/components/kind-icon';
import { NgDocExtractValuePipe } from '@ng-doc/app/pipes/extract-value';
import { NgDocButtonIconComponent, NgDocComboboxComponent, NgDocDataDirective, NgDocFocusableDirective, NgDocIconComponent, NgDocListComponent, NgDocOptionComponent, NgDocTextComponent, NgDocTextLeftDirective, NgDocTextRightDirective, NgDocTooltipDirective, } from '@ng-doc/ui-kit';
import { DIControl } from 'di-controls';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class NgDocTypeAliasControlComponent extends DIControl {
    constructor() {
        super();
    }
    typeOf(value) {
        return typeof value;
    }
    changeModel(value) {
        this.updateModel(value === null && this.default ? this.default : value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocTypeAliasControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocTypeAliasControlComponent, isStandalone: true, selector: "ng-doc-type-alias-control", inputs: { default: "default" }, usesInheritance: true, ngImport: i0, template: "<ng-doc-combobox\n\t[ngModel]=\"model()\"\n\t[readonly]=\"true\"\n\t[valueContent]=\"valueTemplate\"\n\t[clearButton]=\"false\"\n\t[rightContent]=\"rightContent\"\n\t(ngModelChange)=\"changeModel($event)\">\n\t<ng-doc-list *ngDocData>\n\t\t<ng-container *ngFor=\"let option of options\">\n\t\t\t<ng-container *ngIf=\"isManual ? option : (option | ngDocExtractValue) as value\">\n\t\t\t\t<ng-doc-option [value]=\"value\">\n\t\t\t\t\t<ng-container\n\t\t\t\t\t\t*ngTemplateOutlet=\"valueTemplate; context: { $implicit: value }\"></ng-container>\n\t\t\t\t</ng-doc-option>\n\t\t\t</ng-container>\n\t\t</ng-container>\n\t</ng-doc-list>\n\t<ng-template let-value #valueTemplate>\n\t\t<div ng-doc-text>\n\t\t\t<ng-doc-kind-icon\n\t\t\t\t[kind]=\"typeOf(value)\"\n\t\t\t\t[type]=\"'type'\"\n\t\t\t\t[ngDocTooltip]=\"typeOf(value)\"\n\t\t\t\tpositions=\"left-center\"\n\t\t\t\tngDocTextLeft>\n\t\t\t</ng-doc-kind-icon>\n\t\t\t<div>{{ value }}</div>\n\t\t\t<span ng-doc-text color=\"muted\" size=\"small\" *ngIf=\"value === default\" ngDocTextRight\n\t\t\t\t>[default]</span\n\t\t\t>\n\t\t</div>\n\t</ng-template>\n\t<ng-template #rightContent>\n\t\t<button\n\t\t\tng-doc-button-icon\n\t\t\tsize=\"large\"\n\t\t\t[ngDocFocusable]=\"false\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[rounded]=\"false\"\n\t\t\t(click)=\"updateModel(default ?? null)\"\n\t\t\t(focusout)=\"touch()\"\n\t\t\t*ngIf=\"model() && model() !== default\">\n\t\t\t<ng-doc-icon icon=\"x\"></ng-doc-icon>\n\t\t</button>\n\t</ng-template>\n</ng-doc-combobox>\n", styles: [":host{display:block;width:100%}\n"], dependencies: [{ kind: "component", type: NgDocComboboxComponent, selector: "ng-doc-combobox", inputs: ["readonly", "placeholder", "clearButton", "rightContent", "valueContent"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: NgDocDataDirective, selector: "[ngDocData]" }, { kind: "component", type: NgDocListComponent, selector: "ng-doc-list" }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: NgDocOptionComponent, selector: "ng-doc-option" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: NgDocTextComponent, selector: "[ng-doc-text]", inputs: ["size", "color", "align", "absoluteContent"] }, { kind: "component", type: NgDocKindIconComponent, selector: "ng-doc-kind-icon", inputs: ["kind", "type"] }, { kind: "directive", type: NgDocTextLeftDirective, selector: "[ngDocTextLeft]" }, { kind: "directive", type: NgDocTooltipDirective, selector: "[ngDocTooltip]", inputs: ["ngDocTooltip", "delay", "displayOrigin", "pointerOrigin", "positions", "canOpen", "panelClass", "minHeight", "maxHeight", "height", "minWidth", "maxWidth", "width"], outputs: ["beforeOpen", "afterOpen", "beforeClose", "afterClose"], exportAs: ["ngDocTooltip"] }, { kind: "directive", type: NgDocTextRightDirective, selector: "[ngDocTextRight]" }, { kind: "component", type: NgDocButtonIconComponent, selector: "button[ng-doc-button-icon], a[ng-doc-button-icon]", inputs: ["size", "rounded"] }, { kind: "directive", type: NgDocFocusableDirective, selector: "[ngDocFocusable]", inputs: ["ngDocFocusable"], exportAs: ["ngDocFocusable"] }, { kind: "component", type: NgDocIconComponent, selector: "ng-doc-icon", inputs: ["icon", "customIcon", "size"] }, { kind: "pipe", type: NgDocExtractValuePipe, name: "ngDocExtractValue" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocTypeAliasControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-type-alias-control', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        NgDocComboboxComponent,
                        FormsModule,
                        NgDocDataDirective,
                        NgDocListComponent,
                        NgFor,
                        NgIf,
                        NgDocOptionComponent,
                        NgTemplateOutlet,
                        NgDocTextComponent,
                        NgDocKindIconComponent,
                        NgDocTextLeftDirective,
                        NgDocTooltipDirective,
                        NgDocTextRightDirective,
                        NgDocButtonIconComponent,
                        NgDocFocusableDirective,
                        NgDocIconComponent,
                        NgDocExtractValuePipe,
                    ], template: "<ng-doc-combobox\n\t[ngModel]=\"model()\"\n\t[readonly]=\"true\"\n\t[valueContent]=\"valueTemplate\"\n\t[clearButton]=\"false\"\n\t[rightContent]=\"rightContent\"\n\t(ngModelChange)=\"changeModel($event)\">\n\t<ng-doc-list *ngDocData>\n\t\t<ng-container *ngFor=\"let option of options\">\n\t\t\t<ng-container *ngIf=\"isManual ? option : (option | ngDocExtractValue) as value\">\n\t\t\t\t<ng-doc-option [value]=\"value\">\n\t\t\t\t\t<ng-container\n\t\t\t\t\t\t*ngTemplateOutlet=\"valueTemplate; context: { $implicit: value }\"></ng-container>\n\t\t\t\t</ng-doc-option>\n\t\t\t</ng-container>\n\t\t</ng-container>\n\t</ng-doc-list>\n\t<ng-template let-value #valueTemplate>\n\t\t<div ng-doc-text>\n\t\t\t<ng-doc-kind-icon\n\t\t\t\t[kind]=\"typeOf(value)\"\n\t\t\t\t[type]=\"'type'\"\n\t\t\t\t[ngDocTooltip]=\"typeOf(value)\"\n\t\t\t\tpositions=\"left-center\"\n\t\t\t\tngDocTextLeft>\n\t\t\t</ng-doc-kind-icon>\n\t\t\t<div>{{ value }}</div>\n\t\t\t<span ng-doc-text color=\"muted\" size=\"small\" *ngIf=\"value === default\" ngDocTextRight\n\t\t\t\t>[default]</span\n\t\t\t>\n\t\t</div>\n\t</ng-template>\n\t<ng-template #rightContent>\n\t\t<button\n\t\t\tng-doc-button-icon\n\t\t\tsize=\"large\"\n\t\t\t[ngDocFocusable]=\"false\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[rounded]=\"false\"\n\t\t\t(click)=\"updateModel(default ?? null)\"\n\t\t\t(focusout)=\"touch()\"\n\t\t\t*ngIf=\"model() && model() !== default\">\n\t\t\t<ng-doc-icon icon=\"x\"></ng-doc-icon>\n\t\t</button>\n\t</ng-template>\n</ng-doc-combobox>\n", styles: [":host{display:block;width:100%}\n"] }]
        }], ctorParameters: () => [], propDecorators: { default: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1hbGlhcy1jb250cm9sLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYXBwL3R5cGUtY29udHJvbHMvdHlwZS1hbGlhcy1jb250cm9sL3R5cGUtYWxpYXMtY29udHJvbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FwcC90eXBlLWNvbnRyb2xzL3R5cGUtYWxpYXMtY29udHJvbC90eXBlLWFsaWFzLWNvbnRyb2wuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEUsT0FBTyxFQUNOLHdCQUF3QixFQUN4QixzQkFBc0IsRUFDdEIsa0JBQWtCLEVBQ2xCLHVCQUF1QixFQUN2QixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsc0JBQXNCLEVBQ3RCLHVCQUF1QixFQUN2QixxQkFBcUIsR0FDckIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDOzs7QUE0QnhDLE1BQU0sT0FBTyw4QkFBa0MsU0FBUSxTQUFZO0lBUWxFO1FBQ0MsS0FBSyxFQUFFLENBQUM7SUFDVCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWM7UUFDcEIsT0FBTyxPQUFPLEtBQUssQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQWU7UUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pFLENBQUM7OEdBbEJXLDhCQUE4QjtrR0FBOUIsOEJBQThCLDRJQy9DM0MsNCtDQThDQSwyRkRsQkUsc0JBQXNCLCtJQUN0QixXQUFXLCtWQUNYLGtCQUFrQix3REFDbEIsa0JBQWtCLHdEQUNsQixLQUFLLG1IQUNMLElBQUksNkZBQ0osb0JBQW9CLDBEQUNwQixnQkFBZ0Isb0pBQ2hCLGtCQUFrQixpSEFDbEIsc0JBQXNCLHVGQUN0QixzQkFBc0IsNERBQ3RCLHFCQUFxQiwwVUFDckIsdUJBQXVCLDZEQUN2Qix3QkFBd0IsMkhBQ3hCLHVCQUF1Qix1SEFDdkIsa0JBQWtCLDJGQUNsQixxQkFBcUI7OzJGQUdWLDhCQUE4QjtrQkExQjFDLFNBQVM7K0JBQ0MsMkJBQTJCLG1CQUdwQix1QkFBdUIsQ0FBQyxNQUFNLGNBQ25DLElBQUksV0FDUDt3QkFDUixzQkFBc0I7d0JBQ3RCLFdBQVc7d0JBQ1gsa0JBQWtCO3dCQUNsQixrQkFBa0I7d0JBQ2xCLEtBQUs7d0JBQ0wsSUFBSTt3QkFDSixvQkFBb0I7d0JBQ3BCLGdCQUFnQjt3QkFDaEIsa0JBQWtCO3dCQUNsQixzQkFBc0I7d0JBQ3RCLHNCQUFzQjt3QkFDdEIscUJBQXFCO3dCQUNyQix1QkFBdUI7d0JBQ3ZCLHdCQUF3Qjt3QkFDeEIsdUJBQXVCO3dCQUN2QixrQkFBa0I7d0JBQ2xCLHFCQUFxQjtxQkFDckI7d0RBSUQsT0FBTztzQkFETixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdGb3IsIE5nSWYsIE5nVGVtcGxhdGVPdXRsZXQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTmdEb2NLaW5kSWNvbkNvbXBvbmVudCB9IGZyb20gJ0BuZy1kb2MvYXBwL2NvbXBvbmVudHMva2luZC1pY29uJztcbmltcG9ydCB7IE5nRG9jVHlwZUNvbnRyb2wgfSBmcm9tICdAbmctZG9jL2FwcC9pbnRlcmZhY2VzJztcbmltcG9ydCB7IE5nRG9jRXh0cmFjdFZhbHVlUGlwZSB9IGZyb20gJ0BuZy1kb2MvYXBwL3BpcGVzL2V4dHJhY3QtdmFsdWUnO1xuaW1wb3J0IHtcblx0TmdEb2NCdXR0b25JY29uQ29tcG9uZW50LFxuXHROZ0RvY0NvbWJvYm94Q29tcG9uZW50LFxuXHROZ0RvY0RhdGFEaXJlY3RpdmUsXG5cdE5nRG9jRm9jdXNhYmxlRGlyZWN0aXZlLFxuXHROZ0RvY0ljb25Db21wb25lbnQsXG5cdE5nRG9jTGlzdENvbXBvbmVudCxcblx0TmdEb2NPcHRpb25Db21wb25lbnQsXG5cdE5nRG9jVGV4dENvbXBvbmVudCxcblx0TmdEb2NUZXh0TGVmdERpcmVjdGl2ZSxcblx0TmdEb2NUZXh0UmlnaHREaXJlY3RpdmUsXG5cdE5nRG9jVG9vbHRpcERpcmVjdGl2ZSxcbn0gZnJvbSAnQG5nLWRvYy91aS1raXQnO1xuaW1wb3J0IHsgRElDb250cm9sIH0gZnJvbSAnZGktY29udHJvbHMnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICduZy1kb2MtdHlwZS1hbGlhcy1jb250cm9sJyxcblx0dGVtcGxhdGVVcmw6ICcuL3R5cGUtYWxpYXMtY29udHJvbC5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL3R5cGUtYWxpYXMtY29udHJvbC5jb21wb25lbnQuc2NzcyddLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aW1wb3J0czogW1xuXHRcdE5nRG9jQ29tYm9ib3hDb21wb25lbnQsXG5cdFx0Rm9ybXNNb2R1bGUsXG5cdFx0TmdEb2NEYXRhRGlyZWN0aXZlLFxuXHRcdE5nRG9jTGlzdENvbXBvbmVudCxcblx0XHROZ0Zvcixcblx0XHROZ0lmLFxuXHRcdE5nRG9jT3B0aW9uQ29tcG9uZW50LFxuXHRcdE5nVGVtcGxhdGVPdXRsZXQsXG5cdFx0TmdEb2NUZXh0Q29tcG9uZW50LFxuXHRcdE5nRG9jS2luZEljb25Db21wb25lbnQsXG5cdFx0TmdEb2NUZXh0TGVmdERpcmVjdGl2ZSxcblx0XHROZ0RvY1Rvb2x0aXBEaXJlY3RpdmUsXG5cdFx0TmdEb2NUZXh0UmlnaHREaXJlY3RpdmUsXG5cdFx0TmdEb2NCdXR0b25JY29uQ29tcG9uZW50LFxuXHRcdE5nRG9jRm9jdXNhYmxlRGlyZWN0aXZlLFxuXHRcdE5nRG9jSWNvbkNvbXBvbmVudCxcblx0XHROZ0RvY0V4dHJhY3RWYWx1ZVBpcGUsXG5cdF0sXG59KVxuZXhwb3J0IGNsYXNzIE5nRG9jVHlwZUFsaWFzQ29udHJvbENvbXBvbmVudDxUPiBleHRlbmRzIERJQ29udHJvbDxUPiBpbXBsZW1lbnRzIE5nRG9jVHlwZUNvbnRyb2w8VD4ge1xuXHRASW5wdXQoKVxuXHRkZWZhdWx0PzogVDtcblxuXHRvcHRpb25zPzogc3RyaW5nW107XG5cblx0aXNNYW51YWw/OiBib29sZWFuO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHR0eXBlT2YodmFsdWU6IHVua25vd24pOiBzdHJpbmcge1xuXHRcdHJldHVybiB0eXBlb2YgdmFsdWU7XG5cdH1cblxuXHRjaGFuZ2VNb2RlbCh2YWx1ZTogVCB8IG51bGwpOiB2b2lkIHtcblx0XHR0aGlzLnVwZGF0ZU1vZGVsKHZhbHVlID09PSBudWxsICYmIHRoaXMuZGVmYXVsdCA/IHRoaXMuZGVmYXVsdCA6IHZhbHVlKTtcblx0fVxufVxuIiwiPG5nLWRvYy1jb21ib2JveFxuXHRbbmdNb2RlbF09XCJtb2RlbCgpXCJcblx0W3JlYWRvbmx5XT1cInRydWVcIlxuXHRbdmFsdWVDb250ZW50XT1cInZhbHVlVGVtcGxhdGVcIlxuXHRbY2xlYXJCdXR0b25dPVwiZmFsc2VcIlxuXHRbcmlnaHRDb250ZW50XT1cInJpZ2h0Q29udGVudFwiXG5cdChuZ01vZGVsQ2hhbmdlKT1cImNoYW5nZU1vZGVsKCRldmVudClcIj5cblx0PG5nLWRvYy1saXN0ICpuZ0RvY0RhdGE+XG5cdFx0PG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIG9wdGlvbnNcIj5cblx0XHRcdDxuZy1jb250YWluZXIgKm5nSWY9XCJpc01hbnVhbCA/IG9wdGlvbiA6IChvcHRpb24gfCBuZ0RvY0V4dHJhY3RWYWx1ZSkgYXMgdmFsdWVcIj5cblx0XHRcdFx0PG5nLWRvYy1vcHRpb24gW3ZhbHVlXT1cInZhbHVlXCI+XG5cdFx0XHRcdFx0PG5nLWNvbnRhaW5lclxuXHRcdFx0XHRcdFx0Km5nVGVtcGxhdGVPdXRsZXQ9XCJ2YWx1ZVRlbXBsYXRlOyBjb250ZXh0OiB7ICRpbXBsaWNpdDogdmFsdWUgfVwiPjwvbmctY29udGFpbmVyPlxuXHRcdFx0XHQ8L25nLWRvYy1vcHRpb24+XG5cdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHQ8L25nLWNvbnRhaW5lcj5cblx0PC9uZy1kb2MtbGlzdD5cblx0PG5nLXRlbXBsYXRlIGxldC12YWx1ZSAjdmFsdWVUZW1wbGF0ZT5cblx0XHQ8ZGl2IG5nLWRvYy10ZXh0PlxuXHRcdFx0PG5nLWRvYy1raW5kLWljb25cblx0XHRcdFx0W2tpbmRdPVwidHlwZU9mKHZhbHVlKVwiXG5cdFx0XHRcdFt0eXBlXT1cIid0eXBlJ1wiXG5cdFx0XHRcdFtuZ0RvY1Rvb2x0aXBdPVwidHlwZU9mKHZhbHVlKVwiXG5cdFx0XHRcdHBvc2l0aW9ucz1cImxlZnQtY2VudGVyXCJcblx0XHRcdFx0bmdEb2NUZXh0TGVmdD5cblx0XHRcdDwvbmctZG9jLWtpbmQtaWNvbj5cblx0XHRcdDxkaXY+e3sgdmFsdWUgfX08L2Rpdj5cblx0XHRcdDxzcGFuIG5nLWRvYy10ZXh0IGNvbG9yPVwibXV0ZWRcIiBzaXplPVwic21hbGxcIiAqbmdJZj1cInZhbHVlID09PSBkZWZhdWx0XCIgbmdEb2NUZXh0UmlnaHRcblx0XHRcdFx0PltkZWZhdWx0XTwvc3BhblxuXHRcdFx0PlxuXHRcdDwvZGl2PlxuXHQ8L25nLXRlbXBsYXRlPlxuXHQ8bmctdGVtcGxhdGUgI3JpZ2h0Q29udGVudD5cblx0XHQ8YnV0dG9uXG5cdFx0XHRuZy1kb2MtYnV0dG9uLWljb25cblx0XHRcdHNpemU9XCJsYXJnZVwiXG5cdFx0XHRbbmdEb2NGb2N1c2FibGVdPVwiZmFsc2VcIlxuXHRcdFx0W2Rpc2FibGVkXT1cImRpc2FibGVkXCJcblx0XHRcdFtyb3VuZGVkXT1cImZhbHNlXCJcblx0XHRcdChjbGljayk9XCJ1cGRhdGVNb2RlbChkZWZhdWx0ID8/IG51bGwpXCJcblx0XHRcdChmb2N1c291dCk9XCJ0b3VjaCgpXCJcblx0XHRcdCpuZ0lmPVwibW9kZWwoKSAmJiBtb2RlbCgpICE9PSBkZWZhdWx0XCI+XG5cdFx0XHQ8bmctZG9jLWljb24gaWNvbj1cInhcIj48L25nLWRvYy1pY29uPlxuXHRcdDwvYnV0dG9uPlxuXHQ8L25nLXRlbXBsYXRlPlxuPC9uZy1kb2MtY29tYm9ib3g+XG4iXX0=