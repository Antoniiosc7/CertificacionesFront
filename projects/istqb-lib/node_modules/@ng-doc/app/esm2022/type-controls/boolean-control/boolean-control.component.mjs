import { ChangeDetectionStrategy, Component } from '@angular/core';
import { NgDocSanitizeHtmlPipe } from '@ng-doc/app/pipes';
import { NgDocCheckboxComponent, NgDocTooltipDirective } from '@ng-doc/ui-kit';
import { DIControl, provideHostControl } from 'di-controls';
import * as i0 from "@angular/core";
export class NgDocBooleanControlComponent extends DIControl {
    constructor() {
        super();
        this.name = '';
        this.description = '';
    }
    get defaultValue() {
        return Object.prototype.hasOwnProperty.call(this, 'default') ? this.default : false;
    }
    updateModel(obj) {
        super.updateModel(obj ? obj : !this.defaultValue ? this.defaultValue : false);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocBooleanControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocBooleanControlComponent, isStandalone: true, selector: "ng-doc-boolean-control", providers: [provideHostControl(NgDocBooleanControlComponent)], usesInheritance: true, ngImport: i0, template: "<ng-doc-checkbox [ngDocTooltip]=\"tooltipTemplate\" [canOpen]=\"!!description\">\n\t{{ name }}\n\t<ng-template #tooltipTemplate>\n\t\t<div [innerHTML]=\"description | ngDocSanitizeHtml\"></div>\n\t</ng-template>\n</ng-doc-checkbox>\n", styles: [":host{display:inline-flex;width:100%}\n"], dependencies: [{ kind: "component", type: NgDocCheckboxComponent, selector: "ng-doc-checkbox", inputs: ["color"] }, { kind: "directive", type: NgDocTooltipDirective, selector: "[ngDocTooltip]", inputs: ["ngDocTooltip", "delay", "displayOrigin", "pointerOrigin", "positions", "canOpen", "panelClass", "minHeight", "maxHeight", "height", "minWidth", "maxWidth", "width"], outputs: ["beforeOpen", "afterOpen", "beforeClose", "afterClose"], exportAs: ["ngDocTooltip"] }, { kind: "pipe", type: NgDocSanitizeHtmlPipe, name: "ngDocSanitizeHtml" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocBooleanControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-boolean-control', providers: [provideHostControl(NgDocBooleanControlComponent)], changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgDocCheckboxComponent, NgDocTooltipDirective, NgDocSanitizeHtmlPipe], template: "<ng-doc-checkbox [ngDocTooltip]=\"tooltipTemplate\" [canOpen]=\"!!description\">\n\t{{ name }}\n\t<ng-template #tooltipTemplate>\n\t\t<div [innerHTML]=\"description | ngDocSanitizeHtml\"></div>\n\t</ng-template>\n</ng-doc-checkbox>\n", styles: [":host{display:inline-flex;width:100%}\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbGVhbi1jb250cm9sLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYXBwL3R5cGUtY29udHJvbHMvYm9vbGVhbi1jb250cm9sL2Jvb2xlYW4tY29udHJvbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FwcC90eXBlLWNvbnRyb2xzL2Jvb2xlYW4tY29udHJvbC9ib29sZWFuLWNvbnRyb2wuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sYUFBYSxDQUFDOztBQVc1RCxNQUFNLE9BQU8sNEJBQ1osU0FBUSxTQUE4QjtJQVF0QztRQUNDLEtBQUssRUFBRSxDQUFDO1FBSlQsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUNsQixnQkFBVyxHQUFXLEVBQUUsQ0FBQztJQUl6QixDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2YsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDckYsQ0FBQztJQUVRLFdBQVcsQ0FBQyxHQUErQjtRQUNuRCxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9FLENBQUM7OEdBbkJXLDRCQUE0QjtrR0FBNUIsNEJBQTRCLHFFQUw3QixDQUFDLGtCQUFrQixDQUFDLDRCQUE0QixDQUFDLENBQUMsaURDVjlELDJPQU1BLGlHRE9XLHNCQUFzQiwrRUFBRSxxQkFBcUIscVVBQUUscUJBQXFCOzsyRkFFbEUsNEJBQTRCO2tCQVR4QyxTQUFTOytCQUNDLHdCQUF3QixhQUd2QixDQUFDLGtCQUFrQiw4QkFBOEIsQ0FBQyxtQkFDNUMsdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJLFdBQ1AsQ0FBQyxzQkFBc0IsRUFBRSxxQkFBcUIsRUFBRSxxQkFBcUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nRG9jVHlwZUNvbnRyb2wgfSBmcm9tICdAbmctZG9jL2FwcC9pbnRlcmZhY2VzJztcbmltcG9ydCB7IE5nRG9jU2FuaXRpemVIdG1sUGlwZSB9IGZyb20gJ0BuZy1kb2MvYXBwL3BpcGVzJztcbmltcG9ydCB7IE5nRG9jQ2hlY2tib3hDb21wb25lbnQsIE5nRG9jVG9vbHRpcERpcmVjdGl2ZSB9IGZyb20gJ0BuZy1kb2MvdWkta2l0JztcbmltcG9ydCB7IERJQ29udHJvbCwgcHJvdmlkZUhvc3RDb250cm9sIH0gZnJvbSAnZGktY29udHJvbHMnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICduZy1kb2MtYm9vbGVhbi1jb250cm9sJyxcblx0dGVtcGxhdGVVcmw6ICcuL2Jvb2xlYW4tY29udHJvbC5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL2Jvb2xlYW4tY29udHJvbC5jb21wb25lbnQuc2NzcyddLFxuXHRwcm92aWRlcnM6IFtwcm92aWRlSG9zdENvbnRyb2woTmdEb2NCb29sZWFuQ29udHJvbENvbXBvbmVudCldLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aW1wb3J0czogW05nRG9jQ2hlY2tib3hDb21wb25lbnQsIE5nRG9jVG9vbHRpcERpcmVjdGl2ZSwgTmdEb2NTYW5pdGl6ZUh0bWxQaXBlXSxcbn0pXG5leHBvcnQgY2xhc3MgTmdEb2NCb29sZWFuQ29udHJvbENvbXBvbmVudFxuXHRleHRlbmRzIERJQ29udHJvbDxib29sZWFuIHwgdW5kZWZpbmVkPlxuXHRpbXBsZW1lbnRzIE5nRG9jVHlwZUNvbnRyb2w8Ym9vbGVhbiB8IHVuZGVmaW5lZD5cbntcblx0ZGVmYXVsdD86IGJvb2xlYW47XG5cblx0bmFtZTogc3RyaW5nID0gJyc7XG5cdGRlc2NyaXB0aW9uOiBzdHJpbmcgPSAnJztcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0Z2V0IGRlZmF1bHRWYWx1ZSgpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcblx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsICdkZWZhdWx0JykgPyB0aGlzLmRlZmF1bHQgOiBmYWxzZTtcblx0fVxuXG5cdG92ZXJyaWRlIHVwZGF0ZU1vZGVsKG9iajogYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQpIHtcblx0XHRzdXBlci51cGRhdGVNb2RlbChvYmogPyBvYmogOiAhdGhpcy5kZWZhdWx0VmFsdWUgPyB0aGlzLmRlZmF1bHRWYWx1ZSA6IGZhbHNlKTtcblx0fVxufVxuIiwiPG5nLWRvYy1jaGVja2JveCBbbmdEb2NUb29sdGlwXT1cInRvb2x0aXBUZW1wbGF0ZVwiIFtjYW5PcGVuXT1cIiEhZGVzY3JpcHRpb25cIj5cblx0e3sgbmFtZSB9fVxuXHQ8bmctdGVtcGxhdGUgI3Rvb2x0aXBUZW1wbGF0ZT5cblx0XHQ8ZGl2IFtpbm5lckhUTUxdPVwiZGVzY3JpcHRpb24gfCBuZ0RvY1Nhbml0aXplSHRtbFwiPjwvZGl2PlxuXHQ8L25nLXRlbXBsYXRlPlxuPC9uZy1kb2MtY2hlY2tib3g+XG4iXX0=