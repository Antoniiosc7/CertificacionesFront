import { NgDocTheme } from '@ng-doc/app/interfaces';
import { NgDocStoreService } from '@ng-doc/app/services/store';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Service for managing themes.
 */
export declare class NgDocThemeService {
    private readonly window;
    private readonly document;
    private readonly themes;
    private readonly store;
    static readonly autoThemeId: string;
    private linkElement?;
    private theme;
    private readonly theme$;
    private autoTheme;
    constructor(window: Window, document: Document, themes: NgDocTheme[], store: NgDocStoreService);
    /**
     * Returns the current theme.
     */
    get currentTheme(): NgDocTheme | undefined;
    /**
     * Returns whether automatic theme switching based on the user's operating system settings is enabled.
     */
    get isAutoThemeEnabled(): boolean;
    /**
     * Enables automatic theme switching based on the user's operating system settings.
     * @param light - Theme for light mode.
     * @param dark - Theme for dark mode.
     */
    enableAutoTheme(light: NgDocTheme | undefined, dark: NgDocTheme | undefined): Promise<void>;
    /**
     * Disables automatic theme switching based on the user's operating system settings.
     */
    disableAutoTheme(): Promise<void>;
    /**
     * Sets the theme by id.
     * @param id - Theme id.
     * @param save - Whether to save the theme in the store to restore it when the page is reloaded. (`true` by default)
     */
    set(id?: string, save?: boolean): Promise<void>;
    /**
     * Returns an observable that emits when the theme changes.
     */
    themeChanges(): Observable<NgDocTheme | undefined>;
    private removeLink;
    private createLinkIfNoExists;
    private setAutoTheme;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgDocThemeService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgDocThemeService>;
}
