import { Injector, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { NgDocPlaygroundConfig, NgDocPlaygroundProperties } from '@ng-doc/core/interfaces';
import { Observable } from 'rxjs';
import { NgDocBasePlayground } from '../base-playground';
import { NgDocPlaygroundForm } from '../playground-form';
import * as i0 from "@angular/core";
export declare class NgDocPlaygroundDemoComponent<T extends NgDocPlaygroundProperties = NgDocPlaygroundProperties> implements OnChanges, OnDestroy {
    private readonly injector;
    id: string;
    pipeName: string;
    selector: string;
    configuration?: NgDocPlaygroundConfig;
    properties?: T;
    recreateDemo: boolean;
    form: FormGroup<NgDocPlaygroundForm>;
    expanded: boolean;
    demoOutlet?: ViewContainerRef;
    playgroundDemo?: typeof NgDocBasePlayground;
    code: Observable<string>;
    private demoRef?;
    private readonly unsubscribe$;
    constructor(injector: Injector);
    ngOnChanges({ form, id }: SimpleChanges): void;
    private updateDemo;
    private createDemo;
    private updateCodeView;
    private getActiveContent;
    private getActiveInputs;
    private getPipeActiveInputs;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgDocPlaygroundDemoComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgDocPlaygroundDemoComponent<any>, "ng-doc-playground-demo", never, { "id": { "alias": "id"; "required": false; }; "pipeName": { "alias": "pipeName"; "required": false; }; "selector": { "alias": "selector"; "required": false; }; "configuration": { "alias": "configuration"; "required": false; }; "properties": { "alias": "properties"; "required": false; }; "recreateDemo": { "alias": "recreateDemo"; "required": false; }; "form": { "alias": "form"; "required": false; }; "expanded": { "alias": "expanded"; "required": false; }; }, {}, never, never, true, never>;
}
