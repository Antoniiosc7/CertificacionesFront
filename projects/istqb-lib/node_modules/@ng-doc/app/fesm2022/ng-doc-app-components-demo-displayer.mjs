import * as i1 from '@angular/cdk/clipboard';
import { NgIf, NgTemplateOutlet } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input, HostBinding } from '@angular/core';
import { NgDocCodeComponent } from '@ng-doc/app/components/code';
import { NgDocCodeHighlighterDirective } from '@ng-doc/app/directives/code-highlighter';
import { NgDocButtonIconComponent, NgDocTooltipDirective, NgDocSmoothResizeComponent, NgDocIconComponent, NgDocExpanderComponent } from '@ng-doc/ui-kit';

class NgDocDemoDisplayerComponent {
    constructor(clipboard) {
        this.clipboard = clipboard;
        this.codeContent = '';
        this.code = '';
        this.language = 'typescript';
        this.container = true;
        this.border = true;
        this.expanded = false;
        this.copyTooltipText = '';
    }
    get expandTooltipText() {
        return this.expanded ? 'Collapse' : 'Expand';
    }
    copyCode() {
        this.clipboard.copy(this.code);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocDemoDisplayerComponent, deps: [{ token: i1.Clipboard }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocDemoDisplayerComponent, isStandalone: true, selector: "ng-doc-demo-displayer", inputs: { codeContent: "codeContent", code: "code", language: "language", container: "container", border: "border", expanded: "expanded" }, host: { properties: { "attr.data-ng-doc-border": "this.border" } }, ngImport: i0, template: "<div class=\"ng-doc-demo-wrapper\" *ngIf=\"container; else demoTemplate\">\n\t<div class=\"ng-doc-demo-container\">\n\t\t<div class=\"ng-doc-demo\">\n\t\t\t<ng-container *ngTemplateOutlet=\"demoTemplate\"></ng-container>\n\t\t</div>\n\t\t<div class=\"ng-doc-demo-controls\">\n\t\t\t<button\n\t\t\t\tclass=\"ng-doc-copy-button\"\n\t\t\t\t*ngIf=\"!codeContent\"\n\t\t\t\tng-doc-button-icon\n\t\t\t\t(click)=\"copyCode(); copyTooltipText = 'Copied!'\"\n\t\t\t\t[ngDocTooltip]=\"tooltipContent\"\n\t\t\t\t(mouseenter)=\"copyTooltipText = 'Copy to clipboard'\">\n\t\t\t\t<ng-template #tooltipContent>\n\t\t\t\t\t<ng-doc-smooth-resize [trigger]=\"copyTooltipText\">\n\t\t\t\t\t\t{{ copyTooltipText }}\n\t\t\t\t\t</ng-doc-smooth-resize>\n\t\t\t\t</ng-template>\n\t\t\t\t<ng-doc-icon icon=\"copy\"></ng-doc-icon>\n\t\t\t</button>\n\t\t\t<button ng-doc-button-icon (click)=\"expanded = !expanded\" [ngDocTooltip]=\"tooltipContent\">\n\t\t\t\t<ng-template #tooltipContent>\n\t\t\t\t\t<ng-doc-smooth-resize [trigger]=\"expandTooltipText\">\n\t\t\t\t\t\t{{ expandTooltipText }}\n\t\t\t\t\t</ng-doc-smooth-resize>\n\t\t\t\t</ng-template>\n\t\t\t\t<ng-doc-icon icon=\"code\"></ng-doc-icon>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\t<ng-doc-expander [content]=\"codeContent ? codeContent : expanderContent\" [expanded]=\"expanded\">\n\t\t<ng-template #expanderContent>\n\t\t\t<ng-doc-code [copyButton]=\"false\">\n\t\t\t\t<pre class=\"hljs ngde\">\n\t\t\t\t\t<code class=\"ngde\" [ngDocCodeHighlighter]=\"code\" [language]=\"'html'\"></code>\n\t\t\t\t</pre>\n\t\t\t</ng-doc-code>\n\t\t</ng-template>\n\t</ng-doc-expander>\n</div>\n\n<ng-template #demoTemplate>\n\t<ng-content></ng-content>\n</ng-template>\n", styles: [":host{display:flex;flex-direction:column;overflow:hidden;--ng-doc-code-margin: 0;--ng-doc-code-border-radius: 0;--ng-doc-code-border: none}:host[data-ng-doc-border=true]{border:var(--ng-doc-demo-displayer-border);border-radius:var(--ng-doc-demo-displayer-border-radius)}:host .ng-doc-demo-wrapper{overflow:hidden}:host .ng-doc-demo-wrapper .ng-doc-demo-container{display:flex;justify-content:flex-start;width:100%;padding:calc(var(--ng-doc-base-gutter) * 2);background:var(--ng-doc-demo-displayer-background, var(--ng-doc-base-0))}:host .ng-doc-demo-wrapper .ng-doc-demo-container .ng-doc-demo{overflow:hidden;width:100%}:host .ng-doc-demo-wrapper .ng-doc-demo-container .ng-doc-demo-controls{flex-shrink:0;margin-left:auto}:host ng-doc-code{border-top:1px solid var(--ng-doc-border-color)}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: NgDocButtonIconComponent, selector: "button[ng-doc-button-icon], a[ng-doc-button-icon]", inputs: ["size", "rounded"] }, { kind: "directive", type: NgDocTooltipDirective, selector: "[ngDocTooltip]", inputs: ["ngDocTooltip", "delay", "displayOrigin", "pointerOrigin", "positions", "canOpen", "panelClass", "minHeight", "maxHeight", "height", "minWidth", "maxWidth", "width"], outputs: ["beforeOpen", "afterOpen", "beforeClose", "afterClose"], exportAs: ["ngDocTooltip"] }, { kind: "component", type: NgDocSmoothResizeComponent, selector: "ng-doc-smooth-resize", inputs: ["trigger", "animateOpacity"] }, { kind: "component", type: NgDocIconComponent, selector: "ng-doc-icon", inputs: ["icon", "customIcon", "size"] }, { kind: "component", type: NgDocExpanderComponent, selector: "ng-doc-expander", inputs: ["expanded", "content", "from"] }, { kind: "component", type: NgDocCodeComponent, selector: "ng-doc-code", inputs: ["html", "copyButton", "name", "icon", "lineNumbers"] }, { kind: "directive", type: NgDocCodeHighlighterDirective, selector: "code[ngDocCodeHighlighter]", inputs: ["ngDocCodeHighlighter", "html", "language"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocDemoDisplayerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-demo-displayer', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        NgIf,
                        NgTemplateOutlet,
                        NgDocButtonIconComponent,
                        NgDocTooltipDirective,
                        NgDocSmoothResizeComponent,
                        NgDocIconComponent,
                        NgDocExpanderComponent,
                        NgDocCodeComponent,
                        NgDocCodeHighlighterDirective,
                    ], template: "<div class=\"ng-doc-demo-wrapper\" *ngIf=\"container; else demoTemplate\">\n\t<div class=\"ng-doc-demo-container\">\n\t\t<div class=\"ng-doc-demo\">\n\t\t\t<ng-container *ngTemplateOutlet=\"demoTemplate\"></ng-container>\n\t\t</div>\n\t\t<div class=\"ng-doc-demo-controls\">\n\t\t\t<button\n\t\t\t\tclass=\"ng-doc-copy-button\"\n\t\t\t\t*ngIf=\"!codeContent\"\n\t\t\t\tng-doc-button-icon\n\t\t\t\t(click)=\"copyCode(); copyTooltipText = 'Copied!'\"\n\t\t\t\t[ngDocTooltip]=\"tooltipContent\"\n\t\t\t\t(mouseenter)=\"copyTooltipText = 'Copy to clipboard'\">\n\t\t\t\t<ng-template #tooltipContent>\n\t\t\t\t\t<ng-doc-smooth-resize [trigger]=\"copyTooltipText\">\n\t\t\t\t\t\t{{ copyTooltipText }}\n\t\t\t\t\t</ng-doc-smooth-resize>\n\t\t\t\t</ng-template>\n\t\t\t\t<ng-doc-icon icon=\"copy\"></ng-doc-icon>\n\t\t\t</button>\n\t\t\t<button ng-doc-button-icon (click)=\"expanded = !expanded\" [ngDocTooltip]=\"tooltipContent\">\n\t\t\t\t<ng-template #tooltipContent>\n\t\t\t\t\t<ng-doc-smooth-resize [trigger]=\"expandTooltipText\">\n\t\t\t\t\t\t{{ expandTooltipText }}\n\t\t\t\t\t</ng-doc-smooth-resize>\n\t\t\t\t</ng-template>\n\t\t\t\t<ng-doc-icon icon=\"code\"></ng-doc-icon>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\t<ng-doc-expander [content]=\"codeContent ? codeContent : expanderContent\" [expanded]=\"expanded\">\n\t\t<ng-template #expanderContent>\n\t\t\t<ng-doc-code [copyButton]=\"false\">\n\t\t\t\t<pre class=\"hljs ngde\">\n\t\t\t\t\t<code class=\"ngde\" [ngDocCodeHighlighter]=\"code\" [language]=\"'html'\"></code>\n\t\t\t\t</pre>\n\t\t\t</ng-doc-code>\n\t\t</ng-template>\n\t</ng-doc-expander>\n</div>\n\n<ng-template #demoTemplate>\n\t<ng-content></ng-content>\n</ng-template>\n", styles: [":host{display:flex;flex-direction:column;overflow:hidden;--ng-doc-code-margin: 0;--ng-doc-code-border-radius: 0;--ng-doc-code-border: none}:host[data-ng-doc-border=true]{border:var(--ng-doc-demo-displayer-border);border-radius:var(--ng-doc-demo-displayer-border-radius)}:host .ng-doc-demo-wrapper{overflow:hidden}:host .ng-doc-demo-wrapper .ng-doc-demo-container{display:flex;justify-content:flex-start;width:100%;padding:calc(var(--ng-doc-base-gutter) * 2);background:var(--ng-doc-demo-displayer-background, var(--ng-doc-base-0))}:host .ng-doc-demo-wrapper .ng-doc-demo-container .ng-doc-demo{overflow:hidden;width:100%}:host .ng-doc-demo-wrapper .ng-doc-demo-container .ng-doc-demo-controls{flex-shrink:0;margin-left:auto}:host ng-doc-code{border-top:1px solid var(--ng-doc-border-color)}\n"] }]
        }], ctorParameters: () => [{ type: i1.Clipboard }], propDecorators: { codeContent: [{
                type: Input
            }], code: [{
                type: Input
            }], language: [{
                type: Input
            }], container: [{
                type: Input
            }], border: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-ng-doc-border']
            }], expanded: [{
                type: Input
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { NgDocDemoDisplayerComponent };
//# sourceMappingURL=ng-doc-app-components-demo-displayer.mjs.map
