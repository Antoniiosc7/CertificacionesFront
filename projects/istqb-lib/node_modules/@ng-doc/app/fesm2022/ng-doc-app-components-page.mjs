import { __decorate } from 'tslib';
import { NgIf, NgComponentOutlet } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, Renderer2, ElementRef, ViewContainerRef, Component, ChangeDetectionStrategy, ViewChild } from '@angular/core';
import { Router, ActivatedRoute, RouterOutlet } from '@angular/router';
import { NgDocRootPage } from '@ng-doc/app/classes/root-page';
import { NgDocBreadcrumbComponent } from '@ng-doc/app/components/breadcrumb';
import { NgDocTocComponent } from '@ng-doc/app/components/toc';
import { createComponent, generateToc } from '@ng-doc/app/helpers';
import { NgDocPageProcessorDirective } from '@ng-doc/app/processors';
import { provideTypeControl } from '@ng-doc/app/providers/type-control';
import { NG_DOC_PAGE_SKELETON, NG_DOC_CONTEXT } from '@ng-doc/app/tokens';
import { NgDocTypeAliasControlComponent, NgDocStringControlComponent, NgDocNumberControlComponent, NgDocBooleanControlComponent } from '@ng-doc/app/type-controls';
import { isPresent } from '@ng-doc/core';
import { NgDocButtonIconComponent, NgDocTooltipDirective, NgDocIconComponent, DialogOutletComponent, NgDocTextComponent, NgDocTextLeftDirective, NgDocTextRightDirective, NgDocMediaQueryDirective } from '@ng-doc/ui-kit';
import { UntilDestroy } from '@ngneat/until-destroy';

let NgDocPageComponent = class NgDocPageComponent {
    constructor() {
        this.rootPage = inject(NgDocRootPage);
        this.skeleton = inject(NG_DOC_PAGE_SKELETON);
        this.context = inject(NG_DOC_CONTEXT);
        this.renderer = inject(Renderer2);
        this.router = inject(Router);
        this.breadcrumbs = inject(ActivatedRoute)
            .pathFromRoot.filter((route) => !route.snapshot.url.length)
            .map((route) => route.snapshot.title)
            .filter(isPresent);
    }
    ngOnInit() {
        if (this.rootPage.pageType === 'guide') {
            if (this.skeleton.breadcrumbs) {
                createComponent(this.pageBreadcrumbs, this.skeleton.breadcrumbs, {
                    breadcrumbs: this.breadcrumbs,
                });
            }
            if (this.skeleton.navigation) {
                createComponent(this.pageNavigation, this.skeleton.navigation, this.navigationInputs());
            }
        }
    }
    createToc() {
        if (this.pageToc && this.skeleton.toc) {
            createComponent(this.pageToc, this.skeleton.toc, {
                tableOfContent: generateToc(this.pageContainer.nativeElement) ?? [],
            });
        }
    }
    navigationInputs() {
        const flatItems = (items) => items
            .map((item) => [item.children?.length ? flatItems(item.children) : item])
            .flat(2);
        const flatPages = flatItems(this.context.navigation);
        return {
            prevPage: flatPages[flatPages.findIndex((item) => this.url === item.route) - 1],
            nextPage: flatPages[flatPages.findIndex((item) => this.url === item.route) + 1],
        };
    }
    get url() {
        const urlTree = this.router.parseUrl(this.router.url);
        urlTree.queryParams = {};
        urlTree.fragment = null;
        return urlTree.toString();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocPageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.0", type: NgDocPageComponent, isStandalone: true, selector: "ng-doc-page", host: { attributes: { "ngSkipHydration": "true" } }, providers: [
            provideTypeControl('NgDocTypeAlias', NgDocTypeAliasControlComponent, { order: 10 }),
            provideTypeControl('string', NgDocStringControlComponent, { order: 20 }),
            provideTypeControl('string | undefined', NgDocStringControlComponent, { order: 20 }),
            provideTypeControl('number', NgDocNumberControlComponent, { order: 30 }),
            provideTypeControl('number | undefined', NgDocNumberControlComponent, { order: 30 }),
            provideTypeControl('boolean', NgDocBooleanControlComponent, { hideLabel: true, order: 40 }),
            provideTypeControl('boolean | undefined', NgDocBooleanControlComponent, {
                hideLabel: true,
                order: 40,
            }),
        ], viewQueries: [{ propertyName: "pageContainer", first: true, predicate: ["pageContainer"], descendants: true, read: ElementRef, static: true }, { propertyName: "pageBreadcrumbs", first: true, predicate: ["pageBreadcrumbs"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "pageNavigation", first: true, predicate: ["pageNavigation"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "pageToc", first: true, predicate: ["pageToc"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "childOutlet", first: true, predicate: ["childOutlet"], descendants: true }], ngImport: i0, template: "<article>\n\t<ng-container #pageBreadcrumbs></ng-container>\n\n\t<div class=\"ng-doc-page-controls\">\n\t\t<a\n\t\t\tng-doc-button-icon\n\t\t\t*ngIf=\"rootPage.editSourceFileUrl\"\n\t\t\t[href]=\"rootPage.editSourceFileUrl\"\n\t\t\ttarget=\"_blank\"\n\t\t\tngDocTooltip=\"Suggest Edits\">\n\t\t\t<ng-doc-icon icon=\"edit-2\"></ng-doc-icon>\n\t\t</a>\n\t\t<a\n\t\t\tng-doc-button-icon\n\t\t\t*ngIf=\"rootPage.viewSourceFileUrl\"\n\t\t\t[href]=\"rootPage.viewSourceFileUrl\"\n\t\t\ttarget=\"_blank\"\n\t\t\tngDocTooltip=\"View Source\">\n\t\t\t<ng-doc-icon icon=\"code\"></ng-doc-icon>\n\t\t</a>\n\t</div>\n\n\t<div\n\t\tclass=\"ng-doc-page-wrapper\"\n\t\t[ngDocPageProcessor]=\"rootPage.pageContent\"\n\t\t(afterRender)=\"createToc()\"\n\t\t#pageContainer></div>\n\n\t<ng-container #pageNavigation></ng-container>\n</article>\n\n<ng-doc-dialog-outlet\n\t*ngIf=\"!rootPage.page?.disableFullscreenRoutes\"\n\t[config]=\"{ width: '100vw', height: '100vh' }\">\n\t<div class=\"ng-doc-fullscreen-wrapper\">\n\t\t<router-outlet></router-outlet>\n\t</div>\n</ng-doc-dialog-outlet>\n\n<ng-container #pageToc></ng-container>\n", styles: [":host{display:flex;--ng-doc-toc-margin: calc(var(--ng-doc-base-gutter) * 5)}:host article{position:relative;width:var(--ng-doc-article-width, 100%);margin-left:auto;margin-right:auto;overflow:hidden}:host article .ng-doc-page-controls{position:absolute;display:flex;grid-gap:var(--ng-doc-base-gutter);top:0;right:0}.ng-doc-fullscreen-wrapper{display:flex;align-items:center;justify-content:center;width:100%;height:100%}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: NgDocButtonIconComponent, selector: "button[ng-doc-button-icon], a[ng-doc-button-icon]", inputs: ["size", "rounded"] }, { kind: "directive", type: NgDocTooltipDirective, selector: "[ngDocTooltip]", inputs: ["ngDocTooltip", "delay", "displayOrigin", "pointerOrigin", "positions", "canOpen", "panelClass", "minHeight", "maxHeight", "height", "minWidth", "maxWidth", "width"], outputs: ["beforeOpen", "afterOpen", "beforeClose", "afterClose"], exportAs: ["ngDocTooltip"] }, { kind: "component", type: NgDocIconComponent, selector: "ng-doc-icon", inputs: ["icon", "customIcon", "size"] }, { kind: "directive", type: NgDocPageProcessorDirective, selector: "[ngDocPageProcessor]", inputs: ["ngDocPageProcessor"], outputs: ["afterRender"] }, { kind: "directive", type: RouterOutlet, selector: "router-outlet", inputs: ["name"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }, { kind: "component", type: DialogOutletComponent, selector: "ng-doc-dialog-outlet", inputs: ["config"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
};
NgDocPageComponent = __decorate([
    UntilDestroy()
], NgDocPageComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: NgDocPageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ng-doc-page', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        NgIf,
                        NgDocBreadcrumbComponent,
                        NgDocButtonIconComponent,
                        NgDocTooltipDirective,
                        NgDocIconComponent,
                        NgDocTextComponent,
                        NgDocTextLeftDirective,
                        NgDocTextRightDirective,
                        NgDocMediaQueryDirective,
                        NgDocTocComponent,
                        NgDocPageProcessorDirective,
                        NgComponentOutlet,
                        RouterOutlet,
                        DialogOutletComponent,
                    ], providers: [
                        provideTypeControl('NgDocTypeAlias', NgDocTypeAliasControlComponent, { order: 10 }),
                        provideTypeControl('string', NgDocStringControlComponent, { order: 20 }),
                        provideTypeControl('string | undefined', NgDocStringControlComponent, { order: 20 }),
                        provideTypeControl('number', NgDocNumberControlComponent, { order: 30 }),
                        provideTypeControl('number | undefined', NgDocNumberControlComponent, { order: 30 }),
                        provideTypeControl('boolean', NgDocBooleanControlComponent, { hideLabel: true, order: 40 }),
                        provideTypeControl('boolean | undefined', NgDocBooleanControlComponent, {
                            hideLabel: true,
                            order: 40,
                        }),
                    ], host: { ngSkipHydration: 'true' }, template: "<article>\n\t<ng-container #pageBreadcrumbs></ng-container>\n\n\t<div class=\"ng-doc-page-controls\">\n\t\t<a\n\t\t\tng-doc-button-icon\n\t\t\t*ngIf=\"rootPage.editSourceFileUrl\"\n\t\t\t[href]=\"rootPage.editSourceFileUrl\"\n\t\t\ttarget=\"_blank\"\n\t\t\tngDocTooltip=\"Suggest Edits\">\n\t\t\t<ng-doc-icon icon=\"edit-2\"></ng-doc-icon>\n\t\t</a>\n\t\t<a\n\t\t\tng-doc-button-icon\n\t\t\t*ngIf=\"rootPage.viewSourceFileUrl\"\n\t\t\t[href]=\"rootPage.viewSourceFileUrl\"\n\t\t\ttarget=\"_blank\"\n\t\t\tngDocTooltip=\"View Source\">\n\t\t\t<ng-doc-icon icon=\"code\"></ng-doc-icon>\n\t\t</a>\n\t</div>\n\n\t<div\n\t\tclass=\"ng-doc-page-wrapper\"\n\t\t[ngDocPageProcessor]=\"rootPage.pageContent\"\n\t\t(afterRender)=\"createToc()\"\n\t\t#pageContainer></div>\n\n\t<ng-container #pageNavigation></ng-container>\n</article>\n\n<ng-doc-dialog-outlet\n\t*ngIf=\"!rootPage.page?.disableFullscreenRoutes\"\n\t[config]=\"{ width: '100vw', height: '100vh' }\">\n\t<div class=\"ng-doc-fullscreen-wrapper\">\n\t\t<router-outlet></router-outlet>\n\t</div>\n</ng-doc-dialog-outlet>\n\n<ng-container #pageToc></ng-container>\n", styles: [":host{display:flex;--ng-doc-toc-margin: calc(var(--ng-doc-base-gutter) * 5)}:host article{position:relative;width:var(--ng-doc-article-width, 100%);margin-left:auto;margin-right:auto;overflow:hidden}:host article .ng-doc-page-controls{position:absolute;display:flex;grid-gap:var(--ng-doc-base-gutter);top:0;right:0}.ng-doc-fullscreen-wrapper{display:flex;align-items:center;justify-content:center;width:100%;height:100%}\n"] }]
        }], propDecorators: { pageContainer: [{
                type: ViewChild,
                args: ['pageContainer', { read: ElementRef, static: true }]
            }], pageBreadcrumbs: [{
                type: ViewChild,
                args: ['pageBreadcrumbs', { read: ViewContainerRef, static: true }]
            }], pageNavigation: [{
                type: ViewChild,
                args: ['pageNavigation', { read: ViewContainerRef, static: true }]
            }], pageToc: [{
                type: ViewChild,
                args: ['pageToc', { read: ViewContainerRef, static: true }]
            }], childOutlet: [{
                type: ViewChild,
                args: ['childOutlet']
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { NgDocPageComponent };
//# sourceMappingURL=ng-doc-app-components-page.mjs.map
