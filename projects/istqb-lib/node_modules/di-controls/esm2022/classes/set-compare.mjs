import { DI_DEFAULT_COMPARE } from 'di-controls/constants';
export class SetCompare {
    values = new Set();
    compareFn;
    constructor(compareFn, newValues) {
        this.compareFn = compareFn || DI_DEFAULT_COMPARE;
        this.values = new Set(newValues || []);
    }
    get size() {
        return this.values.size;
    }
    *[Symbol.iterator]() {
        for (const value of this.values) {
            yield value;
        }
    }
    add(value) {
        const item = this.find(value);
        !item && this.values.add(value);
    }
    delete(value) {
        const item = this.find(value);
        item && this.values.delete(item);
    }
    has(value) {
        return this.values.has(value) || !!this.find(value);
    }
    clear() {
        this.values = new Set();
    }
    toArray() {
        return Array.from(this.values);
    }
    find(value) {
        /* trying to find element as is, because its the fastest way */
        if (this.values.has(value)) {
            return value;
        }
        /* if we didn't find it then trying to use compare function to do that */
        for (const v of this.values) {
            if (this.compareFn(value, v)) {
                return v;
            }
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LWNvbXBhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2RpLWNvbnRyb2xzL2NsYXNzZXMvc2V0LWNvbXBhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHM0QsTUFBTSxPQUFPLFVBQVU7SUFDZCxNQUFNLEdBQVcsSUFBSSxHQUFHLEVBQUssQ0FBQztJQUNyQixTQUFTLENBQXVCO0lBRWpELFlBQVksU0FBZ0MsRUFBRSxTQUFzQjtRQUNuRSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsSUFBSSxrQkFBa0IsQ0FBQztRQUNqRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxDQUFJLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDakIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hDLE1BQU0sS0FBSyxDQUFDO1NBQ1o7SUFDRixDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQVE7UUFDWCxNQUFNLElBQUksR0FBYSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBUTtRQUNkLE1BQU0sSUFBSSxHQUFhLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxHQUFHLENBQUMsS0FBUTtRQUNYLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELEtBQUs7UUFDSixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxFQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVELE9BQU87UUFDTixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTyxJQUFJLENBQUMsS0FBUTtRQUNwQiwrREFBK0Q7UUFDL0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzQixPQUFPLEtBQUssQ0FBQztTQUNiO1FBRUQseUVBQXlFO1FBQ3pFLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUM1QixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixPQUFPLENBQUMsQ0FBQzthQUNUO1NBQ0Q7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERJX0RFRkFVTFRfQ09NUEFSRSB9IGZyb20gJ2RpLWNvbnRyb2xzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBESUNvbXBhcmVGdW5jdGlvbiB9IGZyb20gJ2RpLWNvbnRyb2xzL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIFNldENvbXBhcmU8VD4gaW1wbGVtZW50cyBJdGVyYWJsZTxUPiB7XG5cdHByaXZhdGUgdmFsdWVzOiBTZXQ8VD4gPSBuZXcgU2V0PFQ+KCk7XG5cdHByaXZhdGUgcmVhZG9ubHkgY29tcGFyZUZuOiBESUNvbXBhcmVGdW5jdGlvbjxUPjtcblxuXHRjb25zdHJ1Y3Rvcihjb21wYXJlRm4/OiBESUNvbXBhcmVGdW5jdGlvbjxUPiwgbmV3VmFsdWVzPzogVFtdIHwgbnVsbCkge1xuXHRcdHRoaXMuY29tcGFyZUZuID0gY29tcGFyZUZuIHx8IERJX0RFRkFVTFRfQ09NUEFSRTtcblx0XHR0aGlzLnZhbHVlcyA9IG5ldyBTZXQ8VD4obmV3VmFsdWVzIHx8IFtdKTtcblx0fVxuXG5cdGdldCBzaXplKCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLnNpemU7XG5cdH1cblxuXHQqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8VD4ge1xuXHRcdGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy52YWx1ZXMpIHtcblx0XHRcdHlpZWxkIHZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdGFkZCh2YWx1ZTogVCk6IHZvaWQge1xuXHRcdGNvbnN0IGl0ZW06IFQgfCBudWxsID0gdGhpcy5maW5kKHZhbHVlKTtcblx0XHQhaXRlbSAmJiB0aGlzLnZhbHVlcy5hZGQodmFsdWUpO1xuXHR9XG5cblx0ZGVsZXRlKHZhbHVlOiBUKTogdm9pZCB7XG5cdFx0Y29uc3QgaXRlbTogVCB8IG51bGwgPSB0aGlzLmZpbmQodmFsdWUpO1xuXHRcdGl0ZW0gJiYgdGhpcy52YWx1ZXMuZGVsZXRlKGl0ZW0pO1xuXHR9XG5cblx0aGFzKHZhbHVlOiBUKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmhhcyh2YWx1ZSkgfHwgISF0aGlzLmZpbmQodmFsdWUpO1xuXHR9XG5cblx0Y2xlYXIoKTogdm9pZCB7XG5cdFx0dGhpcy52YWx1ZXMgPSBuZXcgU2V0PFQ+KCk7XG5cdH1cblxuXHR0b0FycmF5KCk6IFRbXSB7XG5cdFx0cmV0dXJuIEFycmF5LmZyb20odGhpcy52YWx1ZXMpO1xuXHR9XG5cblx0cHJpdmF0ZSBmaW5kKHZhbHVlOiBUKTogVCB8IG51bGwge1xuXHRcdC8qIHRyeWluZyB0byBmaW5kIGVsZW1lbnQgYXMgaXMsIGJlY2F1c2UgaXRzIHRoZSBmYXN0ZXN0IHdheSAqL1xuXHRcdGlmICh0aGlzLnZhbHVlcy5oYXModmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0LyogaWYgd2UgZGlkbid0IGZpbmQgaXQgdGhlbiB0cnlpbmcgdG8gdXNlIGNvbXBhcmUgZnVuY3Rpb24gdG8gZG8gdGhhdCAqL1xuXHRcdGZvciAoY29uc3QgdiBvZiB0aGlzLnZhbHVlcykge1xuXHRcdFx0aWYgKHRoaXMuY29tcGFyZUZuKHZhbHVlLCB2KSkge1xuXHRcdFx0XHRyZXR1cm4gdjtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn1cbiJdfQ==